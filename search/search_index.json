{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to My Dev Notes.</p>"},{"location":"java/","title":"Java","text":""},{"location":"java/#overview","title":"Overview","text":"<p>Notes about Java will go here.</p>"},{"location":"reactjs/router/overview/","title":"Overview","text":"<ul> <li> <p>Reactta tek html dosyas\u0131 \u00fczerinden \u00e7ok sayfa g\u00f6sterimi yap\u0131l\u0131r (Multiple Pages in SPAs) </p> </li> <li> <p>/blog /about /user/1 vs gibi pathler parse edilerek sayfa tekrar render edilir. Bu sayfalar\u0131n hi\u00e7biri ger\u00e7ek bir html sayfas\u0131 de\u011fildir.</p> </li> </ul> <pre><code>npm install --save react-router-dom\n</code></pre> <ul> <li> <p>Route componenti \u00e7oklanarak hangi pathte ne yap\u0131laca\u011f\u0131 yaz\u0131l\u0131r. </p> </li> <li> <p>exact parametresi render methodunun sadece bu pathte \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar, e\u011fer bu path ile ba\u015flayan t\u00fcm pathlerde \u00e7al\u0131\u015fmas\u0131 gerekiyorsa bu parametre kullan\u0131lmaz.</p> </li> <li> <p>A\u015fa\u011f\u0131daki \u00f6rnekte / pathinde Home ve Home 2 g\u00f6r\u00fcn\u00fcrken /xyz pathinde sadece Home 2 g\u00f6r\u00fcn\u00fcr.</p> </li> </ul> <pre><code>import {Route} from 'react-router-dom';\n\n//...\n\n&lt;Route path=\"/\" exact render={() =&gt; &lt;h1&gt;Home&lt;/h1&gt;}/&gt;\n&lt;Route path=\"/\" render={() =&gt; &lt;h1&gt;Home 2&lt;/h1&gt;}/&gt;\n\n&lt;Route path=\"/\" exact component={ABCComponent}/&gt;\n</code></pre> <ul> <li>E\u011fer pathler <code>&lt;a&gt;</code> tagi ile tanmlan\u0131rsa browser davran\u0131\u015f\u0131 sebebiyle sayfe her seferinde komple yenilenir. bu durumun \u00fcstesinden gelmek, sadece sayfan\u0131n ilgili b\u00f6l\u00fcm\u00fcn\u00fcn yeniden y\u00fcklenmesini sa\u011flamak i\u00e7in router \u0131n <code>&lt;Link&gt;</code> componenti kullan\u0131l\u0131r. </li> </ul> <pre><code>import {Route, Link} from 'react-router-dom';\n\n//...\n\n&lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n</code></pre> <ul> <li>Routing propertileri (history, location, match) alt komponentlere de ta\u015f\u0131nmak isteniyorsa withRouter HOC(High Order Component) i eklenmesi gerekir.</li> </ul> <pre><code>import {withRouter} from 'react-router-dom';\n\n//...\n\nexport default withRouter(post);\n</code></pre> <p>Absolute Path vs Relative Path</p> <ul> <li>Absolute path <code>&lt;Link to=\"/new\" ...</code> \u015feklinde tan\u0131mlad\u0131\u011f\u0131m\u0131z her t\u0131klad\u0131\u011f\u0131nda context pathi replace eden klasik tan\u0131mlama \u015fekli <code>example.com/new</code> gibi.</li> <li>Relative path ise dinamik olu\u015fturulan ve sonuna eklenerek devam eden url anlam\u0131na geliyor. /new  pathini dinamik olarak sona eklemek istedi\u011fimiz durumlarda <code>&lt;Link to={props.match.url + '/new'}&gt;</code> \u015feklinde bir tan\u0131mlama yapabiliriz. Bu sayede <code>example.com/posts/new</code> ya da <code>example.com/all-posts/new</code> \u015feklinde pathleri de kampsam i\u00e7ine alm\u0131\u015f oluruz.</li> <li>Absolute ya da Relative daha iyidir gibi bir durum yoktur, iste\u011fe ve ihtiyaca ba\u011fl\u0131 olarak kullan\u0131l\u0131r.</li> </ul> <ul> <li>NavLink componenti Link gibi \u00e7al\u0131\u015f\u0131r fakat genellikle men\u00fc ama\u00e7l\u0131 kullan\u0131l\u0131r ve aktif olan menu linkine default olarak active class\u0131n\u0131 ekler. Bu sayede se\u00e7ili men\u00fc ile ilgili farkl\u0131 css yaz\u0131labilir. axact parametresi active class\u0131n\u0131n sadece se\u00e7ili oldu\u011fu zaman eklenmesi i\u00e7in kullan\u0131l\u0131r, kullan\u0131lmaz ise se\u00e7ili olmad\u0131\u011f\u0131nda da eklenir. activeClassName parametresi opsiyoneldir, yaz\u0131lmad\u0131\u011f\u0131nda default active class\u0131 kullan\u0131l\u0131r. activeStyle parametresiyle de inline style uygulanabilir.</li> </ul> <pre><code>&lt;NavLink \n        to=\"/\" \n        exact\n        activeClassName=\"active\"\n        activeStyle={{\n            color: '#fa923f',\n            textDecoration: 'underline'\n        }}&gt;\n    Home\n&lt;/NavLink&gt;\n</code></pre> <p>Dinamik Parametre Ge\u00e7i\u015fi</p> <p>Sayfalar aras\u0131 id* gibi dinamik parametre ge\u00e7i\u015fleri i\u00e7in,</p> <pre><code>&lt;Route path=\"/:id\" exact component={FullPost} /&gt;\n</code></pre> <p>\u015feklinde tan\u0131mlama yapmak gerekir. Bu sayfaya yap\u0131lan y\u00f6nlendirme linki</p> <pre><code>&lt;Link to={'/' + post.id}&gt;\n    &lt;Post\n        title={post.title}\n        author={post.author}\n        clicked={() =&gt; this.postSelectedHandler(post.id)} /&gt;\n&lt;/Link&gt;;\n</code></pre> <p>ya da kodlama ile y\u00f6nlendirmek yapmak i\u00e7in</p> <pre><code>this.props.history.push({pathname: '/' + id});\n//this.props.history.push('/' + id);\n</code></pre> <p>kullan\u0131labilir.</p> <p>Not: history objesi navigasyon i\u00e7in kullan\u0131l\u0131r. i\u00e7inde go, goBack, goForward, push gibi fonksiyonlar vard\u0131r.</p> <p>Parametrelere  ula\u015fmak i\u00e7in <code>match.params.paramter_name</code> kullan\u0131l\u0131r</p> <pre><code>componentDidMount () {\n    if ( this.props.match.params.id ) {\n        if ( !this.state.loadedPost \n            || (this.state.loadedPost \n                &amp;&amp; this.state.loadedPost.id !== this.props.id) ) {\n\n            axios.get( '/posts/' + this.props.match.params.id )\n                .then( response =&gt; {\n                    this.setState({ \n                        loadedPost: response.data \n                    });\n                });\n\n        }\n    }\n}\n</code></pre> <ul> <li><code>?something=somevalue</code> \u015feklinde olu\u015fan query parametrelerinin olu\u015fturulmas\u0131 ve parse edilmesi;</li> </ul> <p>parametrelerin yollanmas\u0131</p> <pre><code>&lt;Link to=\"/my-path?start=5\"&gt;Go to Start&lt;/Link&gt; \n</code></pre> <p>ya da</p> <pre><code>&lt;Link \n    to={\u200c{\n        pathname: '/my-path',\n        search: '?start=5'\n    }}&gt;\n    Go to Start\n&lt;/Link&gt;\n</code></pre> <p>parametrelerin al\u0131nmas\u0131</p> <pre><code>componentDidMount() {\n    const query = new URLSearchParams(this.props.location.search);\n    for (let param of query.entries()) {\n        console.log(param); // yields ['start', '5']\n    }\n}\n</code></pre> <ul> <li><code>#something</code> \u015feklinde olu\u015fturulan hash parametreleri de <code>props.location.hash</code> \u00fczerinden al\u0131n\u0131r;</li> </ul> <pre><code>&lt;Link to=\"/my-path#start-position\"&gt;Go to Start&lt;/Link&gt;\n</code></pre> <pre><code>&lt;Link \n    to={\u200c{\n        pathname: '/my-path',\n        hash: 'start-position'\n    }}\n    &gt;Go to Start&lt;/Link&gt;\n</code></pre> <ul> <li><code>&lt;Switch&gt;</code> componenti ayn\u0131 anda tek route un render edilmesini sa\u011flar. A\u015fa\u011f\u0131daki gibi durumlarda <code>path=\"/new-post\"</code> ve <code>path=\"/:id\"</code> \u00fcst\u00fcste binece\u011finden, bu durumun \u00f6n\u00fcne ge\u00e7mek i\u00e7in switch kullan\u0131labilir. Se\u00e7imi yukar\u0131dan a\u015fa\u011f\u0131ya do\u011fru yapar.</li> </ul> <pre><code>import {Route, NavLink, Switch} from 'react-router-dom';\n\n//...\n\n &lt;Switch&gt;\n    &lt;Route path=\"/\" exact component={Posts} /&gt;\n    &lt;Route path=\"/new-post\" component={NewPost} /&gt;\n    &lt;Route path=\"/:id\" exact component={FullPost} /&gt;\n&lt;/Switch&gt;\n</code></pre> <ul> <li><code>&lt;Redirect&gt;</code> componenti y\u00f6nlendirme i\u00e7in kullan\u0131l\u0131r. Url de\u011fi\u015fir.</li> </ul> <pre><code>import {Route, NavLink, Switch, Redirect} from 'react-router-dom';\n\n//...\n\n&lt;Redirect from=\"/\" to=\"/posts\" /&gt;\n</code></pre> <ul> <li>Redirect componenti bir i\u015flem sonucunda yap\u0131lacak \u015fekilde de kullan\u0131labilir. \u00d6rne\u011fin bi statte de\u011fi\u015fkeninin durumuna g\u00f6re sayfa y\u00f6nlendirilebilir.</li> </ul> <pre><code>//...\n\nlet redirect = null;\nif(this.state.submitted){\n    redirect = &lt;Redirect to=\"/posts\" /&gt;\n}\nreturn (\n    &lt;div className=\"NewPost\"&gt;\n        {redirect}\n        &lt;h1&gt;Add a Post&lt;/h1&gt;\n\n//...\n</code></pre> <p>Not: Redirect yerine daha pratik \u015fekilde state g\u00fcncelleme an\u0131nda props.history.replace fonksiyonu da kullan\u0131labilir. replace fonksiyonunun push fonksiyonundan fark\u0131 historyi korumamas\u0131d\u0131r. push yap\u0131ld\u0131\u011f\u0131nda browserda \u00f6nceki sayfaya d\u00f6n\u00fclebilir ama replacede d\u00f6n\u00fclemez.</p> <p>Not: Yetkiye sayfalar\u0131n gizlenmesi ya da a\u00e7\u0131lmas\u0131, state \u00fczerinde tutulacak bi de\u011fi\u015fkenle route lar\u0131n \u015fartl\u0131 yaz\u0131lmas\u0131 ile yap\u0131labilir ya da ilgili sayfan\u0131n componentDidMount methodunda yetki olup olmad\u0131\u011f\u0131 kontrol edilerek redirect yap\u0131labilir.</p> <p>Lazy Loading with Suspense</p> <p>Routing s\u0131ras\u0131nda her sayfada t\u00fcm jacascript tekrar y\u00fckleniyor, sadece se\u00e7ili componentin y\u00fcklenmesi isteniyorsa lazy loading y\u00f6ntemleri kullan\u0131l\u0131r.</p> <ol> <li>y\u00f6ntemde a\u015fa\u011f\u0131daki gibi olu\u015fturulan asyncComponent.js dosyas\u0131</li> </ol> <pre><code>import React, { Component } from \"react\"\n\nconst asyncComponent = (importComponent) =&gt; {\n    return class extends Component {\n        state = {\n            component: null\n        }\n\n        componentDidMount () {\n            importComponent()\n                .then(cmp =&gt; {\n                    this.setState({\n                        component: cmp.default\n                    });\n                });\n        }\n\n        render () {\n            const C = this.state.component;\n\n            return C ? &lt;C {...this.props} /&gt; : null;\n        }\n    }\n}\n\nexport default asyncComponent;\n</code></pre> <p>componentin kullan\u0131laca\u011f\u0131 routing dosyas\u0131 i\u00e7inde a\u015fa\u011f\u0131daki \u015fekilde import edilelerek kullan\u0131l\u0131r.</p> <pre><code>//...\n\nimport asyncComponent from '../../hoc/asyncComponent'\nconst AsyncNewPost = asyncComponent(() =&gt; {\n    return import('./NewPost/NewPost');\n});\n\n//...\n\n&lt;Route path=\"/new-post\" component={AsyncNewPost} /&gt;\n</code></pre> <ol> <li>y\u00f6ntemde ise react v16.6 ve sonras\u0131nda gelen yeni \u00f6zellikler ile birlikte a\u015fa\u011f\u0131daki gibi kullan\u0131labilir. Yine bu versiyonla gelen Suspense \u00f6zelli\u011fi ise component y\u00fcklenene kadar i\u015flem yap\u0131lmas\u0131n\u0131 sa\u011flar. </li> </ol> <pre><code>import React, { Component, Suspense } from 'react';\n\nconst Posts = React.lazy(() =&gt; import('./containers/Posts'));\n\n\n&lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n    &lt;Posts /&gt;\n&lt;/Suspense&gt;\n\n</code></pre> <ul> <li>E\u011fer uygulama example.com gibi de\u011fil de example.com/myapp \u015feklinde bi path alt\u0131nda \u00e7al\u0131\u015facaksa bunun reactte tan\u0131mlanmas\u0131 gerekir ve a\u015fa\u011f\u0131daki gibi yap\u0131l\u0131r.</li> </ul> <pre><code>&lt;BrowserRouter basename=\"/myapp\"&gt;\n...\n&lt;/BrowserRouter&gt;\n</code></pre> <ul> <li>Son olarak routing yukar\u0131dan a\u015fa\u011f\u0131ya s\u0131rayla \u00e7al\u0131\u015ft\u0131\u011f\u0131 i\u00e7in en sonda bir Not Found Page b\u00f6l\u00fcm\u00fc yapmak gerekir \u00e7\u00fcnk\u00fc browser her hal\u00fckarda index.html i a\u00e7acakt\u0131r.</li> </ul> <pre><code>&lt;Route render={() =&gt; &lt;h1&gt;Not Found&lt;/h1&gt;} /&gt;\n</code></pre> <ul> <li>D\u00f6k\u00fcman: https://reacttraining.com/react-router/web/guides/philosophy</li> </ul>"}]}