{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to My Dev Notes.</p>"},{"location":"java/","title":"Java","text":""},{"location":"java/#overview","title":"Overview","text":"<p>Notes about Java will go here.</p>"},{"location":"java/1.6/examples/","title":"Java 1.6 (Java 6) - Kod \u00d6rnekleri","text":""},{"location":"java/1.6/examples/#1-scripting-api-kullanm","title":"1. Scripting API Kullan\u0131m\u0131","text":"<pre><code>import javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\n\npublic class ScriptExample {\n    public static void main(String[] args) throws Exception {\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n        engine.eval(\"print('Hello from Java 6 Scripting!');\");\n    }\n}\n</code></pre>"},{"location":"java/1.6/examples/#2-web-servisleri-jax-ws-ile-basit-servis","title":"2. Web Servisleri (JAX-WS) ile Basit Servis","text":"<pre><code>import javax.jws.WebService;\nimport javax.jws.WebMethod;\n\n@WebService\npublic class MerhabaServis {\n    @WebMethod\n    public String merhaba(String isim) {\n        return \"Merhaba, \" + isim + \"!\";\n    }\n}\n</code></pre>"},{"location":"java/1.6/examples/#3-compiler-api-ile-dinamik-derleme","title":"3. Compiler API ile Dinamik Derleme","text":"<pre><code>import javax.tools.JavaCompiler;\nimport javax.tools.ToolProvider;\n\npublic class CompileExample {\n    public static void main(String[] args) {\n        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n        int result = compiler.run(null, null, null, \"Test.java\");\n        System.out.println(\"Derleme sonucu: \" + result);\n    }\n}\n</code></pre> <p>Daha fazla \u00f6rnek ve a\u00e7\u0131klama i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/1.6/features/","title":"Java 1.6 (Java 6) - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/1.6/features/#1-scripting-api-jsr-223","title":"1. Scripting API (JSR 223)","text":""},{"location":"java/1.6/features/#11-java-ds-dillerin-entegrasyonu","title":"1.1 Java D\u0131\u015f\u0131 Dillerin Entegrasyonu","text":"<ul> <li>Java uygulamalar\u0131nda JavaScript gibi dilleri do\u011frudan \u00e7al\u0131\u015ft\u0131rabilme.</li> <li>Script motorlar\u0131 ile dinamik kod y\u00fcr\u00fctme.</li> <li>\u00d6zellikle konfig\u00fcrasyon, test ve h\u0131zl\u0131 prototipleme i\u00e7in kullan\u0131\u015fl\u0131.</li> </ul>"},{"location":"java/1.6/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Uygulama i\u00e7inde kullan\u0131c\u0131dan al\u0131nan kodun g\u00fcvenli \u015fekilde \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131.</li> <li>Java ile birlikte Groovy, JRuby gibi dillerin entegrasyonu.</li> </ul>"},{"location":"java/1.6/features/#2-web-servisleri-jax-ws-jaxb","title":"2. Web Servisleri (JAX-WS, JAXB)","text":""},{"location":"java/1.6/features/#21-jax-ws-ile-soap-web-servisleri","title":"2.1 JAX-WS ile SOAP Web Servisleri","text":"<ul> <li>Java s\u0131n\u0131flar\u0131n\u0131 kolayca web servise d\u00f6n\u00fc\u015ft\u00fcrme.</li> <li>Otomatik WSDL \u00fcretimi ve istemci olu\u015fturma.</li> </ul>"},{"location":"java/1.6/features/#22-jaxb-ile-xml-isleme","title":"2.2 JAXB ile XML \u0130\u015fleme","text":"<ul> <li>Java nesnelerini XML\u2019e ve XML\u2019i Java nesnesine d\u00f6n\u00fc\u015ft\u00fcrme (marshalling/unmarshalling).</li> <li>Konfig\u00fcrasyon ve veri al\u0131\u015fveri\u015finde kolayl\u0131k.</li> </ul>"},{"location":"java/1.6/features/#3-compiler-api-jsr-199","title":"3. Compiler API (JSR 199)","text":""},{"location":"java/1.6/features/#31-dinamik-derleme","title":"3.1 Dinamik Derleme","text":"<ul> <li>\u00c7al\u0131\u015fma zaman\u0131nda Java kodunu derleyebilme.</li> <li>IDE, kod edit\u00f6r\u00fc ve ara\u00e7 geli\u015ftiriciler i\u00e7in temel altyap\u0131.</li> </ul>"},{"location":"java/1.6/features/#32-kullanm-senaryosu","title":"3.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Kod \u00fcretimi ve derleme i\u015flemlerinin otomasyonu.</li> <li>E\u011fitim ve \u00f6\u011fretim ama\u00e7l\u0131 dinamik kod \u00e7al\u0131\u015ft\u0131rma.</li> </ul>"},{"location":"java/1.6/features/#4-donanm-hzlandrmal-grafikler","title":"4. Donan\u0131m H\u0131zland\u0131rmal\u0131 Grafikler","text":""},{"location":"java/1.6/features/#41-java-2d-ve-direct3d-destegi","title":"4.1 Java 2D ve Direct3D Deste\u011fi","text":"<ul> <li>Grafik i\u015flemlerinde donan\u0131m h\u0131zland\u0131rma ile daha y\u00fcksek performans.</li> <li>\u00d6zellikle masa\u00fcst\u00fc uygulamalar\u0131nda ak\u0131c\u0131 aray\u00fczler.</li> </ul>"},{"location":"java/1.6/features/#5-yonetilebilirlik-ve-izleme","title":"5. Y\u00f6netilebilirlik ve \u0130zleme","text":""},{"location":"java/1.6/features/#51-gelismis-monitoring","title":"5.1 Geli\u015fmi\u015f Monitoring","text":"<ul> <li>Yeni MBeans ve JMX ile uygulama izleme ve y\u00f6netim kolayl\u0131\u011f\u0131.</li> <li>Performans analizi ve hata tespiti i\u00e7in ara\u00e7 deste\u011fi.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/1.6/migration/","title":"Java 1.6 (Java 6) - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/1.6/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 1.5 (5) ile b\u00fcy\u00fck oranda geriye d\u00f6n\u00fck uyumluluk sa\u011flanm\u0131\u015ft\u0131r.</li> <li>Baz\u0131 eski API\u2019ler deprecated (kullan\u0131mdan kald\u0131r\u0131lm\u0131\u015f) olabilir, g\u00fcncel dok\u00fcmantasyon kontrol edilmeli.</li> <li>JVM ve JDK g\u00fcncellemeleriyle birlikte performans ve g\u00fcvenlik iyile\u015ftirmeleri gelir, bu nedenle eski JVM s\u00fcr\u00fcmleriyle test yap\u0131lmal\u0131.</li> </ul>"},{"location":"java/1.6/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>1.6 ile gelen yeni API\u2019ler ve \u00f6zellikler, eski projelerde kullan\u0131lmak istenirse minimum derleyici ve \u00e7al\u0131\u015fma zaman\u0131 s\u00fcr\u00fcm\u00fc g\u00fcncellenmeli.</li> <li>\u00d6zellikle scripting ve web servisleri gibi yeni mod\u00fcller i\u00e7in ek ba\u011f\u0131ml\u0131l\u0131klar gerekebilir.</li> </ul>"},{"location":"java/1.6/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Kodunuzu derlemeden \u00f6nce eski ve yeni s\u00fcr\u00fcmde test edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Ant, Maven) g\u00fcncel tutun.</li> <li>JVM parametrelerini ve garbage collector ayarlar\u0131n\u0131 g\u00f6zden ge\u00e7irin.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/1.6/summary/","title":"Java 1.6 (Java 6) - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 1.6 (Java 6), 2006 y\u0131l\u0131nda yay\u0131nland\u0131 ve performans iyile\u015ftirmeleri, yeni API\u2019ler ve geli\u015ftirilmi\u015f ara\u00e7larla birlikte geldi. Bu s\u00fcr\u00fcmdeki yenilikler, Java platformunun kurumsal uygulamalarda daha verimli kullan\u0131lmas\u0131n\u0131 sa\u011flad\u0131.</p>"},{"location":"java/1.6/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Scripting API (JSR 223) ile Java d\u0131\u015f\u0131 dillerin entegrasyonu</li> <li>Web Service deste\u011fi (JAX-WS, JAXB)</li> <li>Donan\u0131m h\u0131zland\u0131rmal\u0131 grafikler (Java 2D, Direct3D)</li> <li>Compiler API (JSR 199)</li> <li>Performans ve y\u00f6netilebilirlik iyile\u015ftirmeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/11/examples/","title":"Java 11 - Kod \u00d6rnekleri","text":""},{"location":"java/11/examples/#1-http-client-api-kullanm","title":"1. HTTP Client API Kullan\u0131m\u0131","text":"<p>Yeni HTTP Client API ile kolayca HTTP istekleri g\u00f6nderilebilir.</p>"},{"location":"java/11/examples/#2-string-snf-yeni-metotlar","title":"2. String S\u0131n\u0131f\u0131 Yeni Metotlar","text":"<ul> <li><code>isBlank()</code>: Bo\u015f veya sadece bo\u015fluklardan olu\u015fan string kontrol\u00fc.</li> <li><code>lines()</code>: Sat\u0131rlara ay\u0131rma.</li> <li><code>strip()</code>: Ba\u015f ve sondaki bo\u015fluklar\u0131 temizleme.</li> <li><code>repeat(n)</code>: String\u2019i n kez tekrar etme.</li> </ul>"},{"location":"java/11/examples/#3-optional-snf-yeni-metotlar","title":"3. Optional S\u0131n\u0131f\u0131 Yeni Metotlar","text":"<ul> <li><code>isEmpty()</code>: De\u011fer yoksa true d\u00f6ner.</li> <li><code>ifPresentOrElse()</code>: De\u011fer varsa bir i\u015flem, yoksa ba\u015fka bir i\u015flem yap\u0131labilir.</li> </ul>"},{"location":"java/11/examples/#4-lambda-parametrelerinde-var-kullanm","title":"4. Lambda Parametrelerinde var Kullan\u0131m\u0131","text":"<p>Lambda ifadelerinde parametre tipi olarak <code>var</code> kullan\u0131labilir.</p>"},{"location":"java/11/examples/#5-zgc-kullanm","title":"5. ZGC Kullan\u0131m\u0131","text":"<p>D\u00fc\u015f\u00fck gecikmeli \u00e7\u00f6p toplama i\u00e7in ZGC etkinle\u015ftirilebilir.</p> <p>Daha fazla detay ve \u00f6rnek i\u00e7in resmi d\u00f6k\u00fcmana ve di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/11/features/","title":"Java 11 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/11/features/#1-http-client-api","title":"1. HTTP Client API","text":""},{"location":"java/11/features/#11-modern-http2-ve-websocket-destegi","title":"1.1 Modern HTTP/2 ve WebSocket Deste\u011fi","text":"<ul> <li>Yerle\u015fik, asenkron ve senkron HTTP istekleri.</li> <li>WebSocket ile ger\u00e7ek zamanl\u0131 ileti\u015fim.</li> <li>RESTful servislerle kolay entegrasyon.</li> </ul>"},{"location":"java/11/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>API istemcileri, mikroservisler, veri \u00e7ekme ve entegrasyon projeleri.</li> </ul>"},{"location":"java/11/features/#2-string-collection-ve-optional-gelistirmeleri","title":"2. String, Collection ve Optional Geli\u015ftirmeleri","text":""},{"location":"java/11/features/#21-string-snf","title":"2.1 String S\u0131n\u0131f\u0131","text":"<ul> <li><code>isBlank()</code>, <code>lines()</code>, <code>strip()</code>, <code>repeat()</code> gibi yeni metotlar.</li> <li>Metin i\u015fleme ve veri temizleme i\u015flemlerinde kolayl\u0131k.</li> </ul>"},{"location":"java/11/features/#22-collection-api","title":"2.2 Collection API","text":"<ul> <li><code>copyOf()</code>, <code>toArray(IntFunction&lt;T[]&gt;)</code> ile immutable koleksiyonlar ve kolay d\u00f6n\u00fc\u015f\u00fcmler.</li> </ul>"},{"location":"java/11/features/#23-optional-snf","title":"2.3 Optional S\u0131n\u0131f\u0131","text":"<ul> <li><code>isEmpty()</code>, <code>ifPresentOrElse()</code> ile null g\u00fcvenli\u011fi ve fonksiyonel kullan\u0131m.</li> </ul>"},{"location":"java/11/features/#3-lambda-parametrelerinde-var-anahtar-kelimesi","title":"3. Lambda Parametrelerinde var Anahtar Kelimesi","text":"<ul> <li>Lambda ifadelerinde parametre tipi olarak <code>var</code> kullan\u0131labilir.</li> <li>Tip \u00e7\u0131kar\u0131m\u0131 ve anotasyon deste\u011fi.</li> </ul>"},{"location":"java/11/features/#4-z-garbage-collector-zgc","title":"4. Z Garbage Collector (ZGC)","text":""},{"location":"java/11/features/#41-dusuk-gecikmeli-cop-toplayc","title":"4.1 D\u00fc\u015f\u00fck Gecikmeli \u00c7\u00f6p Toplay\u0131c\u0131","text":"<ul> <li>B\u00fcy\u00fck heap\u2019lerde d\u00fc\u015f\u00fck gecikme ile bellek y\u00f6netimi.</li> <li>\u00d6zellikle y\u00fcksek performans gerektiren sunucu uygulamalar\u0131nda avantaj.</li> </ul>"},{"location":"java/11/features/#5-javafxin-jdkdan-ayrlmas","title":"5. JavaFX\u2019in JDK\u2019dan Ayr\u0131lmas\u0131","text":"<ul> <li>JavaFX art\u0131k ayr\u0131 bir mod\u00fcl olarak sunuluyor.</li> <li>Masa\u00fcst\u00fc uygulamalar\u0131nda mod\u00fclerlik ve ba\u011f\u0131ms\u0131z g\u00fcncelleme imkan\u0131.</li> </ul>"},{"location":"java/11/features/#6-diger-jep-ve-api-gelistirmeleri","title":"6. Di\u011fer JEP ve API Geli\u015ftirmeleri","text":""},{"location":"java/11/features/#61-dosya-okumayazma-kolaylklar","title":"6.1 Dosya Okuma/Yazma Kolayl\u0131klar\u0131","text":"<ul> <li>Yeni dosya API\u2019leri ile h\u0131zl\u0131 ve g\u00fcvenli dosya i\u015flemleri.</li> </ul>"},{"location":"java/11/features/#62-flight-recorder-ve-mission-control","title":"6.2 Flight Recorder ve Mission Control","text":"<ul> <li>Uygulama izleme, performans analizi ve hata tespiti i\u00e7in geli\u015fmi\u015f ara\u00e7lar.</li> </ul>"},{"location":"java/11/features/#63-guvenlik-ve-performans","title":"6.3 G\u00fcvenlik ve Performans","text":"<ul> <li>TLS/SSL g\u00fcncellemeleri, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n kapat\u0131lmas\u0131.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/11/migration/","title":"Java 11 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/11/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 8\u2019den Java 11\u2019e ge\u00e7erken baz\u0131 eski API\u2019ler ve mod\u00fcller kald\u0131r\u0131lm\u0131\u015ft\u0131r (\u00f6r. Java EE, CORBA).</li> <li>JavaFX art\u0131k JDK i\u00e7inde gelmez, ayr\u0131 olarak eklenmelidir.</li> <li>Baz\u0131 komut sat\u0131r\u0131 ara\u00e7lar\u0131 (javaws, jvisualvm vb.) kald\u0131r\u0131lm\u0131\u015ft\u0131r.</li> <li>Minimum \u00e7al\u0131\u015fma zaman\u0131 ve derleyici s\u00fcr\u00fcm\u00fc Java 11 olmal\u0131d\u0131r.</li> </ul>"},{"location":"java/11/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Kodunuzu Java 11 ile derleyip test edin, \u00f6zellikle kald\u0131r\u0131lan API\u2019leri kullanan b\u00f6l\u00fcmleri kontrol edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> <li>Yeni \u00f6zellikleri (HTTP Client, String/Optional metotlar\u0131, ZGC) kademeli olarak entegre edin.</li> </ul>"},{"location":"java/11/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri kullanmaya \u00f6zen g\u00f6sterin.</li> <li>Java 11 LTS oldu\u011fu i\u00e7in uzun s\u00fcreli projelerde tercih edilebilir.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/11/summary/","title":"Java 11 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 11, 2018 y\u0131l\u0131nda LTS (Long Term Support) s\u00fcr\u00fcm\u00fc olarak yay\u0131nland\u0131. Java 8\u2019den sonra gelen en \u00f6nemli LTS s\u00fcr\u00fcm\u00fcd\u00fcr ve bir\u00e7ok yeni \u00f6zellik, API geli\u015ftirmesi ve eski \u00f6zelliklerin kald\u0131r\u0131lmas\u0131 ile dikkat \u00e7eker.</p>"},{"location":"java/11/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Yerle\u015fik HTTP Client API</li> <li>String, Collection ve Optional s\u0131n\u0131flar\u0131nda yeni metotlar</li> <li>Lambda parametrelerinde var anahtar kelimesi</li> <li>ZGC (Z Garbage Collector) ve performans iyile\u015ftirmeleri</li> <li>JavaFX\u2019in mod\u00fclerle\u015ftirilip JDK\u2019dan \u00e7\u0131kar\u0131lmas\u0131</li> <li>JEP\u2019lerle gelen \u00e7e\u015fitli dil ve API geli\u015ftirmeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/17/examples/","title":"Java 17 - Kod \u00d6rnekleri","text":""},{"location":"java/17/examples/#1-pattern-matching-for-switch","title":"1. Pattern Matching for switch","text":"<pre><code>Object obj = \"Merhaba\";\nswitch (obj) {\n    case String s -&gt; System.out.println(\"String: \" + s);\n    case Integer i -&gt; System.out.println(\"Integer: \" + i);\n    default -&gt; System.out.println(\"Bilinmeyen tip\");\n}\n</code></pre>"},{"location":"java/17/examples/#2-sealed-classes","title":"2. Sealed Classes","text":"<pre><code>public sealed class Hayvan permits Kedi, Kopek {}\nfinal class Kedi extends Hayvan {}\nfinal class Kopek extends Hayvan {}\n</code></pre>"},{"location":"java/17/examples/#3-streamtolist","title":"3. Stream.toList()","text":"<pre><code>List&lt;String&gt; list = Stream.of(\"a\", \"b\", \"c\").toList();\n</code></pre>"},{"location":"java/17/examples/#4-foreign-function-memory-api-preview","title":"4. Foreign Function &amp; Memory API (Preview)","text":"<p>Java d\u0131\u015f\u0131 k\u00fct\u00fcphanelerle g\u00fcvenli etkile\u015fim i\u00e7in yeni API.</p>"},{"location":"java/17/examples/#5-randomgenerator-api","title":"5. RandomGenerator API","text":"<pre><code>RandomGenerator rnd = RandomGenerator.getDefault();\nint sayi = rnd.nextInt();\n</code></pre> <p>Daha fazla detay ve \u00f6rnek i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/17/features/","title":"Java 17 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/17/features/#1-pattern-matching-for-switch","title":"1. Pattern Matching for switch","text":""},{"location":"java/17/features/#11-desen-esleme-ile-switch","title":"1.1 Desen E\u015fleme ile Switch","text":"<ul> <li>Switch ifadelerinde tip kontrol\u00fc ve desen e\u015fleme deste\u011fi.</li> <li>Kodun daha okunabilir ve g\u00fcvenli olmas\u0131.</li> <li>\u00d6zellikle sealed class ve record ile birlikte g\u00fc\u00e7l\u00fc kullan\u0131m.</li> </ul>"},{"location":"java/17/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Farkl\u0131 veri tiplerinin ayr\u0131\u015ft\u0131r\u0131lmas\u0131, polimorfik i\u015flemler.</li> </ul>"},{"location":"java/17/features/#2-sealed-classes","title":"2. Sealed Classes","text":""},{"location":"java/17/features/#21-snf-hiyerarsisinin-snrlandrlmas","title":"2.1 S\u0131n\u0131f Hiyerar\u015fisinin S\u0131n\u0131rland\u0131r\u0131lmas\u0131","text":"<ul> <li>Sadece izin verilen alt s\u0131n\u0131flar\u0131n t\u00fcretilebilmesi.</li> <li>G\u00fcvenli ve \u00f6ng\u00f6r\u00fclebilir miras yap\u0131s\u0131.</li> </ul>"},{"location":"java/17/features/#22-kullanm-senaryosu","title":"2.2 Kullan\u0131m Senaryosu","text":"<ul> <li>API tasar\u0131m\u0131, domain modelleme, polimorfizm.</li> </ul>"},{"location":"java/17/features/#3-yeni-garbage-collector-secenekleri","title":"3. Yeni Garbage Collector Se\u00e7enekleri","text":""},{"location":"java/17/features/#31-g1-zgc-shenandoah","title":"3.1 G1, ZGC, Shenandoah","text":"<ul> <li>Modern, d\u00fc\u015f\u00fck gecikmeli ve y\u00fcksek performansl\u0131 \u00e7\u00f6p toplay\u0131c\u0131lar.</li> <li>B\u00fcy\u00fck \u00f6l\u00e7ekli uygulamalarda bellek y\u00f6netimi avantaj\u0131.</li> </ul>"},{"location":"java/17/features/#4-strongly-encapsulated-jdk-internals","title":"4. Strongly Encapsulated JDK Internals","text":""},{"location":"java/17/features/#41-kapsulleme-ve-modulerlik","title":"4.1 Kaps\u00fclleme ve Mod\u00fclerlik","text":"<ul> <li>JDK i\u00e7 yap\u0131lar\u0131n\u0131n d\u0131\u015far\u0131ya kapat\u0131lmas\u0131.</li> <li>G\u00fcvenlik ve bak\u0131m kolayl\u0131\u011f\u0131.</li> </ul>"},{"location":"java/17/features/#5-foreign-function-memory-api-preview","title":"5. Foreign Function &amp; Memory API (Preview)","text":""},{"location":"java/17/features/#51-native-kod-ile-etkilesim","title":"5.1 Native Kod ile Etkile\u015fim","text":"<ul> <li>JNI\u2019ye g\u00f6re daha g\u00fcvenli ve kolay native k\u00fct\u00fcphane \u00e7a\u011fr\u0131lar\u0131.</li> <li>Java d\u0131\u015f\u0131 kodlarla h\u0131zl\u0131 ve g\u00fcvenli entegrasyon.</li> </ul>"},{"location":"java/17/features/#52-bellek-yonetimi","title":"5.2 Bellek Y\u00f6netimi","text":"<ul> <li>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma.</li> </ul>"},{"location":"java/17/features/#6-deprecation-ve-kaldrlan-ozellikler","title":"6. Deprecation ve Kald\u0131r\u0131lan \u00d6zellikler","text":""},{"location":"java/17/features/#61-applet-api-security-manager","title":"6.1 Applet API, Security Manager","text":"<ul> <li>Eski teknolojilerin kald\u0131r\u0131lmas\u0131 veya kullan\u0131mdan kald\u0131r\u0131lmas\u0131.</li> <li>Modern g\u00fcvenlik ve uygulama mimarilerine ge\u00e7i\u015f.</li> </ul>"},{"location":"java/17/features/#7-kucuk-dil-ve-api-gelistirmeleri","title":"7. K\u00fc\u00e7\u00fck Dil ve API Geli\u015ftirmeleri","text":""},{"location":"java/17/features/#71-streamtolist-randomgenerator-api","title":"7.1 Stream.toList(), RandomGenerator API","text":"<ul> <li>Koleksiyon i\u015flemlerinde kolayl\u0131k.</li> <li>Yeni rastgele say\u0131 \u00fcreticileri.</li> </ul>"},{"location":"java/17/features/#72-yeni-string-ve-collection-metotlar","title":"7.2 Yeni String ve Collection Metotlar\u0131","text":"<ul> <li>Kodun okunabilirli\u011fini ve g\u00fcvenli\u011fini art\u0131ran k\u00fc\u00e7\u00fck iyile\u015ftirmeler.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/17/migration/","title":"Java 17 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/17/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 11\u2019den Java 17\u2019ye ge\u00e7erken baz\u0131 eski API\u2019ler ve mod\u00fcller kald\u0131r\u0131lm\u0131\u015ft\u0131r (\u00f6r. Applet API, Security Manager).</li> <li>Sealed classes ve pattern matching gibi yeni dil \u00f6zellikleri, eski kodlarla uyumlu \u00e7al\u0131\u015f\u0131r ancak derleyici ve IDE g\u00fcncel olmal\u0131d\u0131r.</li> <li>Baz\u0131 JVM parametreleri ve garbage collector se\u00e7enekleri de\u011fi\u015fmi\u015f veya kald\u0131r\u0131lm\u0131\u015f olabilir.</li> </ul>"},{"location":"java/17/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Kodunuzu Java 17 ile derleyip test edin, \u00f6zellikle kald\u0131r\u0131lan API\u2019leri kullanan b\u00f6l\u00fcmleri kontrol edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> <li>Yeni \u00f6zellikleri (pattern matching, sealed classes, yeni GC) kademeli olarak entegre edin.</li> </ul>"},{"location":"java/17/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri ve dil \u00f6zelliklerini kullanmaya \u00f6zen g\u00f6sterin.</li> <li>Java 17 LTS oldu\u011fu i\u00e7in uzun s\u00fcreli projelerde tercih edilebilir.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/17/summary/","title":"Java 17 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 17, 2021 y\u0131l\u0131nda LTS (Long Term Support) s\u00fcr\u00fcm\u00fc olarak yay\u0131nland\u0131. Java 11\u2019den sonra gelen en \u00f6nemli LTS s\u00fcr\u00fcm\u00fcd\u00fcr ve dildeki modernle\u015fme, performans ve g\u00fcvenlik iyile\u015ftirmeleriyle \u00f6ne \u00e7\u0131kar.</p>"},{"location":"java/17/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Pattern Matching (Desen E\u015fleme) ve sealed classes gibi dil geli\u015ftirmeleri</li> <li>Yeni Garbage Collector se\u00e7enekleri ve performans iyile\u015ftirmeleri</li> <li>JEP\u2019lerle gelen API ve platform geli\u015ftirmeleri</li> <li>Deprecation ve kald\u0131r\u0131lan eski \u00f6zellikler</li> <li>G\u00fcvenlik ve platform g\u00fcncellemeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/21/examples/","title":"Java 21 - Kod \u00d6rnekleri","text":""},{"location":"java/21/examples/#1-record-patterns-ve-pattern-matching-for-switch","title":"1. Record Patterns ve Pattern Matching for switch","text":"<pre><code>record Kisi(String ad, int yas) {}\nObject obj = new Kisi(\"Ali\", 30);\nswitch (obj) {\n    case Kisi(String ad, int yas) -&gt; System.out.println(ad + \" - \" + yas);\n    default -&gt; System.out.println(\"Bilinmeyen tip\");\n}\n</code></pre>"},{"location":"java/21/examples/#2-virtual-threads-project-loom","title":"2. Virtual Threads (Project Loom)","text":"<pre><code>Thread.startVirtualThread(() -&gt; System.out.println(\"Sanal thread \u00e7al\u0131\u015ft\u0131!\"));\n</code></pre>"},{"location":"java/21/examples/#3-string-templates","title":"3. String Templates","text":"<pre><code>// Java 21 ile string template \u00f6rne\u011fi (preview)\nString ad = \"Ali\";\nint yas = 30;\nString bilgi = STR.\"Ad: \\{ad}, Ya\u015f: \\{yas}\";\n</code></pre>"},{"location":"java/21/examples/#4-foreign-function-memory-api","title":"4. Foreign Function &amp; Memory API","text":"<p>Java d\u0131\u015f\u0131 k\u00fct\u00fcphanelerle ve bellekle g\u00fcvenli etkile\u015fim i\u00e7in yeni API.</p> <p>Daha fazla detay ve \u00f6rnek i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/21/features/","title":"Java 21 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/21/features/#1-record-patterns-ve-pattern-matching-for-switch","title":"1. Record Patterns ve Pattern Matching for switch","text":""},{"location":"java/21/features/#11-record-patterns","title":"1.1 Record Patterns","text":"<ul> <li>Record veri tiplerinde desen e\u015fleme ile alanlara do\u011frudan eri\u015fim.</li> <li>Kodun okunabilirli\u011fini ve g\u00fcvenli\u011fini art\u0131r\u0131r.</li> </ul>"},{"location":"java/21/features/#12-pattern-matching-for-switch","title":"1.2 Pattern Matching for switch","text":"<ul> <li>Switch ifadelerinde geli\u015fmi\u015f desen e\u015fleme.</li> <li>Farkl\u0131 veri tiplerinin ayr\u0131\u015ft\u0131r\u0131lmas\u0131 ve i\u015flenmesi kolayla\u015f\u0131r.</li> </ul>"},{"location":"java/21/features/#2-virtual-threads-project-loom","title":"2. Virtual Threads (Project Loom)","text":""},{"location":"java/21/features/#21-hafif-ve-yuksek-olceklenebilir-threadler","title":"2.1 Hafif ve Y\u00fcksek \u00d6l\u00e7eklenebilir Thread\u2019ler","text":"<ul> <li>Binlerce thread\u2019i d\u00fc\u015f\u00fck maliyetle ba\u015flatma.</li> <li>Geleneksel thread\u2019lere g\u00f6re daha az kaynak t\u00fcketimi.</li> <li>Paralel ve e\u015fzamanl\u0131 programlamada devrim.</li> </ul>"},{"location":"java/21/features/#22-kullanm-senaryosu","title":"2.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Y\u00fcksek trafikli sunucular, mikroservisler, reaktif olmayan IO i\u015flemleri.</li> </ul>"},{"location":"java/21/features/#3-string-templates","title":"3. String Templates","text":""},{"location":"java/21/features/#31-guvenli-ve-okunabilir-string-birlestirme","title":"3.1 G\u00fcvenli ve Okunabilir String Birle\u015ftirme","text":"<ul> <li>G\u00f6m\u00fcl\u00fc ifadelerle dinamik string olu\u015fturma.</li> <li>SQL, JSON gibi d\u0131\u015f formatlara g\u00fcvenli veri g\u00f6mme.</li> <li>Compile-time kontrol ve otomatik escaping.</li> </ul>"},{"location":"java/21/features/#4-foreign-function-memory-api-ffm","title":"4. Foreign Function &amp; Memory API (FFM)","text":""},{"location":"java/21/features/#41-native-kod-ile-etkilesim","title":"4.1 Native Kod ile Etkile\u015fim","text":"<ul> <li>JNI\u2019ye g\u00f6re daha g\u00fcvenli ve kolay native k\u00fct\u00fcphane \u00e7a\u011fr\u0131lar\u0131.</li> <li>C/C++ fonksiyonlar\u0131na do\u011frudan eri\u015fim.</li> </ul>"},{"location":"java/21/features/#42-bellek-yonetimi","title":"4.2 Bellek Y\u00f6netimi","text":"<ul> <li>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma.</li> <li>Zero-copy veri payla\u015f\u0131m\u0131 ve y\u00fcksek performans.</li> </ul>"},{"location":"java/21/features/#5-platform-guvenligi-ve-performans","title":"5. Platform G\u00fcvenli\u011fi ve Performans","text":""},{"location":"java/21/features/#51-gc-ve-memory-leak-tespiti","title":"5.1 GC ve Memory Leak Tespiti","text":"<ul> <li>Yeni GC se\u00e7enekleri ve memory leak tespiti.</li> <li>TLS/SSL g\u00fcncellemeleri, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n kapat\u0131lmas\u0131.</li> </ul>"},{"location":"java/21/features/#6-preview-ve-incubator-ozellikler","title":"6. Preview ve Incubator \u00d6zellikler","text":""},{"location":"java/21/features/#61-yeni-dil-ve-api-denemeleri","title":"6.1 Yeni Dil ve API Denemeleri","text":"<ul> <li>unnamed variables, unnamed patterns gibi gelece\u011fe y\u00f6nelik dil denemeleri.</li> <li>Gelecekteki Java s\u00fcr\u00fcmlerine haz\u0131rl\u0131k.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/21/migration/","title":"Java 21 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/21/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 17\u2019den Java 21\u2019e ge\u00e7erken baz\u0131 eski API\u2019ler ve mod\u00fcller kald\u0131r\u0131lm\u0131\u015f veya g\u00fcncellenmi\u015ftir.</li> <li>Record patterns, virtual threads gibi yeni dil \u00f6zellikleri i\u00e7in derleyici ve IDE g\u00fcncel olmal\u0131d\u0131r.</li> <li>Foreign Function &amp; Memory API art\u0131k kararl\u0131, eski JNI kodlar\u0131yla entegrasyon g\u00f6zden ge\u00e7irilmeli.</li> </ul>"},{"location":"java/21/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Kodunuzu Java 21 ile derleyip test edin, \u00f6zellikle kald\u0131r\u0131lan veya de\u011fi\u015fen API\u2019leri kullanan b\u00f6l\u00fcmleri kontrol edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> <li>Yeni \u00f6zellikleri (record patterns, virtual threads, string templates) kademeli olarak entegre edin.</li> </ul>"},{"location":"java/21/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri ve dil \u00f6zelliklerini kullanmaya \u00f6zen g\u00f6sterin.</li> <li>Java 21 LTS oldu\u011fu i\u00e7in uzun s\u00fcreli projelerde tercih edilebilir.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/21/summary/","title":"Java 21 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 21, 2023 y\u0131l\u0131nda yay\u0131nlanan LTS (Long Term Support) s\u00fcr\u00fcm\u00fcd\u00fcr. Modern dil \u00f6zellikleri, performans ve g\u00fcvenlik iyile\u015ftirmeleriyle Java ekosisteminin g\u00fcncel ihtiya\u00e7lar\u0131na cevap verir.</p>"},{"location":"java/21/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Record Patterns ve Pattern Matching for switch\u2019in tamamlanmas\u0131</li> <li>Virtual Threads (Project Loom) ile y\u00fcksek \u00f6l\u00e7eklenebilirlik</li> <li>String Templates ve yeni dil geli\u015ftirmeleri</li> <li>Foreign Function &amp; Memory API\u2019nin kararl\u0131 hale gelmesi</li> <li>Platform g\u00fcvenli\u011fi ve performans g\u00fcncellemeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/24/examples/","title":"Java 24 - Kod \u00d6rnekleri ve Kullan\u0131m Senaryolar\u0131","text":""},{"location":"java/24/examples/#1-scoped-values-ve-structured-concurrency","title":"1. Scoped Values ve Structured Concurrency","text":""},{"location":"java/24/examples/#11-scoped-values-kullanm","title":"1.1 Scoped Values Kullan\u0131m\u0131","text":"<pre><code>import java.lang.ScopedValue;\n\npublic class ScopedValueExample {\n    static final ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();\n\n    public static void main(String[] args) {\n        ScopedValue.where(USER, \"admin\").run(() -&gt; {\n            System.out.println(\"Kullan\u0131c\u0131: \" + USER.get());\n        });\n    }\n}\n</code></pre> <p>ScopedValue ile thread-local de\u011fi\u015fkenlerin g\u00fcvenli y\u00f6netimi.</p>"},{"location":"java/24/examples/#12-structured-concurrency-ile-paralel-gorevler","title":"1.2 Structured Concurrency ile Paralel G\u00f6revler","text":"<pre><code>import java.util.concurrent.StructuredTaskScope;\n\ntry (var scope = new StructuredTaskScope.ShutdownOnFailure()) {\n    scope.fork(() -&gt; fetchData());\n    scope.fork(() -&gt; processData());\n    scope.join();\n}\n</code></pre> <p>Alt g\u00f6revlerin birlikte ba\u015flat\u0131l\u0131p, birlikte y\u00f6netilmesi.</p>"},{"location":"java/24/examples/#2-string-templates","title":"2. String Templates","text":"<pre><code>String ad = \"Ali\";\nint yas = 30;\nString bilgi = STR.\"Ad: \\{ad}, Ya\u015f: \\{yas}\";\nSystem.out.println(bilgi);\n</code></pre> <p>G\u00fcvenli ve okunabilir string birle\u015ftirme.</p>"},{"location":"java/24/examples/#3-class-file-api-ile-bytecode-analizi","title":"3. Class-File API ile Bytecode Analizi","text":"<pre><code>import java.lang.classfile.ClassFile;\nimport java.nio.file.Path;\n\nClassFile cf = ClassFile.read(Path.of(\"MyClass.class\"));\ncf.methods().forEach(m -&gt; System.out.println(m.name()));\n</code></pre> <p>Bytecode \u00fczerinde programatik analiz ve i\u015flem.</p>"},{"location":"java/24/examples/#4-foreign-function-memory-api-ffm","title":"4. Foreign Function &amp; Memory API (FFM)","text":""},{"location":"java/24/examples/#41-native-fonksiyon-cagrs","title":"4.1 Native Fonksiyon \u00c7a\u011fr\u0131s\u0131","text":"<pre><code>import java.foreign.*;\nimport java.foreign.memory.*;\n\ntry (MemorySegment segment = MemorySegment.allocateNative(100)) {\n    // Native k\u00fct\u00fcphane ile \u00e7al\u0131\u015fma \u00f6rne\u011fi\n}\n</code></pre>"},{"location":"java/24/examples/#42-bellek-yonetimi","title":"4.2 Bellek Y\u00f6netimi","text":"<p>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma ve veri payla\u015f\u0131m\u0131.</p>"},{"location":"java/24/examples/#5-virtual-threads-ile-yuksek-olceklenebilirlik","title":"5. Virtual Threads ile Y\u00fcksek \u00d6l\u00e7eklenebilirlik","text":"<pre><code>Runnable task = () -&gt; System.out.println(\"Sanal thread!\");\nThread.startVirtualThread(task);\n</code></pre> <p>Binlerce thread\u2019i d\u00fc\u015f\u00fck maliyetle ba\u015flatma.</p>"},{"location":"java/24/examples/#6-preview-ve-incubator-ozellikler","title":"6. Preview ve Incubator \u00d6zellikler","text":"<pre><code>// Unnamed variables (preview)\n(int _, int y) -&gt; y * 2;\n</code></pre> <p>Yeni dil denemeleri ve gelece\u011fe haz\u0131rl\u0131k.</p> <p>Her \u00f6rne\u011fin detayl\u0131 a\u00e7\u0131klamalar\u0131 ve kullan\u0131m ipu\u00e7lar\u0131 i\u00e7in features.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/24/features/","title":"Java 24 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/24/features/#1-scoped-values-ve-structured-concurrency","title":"1. Scoped Values ve Structured Concurrency","text":""},{"location":"java/24/features/#11-scoped-values","title":"1.1 Scoped Values","text":"<ul> <li>Thread-local de\u011fi\u015fkenlerin daha g\u00fcvenli ve kontroll\u00fc y\u00f6netimi.</li> <li>\u00d6zellikle virtual threads ile birlikte veri izolasyonu sa\u011flar.</li> <li>Yan etkisiz, fonksiyonel programlama ile uyumlu.</li> </ul>"},{"location":"java/24/features/#12-structured-concurrency","title":"1.2 Structured Concurrency","text":"<ul> <li>Paralel i\u015flemlerin ya\u015fam d\u00f6ng\u00fcs\u00fcn\u00fc y\u00f6netmek i\u00e7in yeni bir model.</li> <li>Alt g\u00f6revlerin ana g\u00f6revle birlikte ba\u015flat\u0131l\u0131p, birlikte sonland\u0131r\u0131lmas\u0131.</li> <li>Hatalar\u0131n ve istisnalar\u0131n daha kolay y\u00f6netilmesi.</li> </ul>"},{"location":"java/24/features/#2-string-templates-kararl","title":"2. String Templates (Kararl\u0131)","text":"<ul> <li>String birle\u015ftirme ve g\u00f6m\u00fcl\u00fc ifadeler i\u00e7in yeni, g\u00fcvenli ve okunabilir bir s\u00f6zdizimi.</li> <li>SQL, JSON gibi d\u0131\u015f formatlara g\u00fcvenli veri g\u00f6mme.</li> <li>Compile-time kontrol ve otomatik escaping.</li> </ul>"},{"location":"java/24/features/#3-class-file-api","title":"3. Class-File API","text":"<ul> <li>Bytecode \u00fczerinde programatik de\u011fi\u015fiklik ve analiz imkan\u0131.</li> <li>Derleyici ve ara\u00e7 geli\u015ftiriciler i\u00e7in d\u00fc\u015f\u00fck seviyede kontrol.</li> <li>Reflection\u2019dan daha h\u0131zl\u0131 ve g\u00fcvenli.</li> </ul>"},{"location":"java/24/features/#4-foreign-function-memory-api-ffm","title":"4. Foreign Function &amp; Memory API (FFM)","text":""},{"location":"java/24/features/#41-native-kod-ile-etkilesim","title":"4.1 Native Kod ile Etkile\u015fim","text":"<ul> <li>JNI\u2019ye g\u00f6re daha g\u00fcvenli ve kolay native k\u00fct\u00fcphane \u00e7a\u011fr\u0131lar\u0131.</li> <li>C/C++ fonksiyonlar\u0131na do\u011frudan eri\u015fim.</li> </ul>"},{"location":"java/24/features/#42-bellek-yonetimi","title":"4.2 Bellek Y\u00f6netimi","text":"<ul> <li>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma.</li> <li>Zero-copy veri payla\u015f\u0131m\u0131 ve y\u00fcksek performans.</li> </ul>"},{"location":"java/24/features/#5-virtual-threads-ve-paralel-programlama","title":"5. Virtual Threads ve Paralel Programlama","text":"<ul> <li>Binlerce thread\u2019i d\u00fc\u015f\u00fck maliyetle ba\u015flatma imkan\u0131.</li> <li>Y\u00fcksek \u00f6l\u00e7eklenebilirlik ve reaktif programlamaya alternatif.</li> </ul>"},{"location":"java/24/features/#6-platform-guvenligi-ve-performans","title":"6. Platform G\u00fcvenli\u011fi ve Performans","text":"<ul> <li>Yeni GC iyile\u015ftirmeleri, memory leak tespiti.</li> <li>G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n kapat\u0131lmas\u0131, TLS/SSL g\u00fcncellemeleri.</li> </ul>"},{"location":"java/24/features/#7-preview-ve-incubator-ozellikler","title":"7. Preview ve Incubator \u00d6zellikler","text":"<ul> <li>Yeni dil ve API denemeleri (\u00f6rn. unnamed variables, unnamed patterns).</li> <li>Gelecekteki Java s\u00fcr\u00fcmlerine haz\u0131rl\u0131k.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m senaryolar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/24/migration/","title":"Java 24 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/24/migration/#1-surum-gecisinde-dikkat-edilmesi-gerekenler","title":"1. S\u00fcr\u00fcm Ge\u00e7i\u015finde Dikkat Edilmesi Gerekenler","text":"<ul> <li>Scoped Values, Structured Concurrency ve Virtual Threads gibi yeni paralel programlama modelleri eski kodlarla uyumlu \u00e7al\u0131\u015f\u0131r, ancak kodunuzu bu yeni modellere g\u00f6re refactor etmek faydal\u0131 olur.</li> <li>String Templates ve Class-File API gibi yeni dil ve platform \u00f6zellikleri, eski projelerde kullan\u0131lmak istenirse derleyici ve IDE g\u00fcncellenmelidir.</li> <li>Foreign Function &amp; Memory API\u2019deki de\u011fi\u015fiklikler, JNI veya eski native entegrasyon kullanan projelerde dikkatle incelenmeli.</li> </ul>"},{"location":"java/24/migration/#2-uyumluluk-ve-geriye-donuk-destek","title":"2. Uyumluluk ve Geriye D\u00f6n\u00fck Destek","text":"<ul> <li>Java 24, \u00f6nceki LTS s\u00fcr\u00fcmlerinden (17, 21) gelen kodlar\u0131 b\u00fcy\u00fck oranda destekler.</li> <li>Kald\u0131r\u0131lan veya deprecated edilen API\u2019ler i\u00e7in kodunuzu g\u00f6zden ge\u00e7irin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> </ul>"},{"location":"java/24/migration/#3-yeni-ozelliklerin-entegrasyonu","title":"3. Yeni \u00d6zelliklerin Entegrasyonu","text":"<ul> <li>Scoped Values ve Structured Concurrency ile thread y\u00f6netimini sadele\u015ftirin.</li> <li>String Templates ile veri g\u00f6mme i\u015flemlerini g\u00fcvenli hale getirin.</li> <li>Class-File API ile derleyici ve ara\u00e7 geli\u015ftirme s\u00fcre\u00e7lerinizi modernize edin.</li> <li>FFM API ile native entegrasyonlar\u0131 daha g\u00fcvenli ve h\u0131zl\u0131 y\u00f6netin.</li> </ul>"},{"location":"java/24/migration/#4-ipuclar-ve-en-iyi-pratikler","title":"4. \u0130pu\u00e7lar\u0131 ve En \u0130yi Pratikler","text":"<ul> <li>Kodunuzu Java 24 ile derleyip test edin, \u00f6zellikle yeni API\u2019leri ve dil \u00f6zelliklerini kullan\u0131rken.</li> <li>Eski kodlar\u0131 refactor ederken yeni \u00f6zellikleri kademeli olarak entegre edin.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> <li>Preview ve incubator \u00f6zellikleri kullan\u0131rken, ilerideki s\u00fcr\u00fcmlerde de\u011fi\u015fiklik olabilece\u011fini unutmay\u0131n.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine ve Java 24 d\u00f6k\u00fcmantasyonuna bakabilirsiniz.</p>"},{"location":"java/24/summary/","title":"Java 24 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 24, 2024 y\u0131l\u0131nda yay\u0131nlanan en g\u00fcncel s\u00fcr\u00fcmd\u00fcr. Modern yaz\u0131l\u0131m geli\u015ftirme ihtiya\u00e7lar\u0131na cevap veren, performans, g\u00fcvenlik ve dil \u00f6zelliklerinde \u00f6nemli yenilikler sunar. \u00d6zellikle platformlar aras\u0131 ta\u015f\u0131nabilirlik, bulut-native uygulamalar ve y\u00fcksek \u00f6l\u00e7eklenebilirlik odak noktas\u0131d\u0131r.</p>"},{"location":"java/24/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Scoped Values ve Structured Concurrency ile geli\u015fmi\u015f paralel programlama</li> <li>String Templates\u2019in kararl\u0131 hale gelmesi</li> <li>Class-File API ile dinamik bytecode i\u015flemleri</li> <li>Foreign Function &amp; Memory API\u2019de yeni geli\u015ftirmeler</li> <li>Platform g\u00fcvenli\u011fi ve performans g\u00fcncellemeleri</li> <li>Preview ve incubator \u00f6zelliklerle gelece\u011fe y\u00f6nelik dil denemeleri</li> </ul> <p>Detayl\u0131 teknik ba\u015fl\u0131klar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/8/examples/","title":"Java 8 - Kod \u00d6rnekleri","text":""},{"location":"java/8/examples/#1-lambda-ifadeleri-ile-liste-isleme","title":"1. Lambda \u0130fadeleri ile Liste \u0130\u015fleme","text":"<pre><code>List&lt;String&gt; isimler = Arrays.asList(\"Ali\", \"Veli\", \"Ay\u015fe\");\nisimler.forEach(isim -&gt; System.out.println(isim));\n</code></pre>"},{"location":"java/8/examples/#2-stream-api-ile-filtreleme-ve-toplama","title":"2. Stream API ile Filtreleme ve Toplama","text":"<pre><code>List&lt;Integer&gt; sayilar = Arrays.asList(1, 2, 3, 4, 5, 6);\nint toplam = sayilar.stream()\n    .filter(sayi -&gt; sayi % 2 == 0)\n    .mapToInt(Integer::intValue)\n    .sum();\nSystem.out.println(\"\u00c7ift say\u0131lar\u0131n toplam\u0131: \" + toplam);\n</code></pre>"},{"location":"java/8/examples/#3-yeni-tarihzaman-api-kullanm","title":"3. Yeni Tarih/Zaman API Kullan\u0131m\u0131","text":"<pre><code>import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nLocalDate bugun = LocalDate.now();\nSystem.out.println(bugun.format(DateTimeFormatter.ofPattern(\"dd.MM.yyyy\")));\n</code></pre>"},{"location":"java/8/examples/#4-optional-ile-null-kontrolu","title":"4. Optional ile Null Kontrol\u00fc","text":"<pre><code>Optional&lt;String&gt; ad = Optional.ofNullable(null);\nSystem.out.println(ad.orElse(\"Bilinmiyor\"));\n</code></pre>"},{"location":"java/8/examples/#5-varsaylan-arayuz-metodu","title":"5. Varsay\u0131lan Aray\u00fcz Metodu","text":"<pre><code>interface Selam {\n    default void merhaba() { System.out.println(\"Merhaba!\"); }\n}\n</code></pre> <p>Daha fazla \u00f6rnek ve a\u00e7\u0131klama i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/8/features/","title":"Java 8 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/8/features/#1-lambda-ifadeleri","title":"1. Lambda \u0130fadeleri","text":""},{"location":"java/8/features/#11-fonksiyonel-programlama-destegi","title":"1.1 Fonksiyonel Programlama Deste\u011fi","text":"<ul> <li>Fonksiyonlar\u0131 de\u011fi\u015fken olarak kullanabilme.</li> <li>Kodun daha k\u0131sa, okunabilir ve fonksiyonel olmas\u0131n\u0131 sa\u011flar.</li> <li>\u00d6zellikle koleksiyon i\u015flemlerinde b\u00fcy\u00fck kolayl\u0131k.</li> </ul>"},{"location":"java/8/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Event handling, callback, koleksiyon i\u015flemleri.</li> </ul>"},{"location":"java/8/features/#2-stream-api","title":"2. Stream API","text":""},{"location":"java/8/features/#21-fonksiyonel-koleksiyon-islemleri","title":"2.1 Fonksiyonel Koleksiyon \u0130\u015flemleri","text":"<ul> <li>Map, filter, reduce gibi fonksiyonel i\u015flemler.</li> <li>Zincirleme veri i\u015fleme ve pipeline olu\u015fturma.</li> </ul>"},{"location":"java/8/features/#22-paralel-stream","title":"2.2 Paralel Stream","text":"<ul> <li>B\u00fcy\u00fck veri setlerinde paralel i\u015fleme ile performans art\u0131\u015f\u0131.</li> <li>Thread y\u00f6netimi otomatik olarak yap\u0131l\u0131r.</li> </ul>"},{"location":"java/8/features/#3-yeni-tarihzaman-apisi-javatime","title":"3. Yeni Tarih/Zaman API\u2019si (java.time)","text":""},{"location":"java/8/features/#31-modern-ve-guvenli-tarihzaman-islemleri","title":"3.1 Modern ve G\u00fcvenli Tarih/Zaman \u0130\u015flemleri","text":"<ul> <li>Immutable ve thread-safe tarih/zaman nesneleri.</li> <li>LocalDate, LocalTime, ZonedDateTime gibi yeni s\u0131n\u0131flar.</li> </ul>"},{"location":"java/8/features/#32-kullanm-senaryosu","title":"3.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Zaman dilimi y\u00f6netimi, tarih aritmeti\u011fi, formatlama/parsing.</li> </ul>"},{"location":"java/8/features/#4-varsaylan-ve-statik-arayuz-metotlar","title":"4. Varsay\u0131lan ve Statik Aray\u00fcz Metotlar\u0131","text":""},{"location":"java/8/features/#41-default-methods","title":"4.1 Default Methods","text":"<ul> <li>Aray\u00fczlerde g\u00f6vdeli metot tan\u0131mlama.</li> <li>Geriye d\u00f6n\u00fck uyumluluk ve API evrimi.</li> </ul>"},{"location":"java/8/features/#42-static-methods","title":"4.2 Static Methods","text":"<ul> <li>Aray\u00fczde yard\u0131mc\u0131 metotlar\u0131n do\u011frudan tan\u0131mlanabilmesi.</li> </ul>"},{"location":"java/8/features/#5-optional-snf","title":"5. Optional S\u0131n\u0131f\u0131","text":""},{"location":"java/8/features/#51-null-guvenligi","title":"5.1 Null G\u00fcvenli\u011fi","text":"<ul> <li>NullPointerException riskini azalt\u0131r.</li> <li>De\u011ferin olup olmad\u0131\u011f\u0131n\u0131 fonksiyonel olarak kontrol etme.</li> </ul>"},{"location":"java/8/features/#52-kullanm-senaryosu","title":"5.2 Kullan\u0131m Senaryosu","text":"<ul> <li>API d\u00f6n\u00fc\u015flerinde null yerine Optional kullan\u0131m\u0131.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/8/migration/","title":"Java 8 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/8/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Lambda ifadeleri ve Stream API, eski kodlarla uyumlu \u00e7al\u0131\u015f\u0131r ancak baz\u0131 API\u2019lerde davran\u0131\u015f de\u011fi\u015fiklikleri olabilir.</li> <li>Eski tarih/zaman API\u2019si (java.util.Date, Calendar) yerine yeni java.time API\u2019si \u00f6nerilir.</li> <li>Varsay\u0131lan ve statik aray\u00fcz metotlar\u0131, aray\u00fczlerin geriye d\u00f6n\u00fck uyumlulu\u011funu etkileyebilir.</li> <li>Optional kullan\u0131m\u0131 null kontrollerini daha g\u00fcvenli hale getirir, ancak eski kodlarda dikkatli entegrasyon gerekir.</li> </ul>"},{"location":"java/8/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Derleyici ve \u00e7al\u0131\u015fma zaman\u0131 olarak minimum Java 8 gereklidir.</li> <li>Lambda ve method reference kullan\u0131m\u0131, eski IDE ve ara\u00e7larda desteklenmeyebilir.</li> <li>Paralel stream kullan\u0131m\u0131, thread-safe olmayan koleksiyonlarda beklenmeyen sonu\u00e7lara yol a\u00e7abilir.</li> </ul>"},{"location":"java/8/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Kodunuzu Java 8 ile derleyip test edin.</li> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri kademeli olarak entegre edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/8/summary/","title":"Java 8 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 8, 2014 y\u0131l\u0131nda yay\u0131nland\u0131 ve Java dilinde devrim niteli\u011finde yenilikler getirdi. Lambda ifadeleri, Stream API, yeni tarih/zaman API\u2019si gibi modern programlama yakla\u015f\u0131mlar\u0131n\u0131 destekleyen \u00f6zelliklerle Java\u2019n\u0131n esnekli\u011fi ve g\u00fcc\u00fc artt\u0131.</p>"},{"location":"java/8/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Lambda ifadeleri ve fonksiyonel programlama deste\u011fi</li> <li>Stream API ile koleksiyonlar \u00fczerinde fonksiyonel i\u015flemler</li> <li>java.time ile yeni tarih/zaman API\u2019si</li> <li>Varsay\u0131lan ve statik aray\u00fcz metotlar\u0131</li> <li>Optional s\u0131n\u0131f\u0131 ile null g\u00fcvenli\u011fi</li> <li>Paralel stream ve performans geli\u015ftirmeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"reactjs/router/overview/","title":"Overview","text":"<ul> <li> <p>Reactta tek html dosyas\u0131 \u00fczerinden \u00e7ok sayfa g\u00f6sterimi yap\u0131l\u0131r (Multiple Pages in SPAs) </p> </li> <li> <p>/blog /about /user/1 vs gibi pathler parse edilerek sayfa tekrar render edilir. Bu sayfalar\u0131n hi\u00e7biri ger\u00e7ek bir html sayfas\u0131 de\u011fildir.</p> </li> </ul> <pre><code>npm install --save react-router-dom\n</code></pre> <ul> <li> <p>Route componenti \u00e7oklanarak hangi pathte ne yap\u0131laca\u011f\u0131 yaz\u0131l\u0131r. </p> </li> <li> <p>exact parametresi render methodunun sadece bu pathte \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar, e\u011fer bu path ile ba\u015flayan t\u00fcm pathlerde \u00e7al\u0131\u015fmas\u0131 gerekiyorsa bu parametre kullan\u0131lmaz.</p> </li> <li> <p>A\u015fa\u011f\u0131daki \u00f6rnekte / pathinde Home ve Home 2 g\u00f6r\u00fcn\u00fcrken /xyz pathinde sadece Home 2 g\u00f6r\u00fcn\u00fcr.</p> </li> </ul> <pre><code>import {Route} from 'react-router-dom';\n\n//...\n\n&lt;Route path=\"/\" exact render={() =&gt; &lt;h1&gt;Home&lt;/h1&gt;}/&gt;\n&lt;Route path=\"/\" render={() =&gt; &lt;h1&gt;Home 2&lt;/h1&gt;}/&gt;\n\n&lt;Route path=\"/\" exact component={ABCComponent}/&gt;\n</code></pre> <ul> <li>E\u011fer pathler <code>&lt;a&gt;</code> tagi ile tanmlan\u0131rsa browser davran\u0131\u015f\u0131 sebebiyle sayfe her seferinde komple yenilenir. bu durumun \u00fcstesinden gelmek, sadece sayfan\u0131n ilgili b\u00f6l\u00fcm\u00fcn\u00fcn yeniden y\u00fcklenmesini sa\u011flamak i\u00e7in router \u0131n <code>&lt;Link&gt;</code> componenti kullan\u0131l\u0131r. </li> </ul> <pre><code>import {Route, Link} from 'react-router-dom';\n\n//...\n\n&lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n</code></pre> <ul> <li>Routing propertileri (history, location, match) alt komponentlere de ta\u015f\u0131nmak isteniyorsa withRouter HOC(High Order Component) i eklenmesi gerekir.</li> </ul> <pre><code>import {withRouter} from 'react-router-dom';\n\n//...\n\nexport default withRouter(post);\n</code></pre> <p>Absolute Path vs Relative Path</p> <ul> <li>Absolute path <code>&lt;Link to=\"/new\" ...</code> \u015feklinde tan\u0131mlad\u0131\u011f\u0131m\u0131z her t\u0131klad\u0131\u011f\u0131nda context pathi replace eden klasik tan\u0131mlama \u015fekli <code>example.com/new</code> gibi.</li> <li>Relative path ise dinamik olu\u015fturulan ve sonuna eklenerek devam eden url anlam\u0131na geliyor. /new  pathini dinamik olarak sona eklemek istedi\u011fimiz durumlarda <code>&lt;Link to={props.match.url + '/new'}&gt;</code> \u015feklinde bir tan\u0131mlama yapabiliriz. Bu sayede <code>example.com/posts/new</code> ya da <code>example.com/all-posts/new</code> \u015feklinde pathleri de kampsam i\u00e7ine alm\u0131\u015f oluruz.</li> <li>Absolute ya da Relative daha iyidir gibi bir durum yoktur, iste\u011fe ve ihtiyaca ba\u011fl\u0131 olarak kullan\u0131l\u0131r.</li> </ul> <ul> <li>NavLink componenti Link gibi \u00e7al\u0131\u015f\u0131r fakat genellikle men\u00fc ama\u00e7l\u0131 kullan\u0131l\u0131r ve aktif olan menu linkine default olarak active class\u0131n\u0131 ekler. Bu sayede se\u00e7ili men\u00fc ile ilgili farkl\u0131 css yaz\u0131labilir. axact parametresi active class\u0131n\u0131n sadece se\u00e7ili oldu\u011fu zaman eklenmesi i\u00e7in kullan\u0131l\u0131r, kullan\u0131lmaz ise se\u00e7ili olmad\u0131\u011f\u0131nda da eklenir. activeClassName parametresi opsiyoneldir, yaz\u0131lmad\u0131\u011f\u0131nda default active class\u0131 kullan\u0131l\u0131r. activeStyle parametresiyle de inline style uygulanabilir.</li> </ul> <pre><code>&lt;NavLink \n        to=\"/\" \n        exact\n        activeClassName=\"active\"\n        activeStyle={{\n            color: '#fa923f',\n            textDecoration: 'underline'\n        }}&gt;\n    Home\n&lt;/NavLink&gt;\n</code></pre> <p>Dinamik Parametre Ge\u00e7i\u015fi</p> <p>Sayfalar aras\u0131 id* gibi dinamik parametre ge\u00e7i\u015fleri i\u00e7in,</p> <pre><code>&lt;Route path=\"/:id\" exact component={FullPost} /&gt;\n</code></pre> <p>\u015feklinde tan\u0131mlama yapmak gerekir. Bu sayfaya yap\u0131lan y\u00f6nlendirme linki</p> <pre><code>&lt;Link to={'/' + post.id}&gt;\n    &lt;Post\n        title={post.title}\n        author={post.author}\n        clicked={() =&gt; this.postSelectedHandler(post.id)} /&gt;\n&lt;/Link&gt;;\n</code></pre> <p>ya da kodlama ile y\u00f6nlendirmek yapmak i\u00e7in</p> <pre><code>this.props.history.push({pathname: '/' + id});\n//this.props.history.push('/' + id);\n</code></pre> <p>kullan\u0131labilir.</p> <p>Not: history objesi navigasyon i\u00e7in kullan\u0131l\u0131r. i\u00e7inde go, goBack, goForward, push gibi fonksiyonlar vard\u0131r.</p> <p>Parametrelere  ula\u015fmak i\u00e7in <code>match.params.paramter_name</code> kullan\u0131l\u0131r</p> <pre><code>componentDidMount () {\n    if ( this.props.match.params.id ) {\n        if ( !this.state.loadedPost \n            || (this.state.loadedPost \n                &amp;&amp; this.state.loadedPost.id !== this.props.id) ) {\n\n            axios.get( '/posts/' + this.props.match.params.id )\n                .then( response =&gt; {\n                    this.setState({ \n                        loadedPost: response.data \n                    });\n                });\n\n        }\n    }\n}\n</code></pre> <ul> <li><code>?something=somevalue</code> \u015feklinde olu\u015fan query parametrelerinin olu\u015fturulmas\u0131 ve parse edilmesi;</li> </ul> <p>parametrelerin yollanmas\u0131</p> <pre><code>&lt;Link to=\"/my-path?start=5\"&gt;Go to Start&lt;/Link&gt; \n</code></pre> <p>ya da</p> <pre><code>&lt;Link \n    to={\u200c{\n        pathname: '/my-path',\n        search: '?start=5'\n    }}&gt;\n    Go to Start\n&lt;/Link&gt;\n</code></pre> <p>parametrelerin al\u0131nmas\u0131</p> <pre><code>componentDidMount() {\n    const query = new URLSearchParams(this.props.location.search);\n    for (let param of query.entries()) {\n        console.log(param); // yields ['start', '5']\n    }\n}\n</code></pre> <ul> <li><code>#something</code> \u015feklinde olu\u015fturulan hash parametreleri de <code>props.location.hash</code> \u00fczerinden al\u0131n\u0131r;</li> </ul> <pre><code>&lt;Link to=\"/my-path#start-position\"&gt;Go to Start&lt;/Link&gt;\n</code></pre> <pre><code>&lt;Link \n    to={\u200c{\n        pathname: '/my-path',\n        hash: 'start-position'\n    }}\n    &gt;Go to Start&lt;/Link&gt;\n</code></pre> <ul> <li><code>&lt;Switch&gt;</code> componenti ayn\u0131 anda tek route un render edilmesini sa\u011flar. A\u015fa\u011f\u0131daki gibi durumlarda <code>path=\"/new-post\"</code> ve <code>path=\"/:id\"</code> \u00fcst\u00fcste binece\u011finden, bu durumun \u00f6n\u00fcne ge\u00e7mek i\u00e7in switch kullan\u0131labilir. Se\u00e7imi yukar\u0131dan a\u015fa\u011f\u0131ya do\u011fru yapar.</li> </ul> <pre><code>import {Route, NavLink, Switch} from 'react-router-dom';\n\n//...\n\n &lt;Switch&gt;\n    &lt;Route path=\"/\" exact component={Posts} /&gt;\n    &lt;Route path=\"/new-post\" component={NewPost} /&gt;\n    &lt;Route path=\"/:id\" exact component={FullPost} /&gt;\n&lt;/Switch&gt;\n</code></pre> <ul> <li><code>&lt;Redirect&gt;</code> componenti y\u00f6nlendirme i\u00e7in kullan\u0131l\u0131r. Url de\u011fi\u015fir.</li> </ul> <pre><code>import {Route, NavLink, Switch, Redirect} from 'react-router-dom';\n\n//...\n\n&lt;Redirect from=\"/\" to=\"/posts\" /&gt;\n</code></pre> <ul> <li>Redirect componenti bir i\u015flem sonucunda yap\u0131lacak \u015fekilde de kullan\u0131labilir. \u00d6rne\u011fin bi statte de\u011fi\u015fkeninin durumuna g\u00f6re sayfa y\u00f6nlendirilebilir.</li> </ul> <pre><code>//...\n\nlet redirect = null;\nif(this.state.submitted){\n    redirect = &lt;Redirect to=\"/posts\" /&gt;\n}\nreturn (\n    &lt;div className=\"NewPost\"&gt;\n        {redirect}\n        &lt;h1&gt;Add a Post&lt;/h1&gt;\n\n//...\n</code></pre> <p>Not: Redirect yerine daha pratik \u015fekilde state g\u00fcncelleme an\u0131nda props.history.replace fonksiyonu da kullan\u0131labilir. replace fonksiyonunun push fonksiyonundan fark\u0131 historyi korumamas\u0131d\u0131r. push yap\u0131ld\u0131\u011f\u0131nda browserda \u00f6nceki sayfaya d\u00f6n\u00fclebilir ama replacede d\u00f6n\u00fclemez.</p> <p>Not: Yetkiye sayfalar\u0131n gizlenmesi ya da a\u00e7\u0131lmas\u0131, state \u00fczerinde tutulacak bi de\u011fi\u015fkenle route lar\u0131n \u015fartl\u0131 yaz\u0131lmas\u0131 ile yap\u0131labilir ya da ilgili sayfan\u0131n componentDidMount methodunda yetki olup olmad\u0131\u011f\u0131 kontrol edilerek redirect yap\u0131labilir.</p> <p>Lazy Loading with Suspense</p> <p>Routing s\u0131ras\u0131nda her sayfada t\u00fcm jacascript tekrar y\u00fckleniyor, sadece se\u00e7ili componentin y\u00fcklenmesi isteniyorsa lazy loading y\u00f6ntemleri kullan\u0131l\u0131r.</p> <ol> <li>y\u00f6ntemde a\u015fa\u011f\u0131daki gibi olu\u015fturulan asyncComponent.js dosyas\u0131</li> </ol> <pre><code>import React, { Component } from \"react\"\n\nconst asyncComponent = (importComponent) =&gt; {\n    return class extends Component {\n        state = {\n            component: null\n        }\n\n        componentDidMount () {\n            importComponent()\n                .then(cmp =&gt; {\n                    this.setState({\n                        component: cmp.default\n                    });\n                });\n        }\n\n        render () {\n            const C = this.state.component;\n\n            return C ? &lt;C {...this.props} /&gt; : null;\n        }\n    }\n}\n\nexport default asyncComponent;\n</code></pre> <p>componentin kullan\u0131laca\u011f\u0131 routing dosyas\u0131 i\u00e7inde a\u015fa\u011f\u0131daki \u015fekilde import edilelerek kullan\u0131l\u0131r.</p> <pre><code>//...\n\nimport asyncComponent from '../../hoc/asyncComponent'\nconst AsyncNewPost = asyncComponent(() =&gt; {\n    return import('./NewPost/NewPost');\n});\n\n//...\n\n&lt;Route path=\"/new-post\" component={AsyncNewPost} /&gt;\n</code></pre> <ol> <li>y\u00f6ntemde ise react v16.6 ve sonras\u0131nda gelen yeni \u00f6zellikler ile birlikte a\u015fa\u011f\u0131daki gibi kullan\u0131labilir. Yine bu versiyonla gelen Suspense \u00f6zelli\u011fi ise component y\u00fcklenene kadar i\u015flem yap\u0131lmas\u0131n\u0131 sa\u011flar. </li> </ol> <pre><code>import React, { Component, Suspense } from 'react';\n\nconst Posts = React.lazy(() =&gt; import('./containers/Posts'));\n\n\n&lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n    &lt;Posts /&gt;\n&lt;/Suspense&gt;\n\n</code></pre> <ul> <li>E\u011fer uygulama example.com gibi de\u011fil de example.com/myapp \u015feklinde bi path alt\u0131nda \u00e7al\u0131\u015facaksa bunun reactte tan\u0131mlanmas\u0131 gerekir ve a\u015fa\u011f\u0131daki gibi yap\u0131l\u0131r.</li> </ul> <pre><code>&lt;BrowserRouter basename=\"/myapp\"&gt;\n...\n&lt;/BrowserRouter&gt;\n</code></pre> <ul> <li>Son olarak routing yukar\u0131dan a\u015fa\u011f\u0131ya s\u0131rayla \u00e7al\u0131\u015ft\u0131\u011f\u0131 i\u00e7in en sonda bir Not Found Page b\u00f6l\u00fcm\u00fc yapmak gerekir \u00e7\u00fcnk\u00fc browser her hal\u00fckarda index.html i a\u00e7acakt\u0131r.</li> </ul> <pre><code>&lt;Route render={() =&gt; &lt;h1&gt;Not Found&lt;/h1&gt;} /&gt;\n</code></pre> <ul> <li>D\u00f6k\u00fcman: https://reacttraining.com/react-router/web/guides/philosophy</li> </ul>"}]}