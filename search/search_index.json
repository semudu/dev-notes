{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to My Dev Notes.</p>"},{"location":"ai/coding/","title":"AI Destekli Kodlama","text":"<p>Bu b\u00f6l\u00fcm, yapay zeka destekli kod \u00fcretimi, kod inceleme, refactoring ve modern yaz\u0131l\u0131m geli\u015ftirme s\u00fcre\u00e7lerinde AI ara\u00e7lar\u0131n\u0131n kullan\u0131m\u0131n\u0131 kapsar.</p>"},{"location":"ai/coding/#1-ai-ile-kod-uretimi-code-generation","title":"1. AI ile Kod \u00dcretimi (Code Generation)","text":"<ul> <li>LLM tabanl\u0131 ara\u00e7larla (Copilot, ChatGPT, Tabnine) kod yaz\u0131m\u0131</li> <li>Kod tamamlama, fonksiyon/g\u00f6rev bazl\u0131 otomatik kod \u00fcretimi</li> </ul>"},{"location":"ai/coding/#2-ai-ile-kod-inceleme-code-review","title":"2. AI ile Kod \u0130nceleme (Code Review)","text":"<ul> <li>Otomatik kod kalitesi analizi, static code analysis</li> <li>G\u00fcvenlik a\u00e7\u0131klar\u0131, kod standartlar\u0131, refactoring \u00f6nerileri</li> </ul>"},{"location":"ai/coding/#3-refactoring-ve-pair-programming","title":"3. Refactoring ve Pair Programming","text":"<ul> <li>AI ile \u00f6nerilen refactoring, kodun sadele\u015ftirilmesi</li> <li>AI ile pair programming, kodun birlikte geli\u015ftirilmesi</li> </ul>"},{"location":"ai/coding/#4-test-otomasyonu-ve-mocking","title":"4. Test Otomasyonu ve Mocking","text":"<ul> <li>AI ile test case \u00fcretimi, edge case analizi</li> <li>Mocking, test data generation, coverage analizi</li> </ul>"},{"location":"ai/coding/#5-prompt-engineering-ve-kodlama-stratejileri","title":"5. Prompt Engineering ve Kodlama Stratejileri","text":"<ul> <li>Etkili prompt yaz\u0131m\u0131, context sa\u011flama, kod \u00f6rne\u011fi isteme</li> <li>Kodun a\u00e7\u0131klanmas\u0131, dok\u00fcmantasyon \u00fcretimi</li> </ul>"},{"location":"ai/coding/#6-entegrasyon-ve-otomasyon","title":"6. Entegrasyon ve Otomasyon","text":"<ul> <li>IDE entegrasyonu, CI/CD pipeline\u2019da AI kullan\u0131m\u0131</li> <li>Kod \u00fcretiminde insan-AI i\u015fbirli\u011fi</li> </ul>"},{"location":"ai/coding/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>AI \u00f6nerilerinin do\u011frulanmas\u0131, hallucination \u00f6nleme</li> <li>G\u00fcvenlik, gizlilik, lisans ve copyright riskleri</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"ai/observability/","title":"AI ile Monitoring &amp; Observability","text":"<p>Bu b\u00f6l\u00fcm, yapay zeka destekli monitoring, anomaly detection, log analizi, distributed tracing ve root cause analysis konular\u0131n\u0131 kapsar.</p>"},{"location":"ai/observability/#1-ai-ile-anomaly-detection","title":"1. AI ile Anomaly Detection","text":"<ul> <li>Metrics ve log verilerinde otomatik anomali tespiti</li> <li>Threshold-free alerting, pattern recognition</li> </ul>"},{"location":"ai/observability/#2-log-analizi-ve-otomatik-kategorilendirme","title":"2. Log Analizi ve Otomatik Kategorilendirme","text":"<ul> <li>LLM tabanl\u0131 log parsing, error clustering</li> <li>Root cause suggestion, incident correlation</li> </ul>"},{"location":"ai/observability/#3-distributed-tracing-ve-ai-destekli-analiz","title":"3. Distributed Tracing ve AI Destekli Analiz","text":"<ul> <li>Trace propagation, span analizi, latency breakdown</li> <li>AI ile trace pattern analizi, bottleneck tespiti</li> </ul>"},{"location":"ai/observability/#4-metrics-ve-kpi-analizi","title":"4. Metrics ve KPI Analizi","text":"<ul> <li>AI ile KPI trend analizi, capacity planning</li> <li>Predictive alerting, proactive incident prevention</li> </ul>"},{"location":"ai/observability/#5-incident-response-ve-otomasyon","title":"5. Incident Response ve Otomasyon","text":"<ul> <li>AI ile otomatik incident triage, escalation</li> <li>Self-healing, remediation \u00f6nerileri</li> </ul>"},{"location":"ai/observability/#6-prompt-engineering-ve-observability-stratejileri","title":"6. Prompt Engineering ve Observability Stratejileri","text":"<ul> <li>Monitoring ve alerting i\u00e7in etkili prompt yaz\u0131m\u0131</li> <li>Otomatik raporlama, dashboard \u00fcretimi</li> </ul>"},{"location":"ai/observability/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>False positive/negative y\u00f6netimi, explainability</li> <li>G\u00fcvenlik, gizlilik, veri kalitesi</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"ai/testing/","title":"AI ile Test Otomasyonu","text":"<p>Bu b\u00f6l\u00fcm, yapay zeka destekli test otomasyonu, test case \u00fcretimi, regression ve anomaly detection gibi modern test yakla\u015f\u0131mlar\u0131n\u0131 kapsar.</p>"},{"location":"ai/testing/#1-ai-ile-test-case-generation","title":"1. AI ile Test Case Generation","text":"<ul> <li>LLM tabanl\u0131 ara\u00e7larla otomatik test case \u00fcretimi</li> <li>Edge case, boundary value, negative test case analizi</li> </ul>"},{"location":"ai/testing/#2-test-coverage-ve-gap-analysis","title":"2. Test Coverage ve Gap Analysis","text":"<ul> <li>AI ile coverage analizi, eksik testlerin tespiti</li> <li>Risk tabanl\u0131 test \u00f6nceliklendirme</li> </ul>"},{"location":"ai/testing/#3-mocking-ve-test-data-generation","title":"3. Mocking ve Test Data Generation","text":"<ul> <li>AI ile otomatik mock nesne ve test verisi \u00fcretimi</li> <li>Data anonymization, synthetic data generation</li> </ul>"},{"location":"ai/testing/#4-regression-ve-anomaly-detection","title":"4. Regression ve Anomaly Detection","text":"<ul> <li>Otomatik regression testleri, de\u011fi\u015fiklik etkisi analizi</li> <li>Anomaly detection ile beklenmeyen davran\u0131\u015flar\u0131n tespiti</li> </ul>"},{"location":"ai/testing/#5-continuous-testing-ve-pipeline-entegrasyonu","title":"5. Continuous Testing ve Pipeline Entegrasyonu","text":"<ul> <li>CI/CD pipeline\u2019da AI destekli test otomasyonu</li> <li>Test sonu\u00e7lar\u0131n\u0131n otomatik analizi ve raporlama</li> </ul>"},{"location":"ai/testing/#6-prompt-engineering-ve-test-stratejileri","title":"6. Prompt Engineering ve Test Stratejileri","text":"<ul> <li>Test senaryosu i\u00e7in etkili prompt yaz\u0131m\u0131</li> <li>Test dok\u00fcmantasyonu ve a\u00e7\u0131klama \u00fcretimi</li> </ul>"},{"location":"ai/testing/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>AI \u00f6nerilerinin do\u011frulanmas\u0131, hallucination \u00f6nleme</li> <li>G\u00fcvenlik, gizlilik, test data management</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/ddd/","title":"Domain-Driven Design (DDD)","text":"<p>Bu b\u00f6l\u00fcm, karma\u015f\u0131k i\u015f alanlar\u0131nda yaz\u0131l\u0131m tasar\u0131m\u0131n\u0131 kolayla\u015ft\u0131rmak i\u00e7in kullan\u0131lan Domain-Driven Design (DDD) yakla\u015f\u0131m\u0131n\u0131 ve uygulama \u00f6rneklerini kapsar.</p>"},{"location":"architecture/ddd/#1-ddd-nedir","title":"1. DDD Nedir?","text":"<ul> <li>\u0130\u015f alan\u0131 (domain) odakl\u0131 modelleme</li> <li>Teknik ve i\u015f ekipleri aras\u0131nda ortak dil (ubiquitous language)</li> </ul>"},{"location":"architecture/ddd/#2-temel-kavramlar","title":"2. Temel Kavramlar","text":"<ul> <li>Entity: Kimli\u011fi olan nesne</li> <li>Value Object: Kimli\u011fi olmayan, de\u011feriyle tan\u0131mlanan nesne</li> <li>Aggregate: Transactional boundary, aggregate root</li> <li>Repository: Aggregate eri\u015fimi i\u00e7in soyutlama</li> <li>Service: Domain logic\u2019in aggregate d\u0131\u015f\u0131nda modellenmesi</li> </ul>"},{"location":"architecture/ddd/#3-bounded-context-ve-context-mapping","title":"3. Bounded Context ve Context Mapping","text":"<ul> <li>Bounded context: Modelin s\u0131n\u0131rlar\u0131, context haritalama</li> <li>Context map: Shared kernel, customer/supplier, conformist, anti-corruption layer</li> </ul>"},{"location":"architecture/ddd/#4-event-storming-ve-domain-eventler","title":"4. Event Storming ve Domain Event\u2019ler","text":"<ul> <li>\u0130\u015f s\u00fcre\u00e7lerinin event\u2019lerle modellenmesi</li> <li>Event storming workshop\u2019lar\u0131, event sourcing</li> </ul>"},{"location":"architecture/ddd/#5-implementation-patterns","title":"5. Implementation Patterns","text":"<ul> <li>Layered architecture, hexagonal architecture ile DDD</li> <li>Application service, domain service, infrastructure layer</li> </ul>"},{"location":"architecture/ddd/#6-microservices-ve-ddd","title":"6. Microservices ve DDD","text":"<ul> <li>Her bounded context\u2019in ayr\u0131 bir mikroservis olmas\u0131</li> <li>Veri tutarl\u0131l\u0131\u011f\u0131, eventual consistency, saga pattern</li> </ul>"},{"location":"architecture/ddd/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Model karma\u015f\u0131kl\u0131\u011f\u0131, context s\u0131n\u0131rlar\u0131n\u0131n belirlenmesi</li> <li>Ubiquitous language\u2019in s\u00fcrd\u00fcr\u00fclebilirli\u011fi</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/ha-scalability/","title":"High Availability &amp; Scalability Patterns","text":"<p>Bu b\u00f6l\u00fcm, y\u00fcksek eri\u015filebilirlik (HA) ve \u00f6l\u00e7eklenebilirlik i\u00e7in kullan\u0131lan mimari desenleri, teknikleri ve best practices\u2019i kapsar.</p>"},{"location":"architecture/ha-scalability/#1-high-availability-ha-nedir","title":"1. High Availability (HA) Nedir?","text":"<ul> <li>Single point of failure (SPOF) \u00f6nleme</li> <li>Redundancy, failover, active-active vs active-passive</li> </ul>"},{"location":"architecture/ha-scalability/#2-load-balancing","title":"2. Load Balancing","text":"<ul> <li>Layer 4 (TCP) ve Layer 7 (HTTP) load balancing</li> <li>Round robin, least connections, weighted load balancing</li> <li>Global load balancing, DNS-based routing</li> </ul>"},{"location":"architecture/ha-scalability/#3-replication-ve-partitioning","title":"3. Replication ve Partitioning","text":"<ul> <li>Database replication (master-slave, master-master)</li> <li>Data partitioning/sharding, horizontal vs vertical scaling</li> </ul>"},{"location":"architecture/ha-scalability/#4-autoscaling-ve-elasticity","title":"4. Autoscaling ve Elasticity","text":"<ul> <li>Horizontal ve vertical autoscaling</li> <li>Metrics-based scaling, predictive scaling</li> </ul>"},{"location":"architecture/ha-scalability/#5-disaster-recovery-ve-backup","title":"5. Disaster Recovery ve Backup","text":"<ul> <li>RPO (Recovery Point Objective), RTO (Recovery Time Objective)</li> <li>Backup, snapshot, geo-replication, failover testing</li> </ul>"},{"location":"architecture/ha-scalability/#6-cap-teoremi-ve-trade-offlar","title":"6. CAP Teoremi ve Trade-off\u2019lar","text":"<ul> <li>Consistency, availability, partition tolerance</li> <li>Eventual consistency, strong consistency, quorum</li> </ul>"},{"location":"architecture/ha-scalability/#7-monitoring-ve-health-checks","title":"7. Monitoring ve Health Checks","text":"<ul> <li>Heartbeat, health endpoint, readiness/liveness probes</li> <li>Alerting, incident response, self-healing</li> </ul>"},{"location":"architecture/ha-scalability/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Split-brain, network partition, failover loop</li> <li>Cost vs availability, over-provisioning, under-provisioning</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/interview/","title":"Architecture Interview Sorular\u0131 ve Cevaplar\u0131","text":"<p>Bu b\u00f6l\u00fcm, yaz\u0131l\u0131m mimarisi, microservices, DDD, scalability, security ve cloud-native konular\u0131nda i\u015f g\u00f6r\u00fc\u015fmelerinde s\u0131k\u00e7a sorulan sorular\u0131 ve detayl\u0131 cevaplar\u0131n\u0131 i\u00e7erir.</p>"},{"location":"architecture/interview/#1-temel-mimari-sorular","title":"1. Temel Mimari Sorular","text":"<ul> <li>Monolith vs microservices fark\u0131 nedir?</li> <li>Layered architecture, hexagonal architecture nedir?</li> <li>CAP teoremi nedir, pratikte ne anlama gelir?</li> </ul>"},{"location":"architecture/interview/#2-microservices-ve-dagtk-sistemler","title":"2. Microservices ve Da\u011f\u0131t\u0131k Sistemler","text":"<ul> <li>Service discovery, API gateway, circuit breaker nedir?</li> <li>Eventual consistency nas\u0131l sa\u011flan\u0131r?</li> <li>Microservices\u2019de transaction y\u00f6netimi nas\u0131l yap\u0131l\u0131r?</li> </ul>"},{"location":"architecture/interview/#3-domain-driven-design-ddd","title":"3. Domain-Driven Design (DDD)","text":"<ul> <li>Bounded context, aggregate, entity, value object nedir?</li> <li>DDD ile microservices ili\u015fkisi nedir?</li> <li>Ubiquitous language neden \u00f6nemlidir?</li> </ul>"},{"location":"architecture/interview/#4-high-availability-ve-scalability","title":"4. High Availability ve Scalability","text":"<ul> <li>High availability nas\u0131l sa\u011flan\u0131r?</li> <li>Load balancing, replication, partitioning nas\u0131l uygulan\u0131r?</li> <li>Autoscaling ve elasticity nedir?</li> </ul>"},{"location":"architecture/interview/#5-security-ve-compliance","title":"5. Security ve Compliance","text":"<ul> <li>Zero trust architecture nedir?</li> <li>Secure by design, defense in depth nas\u0131l uygulan\u0131r?</li> <li>Cloud-native uygulamalarda IAM ve secret management nas\u0131l yap\u0131l\u0131r?</li> </ul>"},{"location":"architecture/interview/#6-cloud-native-ve-devops","title":"6. Cloud-Native ve DevOps","text":"<ul> <li>Immutable infrastructure, blue/green deployment nedir?</li> <li>Infrastructure as code (IaC) avantajlar\u0131 nelerdir?</li> <li>CI/CD pipeline\u2019da best practices nelerdir?</li> </ul>"},{"location":"architecture/interview/#7-event-driven-architecture","title":"7. Event-Driven Architecture","text":"<ul> <li>Event sourcing, CQRS, saga pattern nedir?</li> <li>Eventual consistency ve event replay nas\u0131l y\u00f6netilir?</li> </ul>"},{"location":"architecture/interview/#8-gercek-mulakat-sorular","title":"8. Ger\u00e7ek M\u00fclakat Sorular\u0131","text":"<ul> <li>\u201cBir sistemi milyonlarca kullan\u0131c\u0131ya \u00f6l\u00e7eklemek i\u00e7in hangi mimari desenleri kullan\u0131rs\u0131n\u0131z?\u201d</li> <li>\u201cMicroservices\u2019de versioning ve backward compatibility nas\u0131l sa\u011flan\u0131r?\u201d</li> <li>\u201cBir distributed transaction senaryosunda consistency\u2019yi nas\u0131l y\u00f6netirsiniz?\u201d</li> <li>\u201cCloud migration s\u0131ras\u0131nda en b\u00fcy\u00fck riskler nelerdir ve nas\u0131l y\u00f6netilir?\u201d</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnek cevaplar, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/microservices/","title":"Microservices Architecture","text":"<p>Bu b\u00f6l\u00fcm, mikroservis mimarisinin temel kavramlar\u0131n\u0131, avantajlar\u0131n\u0131, zorluklar\u0131n\u0131 ve ger\u00e7ek d\u00fcnya uygulama \u00f6rneklerini kapsar.</p>"},{"location":"architecture/microservices/#1-microservices-nedir","title":"1. Microservices Nedir?","text":"<ul> <li>Ba\u011f\u0131ms\u0131z deploy edilebilen, k\u00fc\u00e7\u00fck, odakl\u0131 servisler</li> <li>Her servisin kendi veri taban\u0131 ve teknolojik y\u0131\u011f\u0131n\u0131 olabilir</li> <li>Polyglot persistence, polyglot programming</li> </ul>"},{"location":"architecture/microservices/#2-microservices-vs-monolith","title":"2. Microservices vs Monolith","text":"<ul> <li>Avantajlar: \u00f6l\u00e7eklenebilirlik, ba\u011f\u0131ms\u0131z geli\u015ftirme, h\u0131zl\u0131 deployment</li> <li>Zorluklar: da\u011f\u0131t\u0131k sistem karma\u015f\u0131kl\u0131\u011f\u0131, veri tutarl\u0131l\u0131\u011f\u0131, operasyonel y\u00fck</li> </ul>"},{"location":"architecture/microservices/#3-servisler-aras-iletisim","title":"3. Servisler Aras\u0131 \u0130leti\u015fim","text":"<ul> <li>Synchronous (REST, gRPC), asynchronous (messaging, event-driven)</li> <li>API gateway, service discovery, load balancing</li> </ul>"},{"location":"architecture/microservices/#4-data-management-ve-consistency","title":"4. Data Management ve Consistency","text":"<ul> <li>Database per service, shared database anti-pattern</li> <li>Eventual consistency, saga pattern, distributed transaction</li> </ul>"},{"location":"architecture/microservices/#5-deployment-ve-scaling","title":"5. Deployment ve Scaling","text":"<ul> <li>Containerization (Docker), orchestration (Kubernetes)</li> <li>Blue/green deployment, canary release, autoscaling</li> </ul>"},{"location":"architecture/microservices/#6-monitoring-logging-ve-observability","title":"6. Monitoring, Logging ve Observability","text":"<ul> <li>Distributed tracing, centralized logging, metrics</li> <li>Health checks, alerting, incident response</li> </ul>"},{"location":"architecture/microservices/#7-security-ve-best-practices","title":"7. Security ve Best Practices","text":"<ul> <li>Service-to-service authentication (mTLS, JWT)</li> <li>API gateway security, rate limiting, input validation</li> </ul>"},{"location":"architecture/microservices/#8-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Network latency, partial failure, circuit breaker</li> <li>Versioning, backward compatibility, schema evolution</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/patterns/","title":"Temel Yaz\u0131l\u0131m Mimari Desenleri","text":"<p>Bu b\u00f6l\u00fcm, modern yaz\u0131l\u0131m projelerinde kullan\u0131lan temel mimari desenleri ve uygulama \u00f6rneklerini i\u00e7erir.</p>"},{"location":"architecture/patterns/#1-katmanl-mimari-layered-architecture","title":"1. Katmanl\u0131 Mimari (Layered Architecture)","text":"<ul> <li>Presentation, business, persistence, integration katmanlar\u0131</li> <li>Separation of concerns ve ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi</li> </ul>"},{"location":"architecture/patterns/#2-microservices-architecture","title":"2. Microservices Architecture","text":"<ul> <li>Servislerin ba\u011f\u0131ms\u0131z deploy edilebilmesi</li> <li>API gateway, service discovery, centralized config</li> <li>Data consistency, event-driven microservices</li> </ul>"},{"location":"architecture/patterns/#3-domain-driven-design-ddd","title":"3. Domain-Driven Design (DDD)","text":"<ul> <li>Bounded context, aggregate, entity, value object, repository</li> <li>Ubiquitous language ve domain event\u2019ler</li> </ul>"},{"location":"architecture/patterns/#4-event-driven-architecture","title":"4. Event-Driven Architecture","text":"<ul> <li>Event sourcing, CQRS, event bus</li> <li>Asenkron ve \u00f6l\u00e7eklenebilir sistemler</li> </ul>"},{"location":"architecture/patterns/#5-service-oriented-architecture-soa","title":"5. Service-Oriented Architecture (SOA)","text":"<ul> <li>Service contract, loose coupling, reusability</li> <li>ESB ve orchestration</li> </ul>"},{"location":"architecture/patterns/#6-clean-architecture-hexagonal-architecture","title":"6. Clean Architecture &amp; Hexagonal Architecture","text":"<ul> <li>Ba\u011f\u0131ms\u0131zl\u0131k kurallar\u0131, port-adapter yap\u0131s\u0131</li> <li>Test edilebilirlik ve s\u00fcrd\u00fcr\u00fclebilirlik</li> </ul>"},{"location":"architecture/patterns/#7-high-availability-scalability-patterns","title":"7. High Availability &amp; Scalability Patterns","text":"<ul> <li>Load balancing, failover, replication, sharding</li> <li>CAP teoremi ve distributed system trade-off\u2019lar\u0131</li> </ul>"},{"location":"architecture/patterns/#8-security-patterns","title":"8. Security Patterns","text":"<ul> <li>Authentication, authorization, defense in depth</li> <li>Secure by design, zero trust, least privilege</li> </ul>"},{"location":"architecture/patterns/#9-performance-cost-optimization","title":"9. Performance &amp; Cost Optimization","text":"<ul> <li>Caching, async processing, resource pooling</li> <li>Cost-aware architecture, autoscaling</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/performance/","title":"Performance &amp; Cost Optimization","text":"<p>Bu b\u00f6l\u00fcm, yaz\u0131l\u0131m mimarisinde performans ve maliyet optimizasyonu i\u00e7in kullan\u0131lan teknikleri, desenleri ve best practices\u2019i kapsar.</p>"},{"location":"architecture/performance/#1-performans-mimarisi-ve-bottleneck-analizi","title":"1. Performans Mimarisi ve Bottleneck Analizi","text":"<ul> <li>End-to-end latency, throughput, concurrency</li> <li>Profiling, tracing, bottleneck tespiti</li> </ul>"},{"location":"architecture/performance/#2-caching-stratejileri","title":"2. Caching Stratejileri","text":"<ul> <li>In-memory cache (Caffeine, Guava), distributed cache (Redis, Memcached)</li> <li>Cache invalidation, TTL, cache aside, write-through, read-through</li> </ul>"},{"location":"architecture/performance/#3-async-processing-ve-parallelism","title":"3. Async Processing ve Parallelism","text":"<ul> <li>Async messaging, event-driven processing, worker pool</li> <li>Parallel processing, batch processing, reactive programming</li> </ul>"},{"location":"architecture/performance/#4-resource-pooling-ve-connection-management","title":"4. Resource Pooling ve Connection Management","text":"<ul> <li>Thread pool, connection pool, object pool</li> <li>Pool sizing, resource leak detection</li> </ul>"},{"location":"architecture/performance/#5-cost-optimization","title":"5. Cost Optimization","text":"<ul> <li>Resource right-sizing, autoscaling, spot/reserved instance kullan\u0131m\u0131</li> <li>Cost monitoring, budget enforcement, idle resource cleanup</li> </ul>"},{"location":"architecture/performance/#6-monitoring-ve-alerting","title":"6. Monitoring ve Alerting","text":"<ul> <li>Metrics, distributed tracing, centralized logging</li> <li>Alert threshold, anomaly detection, incident response</li> </ul>"},{"location":"architecture/performance/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Over-provisioning, under-provisioning, noisy neighbor</li> <li>Caching hatalar\u0131, async processing sorunlar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"architecture/security/","title":"Security Architecture","text":"<p>Bu b\u00f6l\u00fcm, kurumsal yaz\u0131l\u0131m ve sistemlerde g\u00fcvenlik mimarisi, g\u00fcvenlik katmanlar\u0131, tehdit modelleme ve best practices\u2019i kapsar.</p>"},{"location":"architecture/security/#1-security-architecture-nedir","title":"1. Security Architecture Nedir?","text":"<ul> <li>G\u00fcvenlik katmanlar\u0131: network, application, data, identity</li> <li>Defense in depth, layered security yakla\u015f\u0131m\u0131</li> </ul>"},{"location":"architecture/security/#2-authentication-ve-authorization","title":"2. Authentication ve Authorization","text":"<ul> <li>Centralized authentication (SSO, OAuth2, SAML)</li> <li>RBAC, ABAC, least privilege, privilege escalation \u00f6nleme</li> </ul>"},{"location":"architecture/security/#3-network-segmentation-ve-isolation","title":"3. Network Segmentation ve Isolation","text":"<ul> <li>VPC, subnet, security group, firewall, DMZ</li> <li>Microsegmentation, zero trust network</li> </ul>"},{"location":"architecture/security/#4-secure-by-design-ve-threat-modeling","title":"4. Secure by Design ve Threat Modeling","text":"<ul> <li>Secure SDLC, threat modeling (STRIDE, DREAD)</li> <li>Secure default, fail-safe, secure coding practices</li> </ul>"},{"location":"architecture/security/#5-compliance-ve-audit","title":"5. Compliance ve Audit","text":"<ul> <li>Regulatory compliance (GDPR, HIPAA, PCI DSS)</li> <li>Audit log, policy enforcement, security baseline</li> </ul>"},{"location":"architecture/security/#6-incident-response-ve-monitoring","title":"6. Incident Response ve Monitoring","text":"<ul> <li>SIEM, alerting, incident response plan\u0131</li> <li>Forensics, postmortem, threat intelligence</li> </ul>"},{"location":"architecture/security/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Misconfiguration, over-permission, public exposure</li> <li>Secret leakage, insecure default, compliance drift</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/best-practices/","title":"Cloud Best Practices","text":"<p>Bu b\u00f6l\u00fcm, bulut-native uygulamalarda kod kalitesi, g\u00fcvenlik, performans, maliyet optimizasyonu ve s\u00fcrd\u00fcr\u00fclebilirlik i\u00e7in en iyi uygulamalar\u0131 kapsar.</p>"},{"location":"cloud/best-practices/#1-kod-kalitesi-ve-modulerlik","title":"1. Kod Kalitesi ve Mod\u00fclerlik","text":"<ul> <li>Microservices, loosely coupled architecture</li> <li>Infrastructure as code (Terraform, CloudFormation)</li> <li>Centralized configuration, environment management</li> </ul>"},{"location":"cloud/best-practices/#2-guvenlik","title":"2. G\u00fcvenlik","text":"<ul> <li>IAM, RBAC, least privilege, zero trust</li> <li>Secret management, encryption, audit log</li> <li>Network segmentation, security group, firewall</li> </ul>"},{"location":"cloud/best-practices/#3-performans-ve-olceklenebilirlik","title":"3. Performans ve \u00d6l\u00e7eklenebilirlik","text":"<ul> <li>Autoscaling, load balancing, resource limits</li> <li>Caching, CDN, async processing</li> <li>Performance monitoring, bottleneck analysis</li> </ul>"},{"location":"cloud/best-practices/#4-cost-optimization","title":"4. Cost Optimization","text":"<ul> <li>Resource right-sizing, reserved/spot instance kullan\u0131m\u0131</li> <li>Cost monitoring, alerting, budget enforcement</li> <li>Idle resource cleanup, autoscaling</li> </ul>"},{"location":"cloud/best-practices/#5-monitoring-ve-observability","title":"5. Monitoring ve Observability","text":"<ul> <li>Distributed tracing, metrics, centralized logging</li> <li>Health checks, alerting, incident response</li> </ul>"},{"location":"cloud/best-practices/#6-deployment-ve-surdurulebilirlik","title":"6. Deployment ve S\u00fcrd\u00fcr\u00fclebilirlik","text":"<ul> <li>Immutable infrastructure, blue/green deployment</li> <li>Canary release, rollback stratejileri</li> <li>Versioning ve backward compatibility</li> </ul>"},{"location":"cloud/best-practices/#7-sk-karslaslan-sorunlara-yaklasm","title":"7. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlara Yakla\u015f\u0131m","text":"<ul> <li>Misconfiguration, cost overrun, resource exhaustion</li> <li>Compliance drift, monitoring blind spot</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/cicd/","title":"CI/CD &amp; Automation","text":"<p>Bu b\u00f6l\u00fcm, modern yaz\u0131l\u0131m geli\u015ftirme s\u00fcre\u00e7lerinde s\u00fcrekli entegrasyon (CI), s\u00fcrekli teslimat (CD) ve otomasyonun temel kavramlar\u0131n\u0131 ve best practices\u2019i kapsar.</p>"},{"location":"cloud/cicd/#1-cicd-nedir","title":"1. CI/CD Nedir?","text":"<ul> <li>S\u00fcrekli entegrasyon, s\u00fcrekli teslimat ve s\u00fcrekli deployment kavramlar\u0131</li> <li>Pipeline a\u015famalar\u0131: build, test, deploy, release</li> </ul>"},{"location":"cloud/cicd/#2-pipeline-tasarm-ve-yonetimi","title":"2. Pipeline Tasar\u0131m\u0131 ve Y\u00f6netimi","text":"<ul> <li>Pipeline as code (Jenkinsfile, GitHub Actions, GitLab CI, Azure Pipelines)</li> <li>Stage, job, step, parallel execution</li> </ul>"},{"location":"cloud/cicd/#3-build-ve-artifact-management","title":"3. Build ve Artifact Management","text":"<ul> <li>Maven, Gradle, npm, Docker build s\u00fcre\u00e7leri</li> <li>Artifact repository (Nexus, Artifactory, Docker Registry)</li> </ul>"},{"location":"cloud/cicd/#4-test-otomasyonu","title":"4. Test Otomasyonu","text":"<ul> <li>Unit, integration, end-to-end testlerin pipeline\u2019da \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131</li> <li>Test coverage, flaky test y\u00f6netimi</li> </ul>"},{"location":"cloud/cicd/#5-deployment-stratejileri","title":"5. Deployment Stratejileri","text":"<ul> <li>Blue/green deployment, canary release, rolling update</li> <li>Rollback, feature toggle, zero-downtime deployment</li> </ul>"},{"location":"cloud/cicd/#6-security-ve-compliance","title":"6. Security ve Compliance","text":"<ul> <li>Secret management, credential scanning, dependency scanning</li> <li>Policy enforcement, audit log, compliance check</li> </ul>"},{"location":"cloud/cicd/#7-monitoring-ve-feedback","title":"7. Monitoring ve Feedback","text":"<ul> <li>Build/test/deploy metrics, alerting, incident response</li> <li>Pipeline failure analizi, root cause analysis</li> </ul>"},{"location":"cloud/cicd/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Pipeline h\u0131zland\u0131rma, cache kullan\u0131m\u0131, parallelism</li> <li>Environment drift, configuration management, rollback sorunlar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, pipeline \u015fablonlar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/kubernetes/","title":"Kubernetes &amp; Containerization","text":"<p>Bu b\u00f6l\u00fcm, Kubernetes ve container tabanl\u0131 da\u011f\u0131t\u0131k sistemlerin temellerini, uygulama y\u00f6netimini ve best practices\u2019i kapsar.</p>"},{"location":"cloud/kubernetes/#1-kubernetes-temelleri","title":"1. Kubernetes Temelleri","text":"<ul> <li>Pod, deployment, replica set, service, ingress</li> <li>Namespace, label, selector, annotation</li> </ul>"},{"location":"cloud/kubernetes/#2-deployment-ve-scaling","title":"2. Deployment ve Scaling","text":"<ul> <li>Rolling update, blue/green deployment, canary release</li> <li>Horizontal Pod Autoscaler, cluster autoscaling</li> </ul>"},{"location":"cloud/kubernetes/#3-service-discovery-ve-networking","title":"3. Service Discovery ve Networking","text":"<ul> <li>ClusterIP, NodePort, LoadBalancer, Ingress controller</li> <li>DNS-based service discovery, network policy</li> </ul>"},{"location":"cloud/kubernetes/#4-config-management-ve-secret-management","title":"4. Config Management ve Secret Management","text":"<ul> <li>ConfigMap, Secret, environment variable injection</li> <li>External secret management (Vault, AWS Secrets Manager)</li> </ul>"},{"location":"cloud/kubernetes/#5-storage-ve-stateful-uygulamalar","title":"5. Storage ve Stateful Uygulamalar","text":"<ul> <li>PersistentVolume, PersistentVolumeClaim, StorageClass</li> <li>StatefulSet, volume provisioning, backup/restore</li> </ul>"},{"location":"cloud/kubernetes/#6-security-ve-rbac","title":"6. Security ve RBAC","text":"<ul> <li>Role, ClusterRole, RoleBinding, ServiceAccount</li> <li>Pod security policy, network policy, image scanning</li> </ul>"},{"location":"cloud/kubernetes/#7-monitoring-ve-observability","title":"7. Monitoring ve Observability","text":"<ul> <li>Prometheus, Grafana, ELK, Jaeger, OpenTelemetry</li> <li>Health checks, readiness/liveness probes, alerting</li> </ul>"},{"location":"cloud/kubernetes/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Resource limits, request/limit tuning, pod disruption budget</li> <li>Config drift, deployment rollback, troubleshooting</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, manifest dosyalar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/migration/","title":"Cloud Migration","text":"<p>Bu b\u00f6l\u00fcm, uygulama ve altyap\u0131lar\u0131n buluta ta\u015f\u0131nmas\u0131 s\u00fcrecinde kullan\u0131lan stratejiler, teknikler ve best practices\u2019i kapsar.</p>"},{"location":"cloud/migration/#1-cloud-migration-stratejileri","title":"1. Cloud Migration Stratejileri","text":"<ul> <li>Lift &amp; shift, replatform, refactor, rebuild, replace</li> <li>Migration plan\u0131, risk analizi, stakeholder y\u00f6netimi</li> </ul>"},{"location":"cloud/migration/#2-assessment-ve-hazrlk","title":"2. Assessment ve Haz\u0131rl\u0131k","text":"<ul> <li>Mevcut altyap\u0131 ve uygulama envanteri \u00e7\u0131karma</li> <li>Cloud readiness assessment, dependency analizi</li> </ul>"},{"location":"cloud/migration/#3-data-migration","title":"3. Data Migration","text":"<ul> <li>Veri taban\u0131 migration, schema conversion, data sync</li> <li>Downtime minimizasyonu, cutover plan\u0131, rollback stratejileri</li> </ul>"},{"location":"cloud/migration/#4-application-migration","title":"4. Application Migration","text":"<ul> <li>Containerization, VM migration, serverless adoption</li> <li>Application re-architecture, microservices\u2019e ge\u00e7i\u015f</li> </ul>"},{"location":"cloud/migration/#5-security-ve-compliance","title":"5. Security ve Compliance","text":"<ul> <li>IAM, network security, encryption, audit log</li> <li>Compliance mapping, policy enforcement</li> </ul>"},{"location":"cloud/migration/#6-monitoring-ve-validation","title":"6. Monitoring ve Validation","text":"<ul> <li>Migration sonras\u0131 monitoring, health checks, alerting</li> <li>Performance validation, user acceptance test</li> </ul>"},{"location":"cloud/migration/#7-cost-management-ve-optimization","title":"7. Cost Management ve Optimization","text":"<ul> <li>Cost estimation, resource right-sizing, autoscaling</li> <li>Reserved instance, spot instance, cost monitoring</li> </ul>"},{"location":"cloud/migration/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Data loss, sync drift, cutover hatalar\u0131</li> <li>Legacy integration, rollback, documentation</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/native-java/","title":"Cloud Native Java","text":"<p>Bu b\u00f6l\u00fcm, modern bulut ortamlar\u0131nda Java uygulamalar\u0131 geli\u015ftirmek isteyenler i\u00e7in temel kavramlar\u0131, mimari yakla\u015f\u0131mlar\u0131 ve pratik ipu\u00e7lar\u0131n\u0131 i\u00e7erir.</p>"},{"location":"cloud/native-java/#1-cloud-native-nedir","title":"1. Cloud Native Nedir?","text":"<ul> <li>Uygulamalar\u0131n bulut ortam\u0131nda do\u011frudan \u00e7al\u0131\u015facak \u015fekilde tasarlanmas\u0131</li> <li>Otomatik \u00f6l\u00e7eklenebilirlik, self-healing, y\u00fcksek eri\u015filebilirlik</li> </ul>"},{"location":"cloud/native-java/#2-12-factor-app-prensipleri","title":"2. 12-Factor App Prensipleri","text":"<ul> <li>Config, stateless, build/release/run ayr\u0131m\u0131, logs, disposability</li> <li>Cloud-native uygulama tasar\u0131m\u0131nda temel rehber</li> </ul>"},{"location":"cloud/native-java/#3-containerization-ve-orkestrasyon","title":"3. Containerization ve Orkestrasyon","text":"<ul> <li>Docker ile Java uygulamalar\u0131n\u0131n containerize edilmesi</li> <li>Kubernetes ile deployment, scaling, rolling update</li> <li>Helm, Kustomize, Operator pattern</li> </ul>"},{"location":"cloud/native-java/#4-microservices-mimarisi","title":"4. Microservices Mimarisi","text":"<ul> <li>Servislerin ba\u011f\u0131ms\u0131z deploy edilebilmesi</li> <li>API gateway, service discovery, centralized config</li> <li>Polyglot persistence, event-driven microservices</li> </ul>"},{"location":"cloud/native-java/#5-cloud-native-java-frameworkleri","title":"5. Cloud Native Java Frameworkleri","text":"<ul> <li>Spring Boot, Quarkus, Micronaut, Helidon</li> <li>Reactive programming ve non-blocking IO</li> </ul>"},{"location":"cloud/native-java/#6-observability-ve-monitoring","title":"6. Observability ve Monitoring","text":"<ul> <li>Distributed tracing, metrics, logging (Prometheus, Grafana, ELK, Jaeger)</li> <li>Health checks, readiness/liveness probes</li> </ul>"},{"location":"cloud/native-java/#7-guvenlik-ve-best-practices","title":"7. G\u00fcvenlik ve Best Practices","text":"<ul> <li>Secret management, identity &amp; access management</li> <li>Network policy, pod security, image scanning</li> </ul>"},{"location":"cloud/native-java/#8-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Config drift, stateful/stateless servis ayr\u0131m\u0131</li> <li>Resource limits, cold start, dependency management</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/observability/","title":"Observability &amp; Monitoring","text":"<p>Bu b\u00f6l\u00fcm, bulut-native ve da\u011f\u0131t\u0131k sistemlerde g\u00f6zlemlenebilirlik (observability), monitoring, logging ve alerting konular\u0131n\u0131 kapsar.</p>"},{"location":"cloud/observability/#1-observability-nedir","title":"1. Observability Nedir?","text":"<ul> <li>Monitoring, logging, tracing, metrics kavramlar\u0131</li> <li>Black-box vs white-box monitoring</li> </ul>"},{"location":"cloud/observability/#2-metrics-toplama-ve-analiz","title":"2. Metrics Toplama ve Analiz","text":"<ul> <li>Prometheus, Grafana ile metrics toplama ve g\u00f6rselle\u015ftirme</li> <li>Application, infrastructure, business metrics</li> </ul>"},{"location":"cloud/observability/#3-logging-ve-log-management","title":"3. Logging ve Log Management","text":"<ul> <li>Centralized logging (ELK, EFK, Loki)</li> <li>Structured logging, log correlation, log retention</li> </ul>"},{"location":"cloud/observability/#4-distributed-tracing","title":"4. Distributed Tracing","text":"<ul> <li>OpenTelemetry, Jaeger, Zipkin ile distributed tracing</li> <li>Trace context propagation, span, root cause analysis</li> </ul>"},{"location":"cloud/observability/#5-alerting-ve-incident-response","title":"5. Alerting ve Incident Response","text":"<ul> <li>Alert rule tan\u0131m\u0131, threshold, anomaly detection</li> <li>Incident response, escalation, postmortem analizi</li> </ul>"},{"location":"cloud/observability/#6-health-checks-ve-probes","title":"6. Health Checks ve Probes","text":"<ul> <li>Readiness/liveness probes, startup probe</li> <li>Health endpoint, self-healing</li> </ul>"},{"location":"cloud/observability/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Noise reduction, alert fatigue, actionable alerting</li> <li>Monitoring coverage, blind spot analizi</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"cloud/security/","title":"Cloud Security","text":"<p>Bu b\u00f6l\u00fcm, bulut-native uygulamalarda g\u00fcvenlik, kimlik y\u00f6netimi, a\u011f g\u00fcvenli\u011fi, secret management ve best practices konular\u0131n\u0131 kapsar.</p>"},{"location":"cloud/security/#1-cloud-native-security-temelleri","title":"1. Cloud-Native Security Temelleri","text":"<ul> <li>Shared responsibility model, cloud provider vs customer sorumluluklar\u0131</li> <li>Zero trust, defense in depth, least privilege</li> </ul>"},{"location":"cloud/security/#2-identity-access-management-iam","title":"2. Identity &amp; Access Management (IAM)","text":"<ul> <li>User, group, role, policy, permission kavramlar\u0131</li> <li>RBAC, ABAC, federated identity, SSO</li> </ul>"},{"location":"cloud/security/#3-network-security","title":"3. Network Security","text":"<ul> <li>VPC, subnet, security group, firewall, network ACL</li> <li>Private/public subnet, bastion host, VPN, peering</li> </ul>"},{"location":"cloud/security/#4-secret-management","title":"4. Secret Management","text":"<ul> <li>Environment variable, external vault (HashiCorp Vault, AWS Secrets Manager)</li> <li>Secret rotation, audit log, access control</li> </ul>"},{"location":"cloud/security/#5-compliance-ve-audit","title":"5. Compliance ve Audit","text":"<ul> <li>Regulatory compliance (GDPR, HIPAA, PCI DSS)</li> <li>Audit log, policy enforcement, security baseline</li> </ul>"},{"location":"cloud/security/#6-vulnerability-scanning-ve-image-security","title":"6. Vulnerability Scanning ve Image Security","text":"<ul> <li>Container image scanning, dependency scanning</li> <li>Patch management, CVE takip ve remediation</li> </ul>"},{"location":"cloud/security/#7-monitoring-ve-incident-response","title":"7. Monitoring ve Incident Response","text":"<ul> <li>Security monitoring, SIEM, alerting, incident response</li> <li>Forensics, postmortem, threat intelligence</li> </ul>"},{"location":"cloud/security/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Misconfiguration, over-permission, public exposure</li> <li>Secret leakage, insecure default, compliance drift</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/","title":"Java","text":""},{"location":"java/#overview","title":"Overview","text":"<p>Notes about Java will go here.</p>"},{"location":"java/advanced/","title":"\u0130leri Java Konular\u0131","text":"<p>Bu b\u00f6l\u00fcm, Java ile enterprise d\u00fczeyde \u00e7al\u0131\u015fan geli\u015ftiricilerin ve mimarlar\u0131n bilmesi gereken ileri seviye konular\u0131 kapsar.</p>"},{"location":"java/advanced/#1-concurrency-ve-paralel-programlama","title":"1. Concurrency ve Paralel Programlama","text":"<ul> <li>Thread, Runnable, Callable, Future, ExecutorService</li> <li>Synchronization, Lock, Semaphore, CountDownLatch, CyclicBarrier</li> <li>Fork/Join framework, parallel streams, virtual threads</li> </ul>"},{"location":"java/advanced/#2-jvm-tuning-ve-profiling","title":"2. JVM Tuning ve Profiling","text":"<ul> <li>JVM memory model, heap/stack ayr\u0131m\u0131, garbage collector tipleri</li> <li>JVM parametreleri ve tuning (Xms, Xmx, GC tuning)</li> <li>Profiling ara\u00e7lar\u0131: VisualVM, JMC, Flight Recorder</li> </ul>"},{"location":"java/advanced/#3-annotation-processing-ve-reflection","title":"3. Annotation Processing ve Reflection","text":"<ul> <li>Custom annotation yaz\u0131m\u0131 ve kullan\u0131m\u0131</li> <li>Annotation processor ile compile-time kod \u00fcretimi</li> <li>Reflection API ile dinamik tip ve method eri\u015fimi</li> </ul>"},{"location":"java/advanced/#4-java-module-system-jpms","title":"4. Java Module System (JPMS)","text":"<ul> <li>Modularization, module-info.java, encapsulation</li> <li>Service loader, module path vs classpath</li> <li>B\u00fcy\u00fck projelerde mod\u00fcler mimari</li> </ul>"},{"location":"java/advanced/#5-reactive-programming","title":"5. Reactive Programming","text":"<ul> <li>Reactive Streams, Publisher, Subscriber, Flow API</li> <li>Project Reactor, RxJava, Akka Streams</li> <li>Backpressure, non-blocking IO, event loop</li> </ul>"},{"location":"java/advanced/#6-serialization-ve-deserialization","title":"6. Serialization ve Deserialization","text":"<ul> <li>Java serialization, Externalizable, Serializable interface</li> <li>JSON/XML serialization (Jackson, Gson, JAXB)</li> <li>G\u00fcvenlik riskleri ve best practices</li> </ul>"},{"location":"java/advanced/#7-dynamic-proxy-ve-bytecode-manipulasyonu","title":"7. Dynamic Proxy ve Bytecode Manip\u00fclasyonu","text":"<ul> <li>Proxy.newProxyInstance, InvocationHandler</li> <li>Byte Buddy, ASM, Javassist ile runtime kod \u00fcretimi</li> </ul>"},{"location":"java/advanced/#8-native-integration-ve-jni","title":"8. Native Integration ve JNI","text":"<ul> <li>Java\u2019dan native k\u00fct\u00fcphane \u00e7a\u011fr\u0131s\u0131 (JNI, JNA, Panama/FFM API)</li> <li>Native memory management, performans ve g\u00fcvenlik</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/basics/","title":"Temel Java Konular\u0131","text":"<p>Bu b\u00f6l\u00fcm, Java ile \u00e7al\u0131\u015fan bir m\u00fchendisin bilmesi gereken temel kavramlar\u0131, kod \u00f6rnekleri ve pratik ipu\u00e7lar\u0131n\u0131 i\u00e7erir.</p>"},{"location":"java/basics/#1-javann-temelleri","title":"1. Java'n\u0131n Temelleri","text":"<ul> <li>JVM, JRE, JDK farklar\u0131</li> <li>Derleme ve \u00e7al\u0131\u015fma zaman\u0131 s\u00fcre\u00e7leri</li> <li>Platform ba\u011f\u0131ms\u0131zl\u0131k ve bytecode</li> </ul>"},{"location":"java/basics/#2-temel-dil-yaplar","title":"2. Temel Dil Yap\u0131lar\u0131","text":"<ul> <li>De\u011fi\u015fkenler, veri tipleri, operat\u00f6rler</li> <li>Kontrol yap\u0131lar\u0131 (if, switch, for, while, do-while)</li> <li>Fonksiyonlar ve method overloading</li> </ul>"},{"location":"java/basics/#3-nesne-yonelimli-programlama-oop","title":"3. Nesne Y\u00f6nelimli Programlama (OOP)","text":"<ul> <li>S\u0131n\u0131f, nesne, kal\u0131t\u0131m, polimorfizm, encapsulation, abstraction</li> <li>Interface ve abstract class farklar\u0131</li> <li>Inner class, anonymous class, lambda ifadeleri</li> </ul>"},{"location":"java/basics/#4-exception-handling","title":"4. Exception Handling","text":"<ul> <li>Checked ve unchecked exception fark\u0131</li> <li>try-catch-finally, throw, throws</li> <li>Custom exception yaz\u0131m\u0131</li> </ul>"},{"location":"java/basics/#5-koleksiyonlar-ve-generics","title":"5. Koleksiyonlar ve Generics","text":"<ul> <li>List, Set, Map, Queue temel kullan\u0131m\u0131</li> <li>Generics ile tip g\u00fcvenli\u011fi</li> <li>Koleksiyonlarda sort, filter, map i\u015flemleri</li> </ul>"},{"location":"java/basics/#6-io-ve-dosya-islemleri","title":"6. I/O ve Dosya \u0130\u015flemleri","text":"<ul> <li>Temel dosya okuma/yazma</li> <li>Serialization/deserialization</li> <li>NIO ve modern dosya API\u2019leri</li> </ul>"},{"location":"java/basics/#7-temel-coklu-is-parcacg-multithreading","title":"7. Temel \u00c7oklu \u0130\u015f Par\u00e7ac\u0131\u011f\u0131 (Multithreading)","text":"<ul> <li>Thread olu\u015fturma, Runnable ve Callable</li> <li>Senkronizasyon, volatile, synchronized, lock yap\u0131lar\u0131</li> <li>Thread pool ve executor servisleri</li> </ul>"},{"location":"java/basics/#8-java-ile-en-iyi-pratikler","title":"8. Java ile En \u0130yi Pratikler","text":"<ul> <li>Kod okunabilirli\u011fi ve standartlar\u0131</li> <li>Exception y\u00f6netimi</li> <li>Test yaz\u0131m\u0131 ve kodun s\u00fcrd\u00fcr\u00fclebilirli\u011fi</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/interview/","title":"Java Interview Sorular\u0131 ve Cevaplar\u0131","text":"<p>Bu b\u00f6l\u00fcm, Java ve Spring ekosisteminde i\u015f g\u00f6r\u00fc\u015fmelerinde s\u0131k\u00e7a sorulan teknik sorular\u0131 ve detayl\u0131 cevaplar\u0131n\u0131 i\u00e7erir.</p>"},{"location":"java/interview/#1-temel-java-ve-oop-sorular","title":"1. Temel Java ve OOP Sorular\u0131","text":"<ul> <li>Java\u2019n\u0131n platform ba\u011f\u0131ms\u0131zl\u0131\u011f\u0131 nas\u0131l sa\u011flan\u0131r?</li> <li>OOP prensipleri nelerdir? (SOLID, encapsulation, inheritance, polymorphism, abstraction)</li> <li>Interface ve abstract class fark\u0131 nedir?</li> </ul>"},{"location":"java/interview/#2-jvm-ve-bellek-yonetimi","title":"2. JVM ve Bellek Y\u00f6netimi","text":"<ul> <li>JVM\u2019in temel bile\u015fenleri nelerdir?</li> <li>Garbage Collection nas\u0131l \u00e7al\u0131\u015f\u0131r? Hangi GC algoritmalar\u0131 vard\u0131r?</li> <li>Memory leak nedir, nas\u0131l tespit edilir?</li> </ul>"},{"location":"java/interview/#3-concurrency-ve-multithreading","title":"3. Concurrency ve Multithreading","text":"<ul> <li>Thread, Runnable, Callable fark\u0131 nedir?</li> <li>Synchronized, volatile, lock, atomic de\u011fi\u015fkenler ne i\u015fe yarar?</li> <li>Deadlock ve race condition nedir, nas\u0131l \u00f6nlenir?</li> </ul>"},{"location":"java/interview/#4-koleksiyonlar-ve-generics","title":"4. Koleksiyonlar ve Generics","text":"<ul> <li>List, Set, Map farklar\u0131 ve kullan\u0131m senaryolar\u0131</li> <li>HashMap ile ConcurrentHashMap fark\u0131 nedir?</li> <li>Generics ile tip g\u00fcvenli\u011fi nas\u0131l sa\u011flan\u0131r?</li> </ul>"},{"location":"java/interview/#5-exception-handling-ve-best-practices","title":"5. Exception Handling ve Best Practices","text":"<ul> <li>Checked/unchecked exception fark\u0131</li> <li>Custom exception nas\u0131l yaz\u0131l\u0131r?</li> <li>Exception handling\u2019de best practices nelerdir?</li> </ul>"},{"location":"java/interview/#6-spring-ve-spring-boot","title":"6. Spring ve Spring Boot","text":"<ul> <li>Dependency Injection nedir, Spring\u2019de nas\u0131l uygulan\u0131r?</li> <li>Bean lifecycle, scope, @Component, @Service, @Repository farklar\u0131</li> <li>Spring Boot ile Spring Framework fark\u0131 nedir?</li> </ul>"},{"location":"java/interview/#7-design-patterns-ve-best-practices","title":"7. Design Patterns ve Best Practices","text":"<ul> <li>Singleton, Factory, Observer, Strategy pattern \u00f6rnekleri</li> <li>Clean code ve refactoring prensipleri</li> </ul>"},{"location":"java/interview/#8-gercek-mulakat-sorular","title":"8. Ger\u00e7ek M\u00fclakat Sorular\u0131","text":"<ul> <li>\u201cBir REST API\u2019de idempotency nas\u0131l sa\u011flan\u0131r?\u201d</li> <li>\u201cMicroservices mimarisinde distributed transaction nas\u0131l y\u00f6netilir?\u201d</li> <li>\u201cJava\u2019da performans problemi ya\u015fad\u0131\u011f\u0131n\u0131z bir durumu ve \u00e7\u00f6z\u00fcm\u00fcn\u00fcz\u00fc anlat\u0131n.\u201d</li> <li>\u201cSpring Security ile JWT tabanl\u0131 authentication nas\u0131l yap\u0131l\u0131r?\u201d</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnek cevaplar, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/migration-guides/","title":"Java Migration Rehberleri","text":"<p>Bu b\u00f6l\u00fcm, Java projelerinde s\u00fcr\u00fcm y\u00fckseltme, backward compatibility, deprecated API\u2019ler ve migration ara\u00e7lar\u0131 hakk\u0131nda detayl\u0131 rehberler sunar.</p>"},{"location":"java/migration-guides/#1-surum-yukseltme-stratejileri","title":"1. S\u00fcr\u00fcm Y\u00fckseltme Stratejileri","text":"<ul> <li>LTS (Long Term Support) s\u00fcr\u00fcmlerine ge\u00e7i\u015fin avantajlar\u0131</li> <li>S\u00fcr\u00fcm y\u00fckseltme plan\u0131 ve risk analizi</li> <li>Kademeli migration ve rollback stratejileri</li> </ul>"},{"location":"java/migration-guides/#2-backward-compatibility-ve-api-degisiklikleri","title":"2. Backward Compatibility ve API De\u011fi\u015fiklikleri","text":"<ul> <li>Deprecated ve kald\u0131r\u0131lan API\u2019lerin tespiti</li> <li>Kodun backward compatible tutulmas\u0131 i\u00e7in teknikler</li> <li>Otomatik refactoring ara\u00e7lar\u0131 (jdeprscan, jdeps, ErrorProne)</li> </ul>"},{"location":"java/migration-guides/#3-java-8den-11172124e-geciste-dikkat-edilecekler","title":"3. Java 8\u2019den 11/17/21/24\u2019e Ge\u00e7i\u015fte Dikkat Edilecekler","text":"<ul> <li>Mod\u00fcl sistemi (JPMS) ve classpath de\u011fi\u015fiklikleri</li> <li>Yeni GC algoritmalar\u0131, performans ve memory tuning</li> <li>G\u00fcvenlik g\u00fcncellemeleri ve TLS/SSL de\u011fi\u015fiklikleri</li> </ul>"},{"location":"java/migration-guides/#4-test-ve-dogrulama","title":"4. Test ve Do\u011frulama","text":"<ul> <li>Migration sonras\u0131 unit, integration ve regression testleri</li> <li>Test coverage art\u0131r\u0131m\u0131 ve test otomasyonu</li> <li>Canl\u0131ya ge\u00e7i\u015fte monitoring ve rollback plan\u0131</li> </ul>"},{"location":"java/migration-guides/#5-sk-karslaslan-migration-sorunlar","title":"5. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Migration Sorunlar\u0131","text":"<ul> <li>3rd party ba\u011f\u0131ml\u0131l\u0131klar\u0131n uyumsuzlu\u011fu</li> <li>Build tool (Maven, Gradle) g\u00fcncellemeleri</li> <li>Serialization, reflection ve native integration sorunlar\u0131</li> </ul>"},{"location":"java/migration-guides/#6-migration-best-practices","title":"6. Migration Best Practices","text":"<ul> <li>Kodun k\u00fc\u00e7\u00fck par\u00e7alara b\u00f6l\u00fcnerek ta\u015f\u0131nmas\u0131</li> <li>Feature flag ve toggle kullan\u0131m\u0131</li> <li>Dok\u00fcmantasyonun g\u00fcncel tutulmas\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/performance/","title":"Java Performans ve Tuning","text":"<p>Bu b\u00f6l\u00fcm, Java uygulamalar\u0131nda y\u00fcksek performans elde etmek ve sistem kaynaklar\u0131n\u0131 verimli kullanmak i\u00e7in gereken teknikleri ve en iyi uygulamalar\u0131 kapsar.</p>"},{"location":"java/performance/#1-jvm-tuning-ve-bellek-yonetimi","title":"1. JVM Tuning ve Bellek Y\u00f6netimi","text":"<ul> <li>Heap/stack ayarlar\u0131, GC tuning (G1, ZGC, Parallel GC)</li> <li>JVM parametreleri: Xms, Xmx, Xss, GC loglar\u0131</li> <li>Memory leak tespiti ve heap dump analizi</li> </ul>"},{"location":"java/performance/#2-garbage-collection-optimizasyonu","title":"2. Garbage Collection Optimizasyonu","text":"<ul> <li>GC algoritmalar\u0131 ve \u00e7al\u0131\u015fma prensipleri</li> <li>Stop-the-world, promotion failure, fragmentation</li> <li>GC tuning i\u00e7in ara\u00e7lar ve metrikler</li> </ul>"},{"location":"java/performance/#3-async-ve-paralel-programlama","title":"3. Async ve Paralel Programlama","text":"<ul> <li>Thread pool tuning, executor servisleri</li> <li>Parallel streams, CompletableFuture, reactive programming</li> <li>Deadlock ve race condition \u00f6nleme</li> </ul>"},{"location":"java/performance/#4-profiling-ve-performans-analizi","title":"4. Profiling ve Performans Analizi","text":"<ul> <li>Profiling ara\u00e7lar\u0131: VisualVM, JMC, YourKit, Flight Recorder</li> <li>CPU, memory, IO bottleneck tespiti</li> <li>Hotspot analizi ve optimizasyon</li> </ul>"},{"location":"java/performance/#5-performans-testleri-ve-benchmarking","title":"5. Performans Testleri ve Benchmarking","text":"<ul> <li>JMH ile mikro-benchmark yaz\u0131m\u0131</li> <li>Load testing, stress testing, soak testing</li> <li>Test ortam\u0131 izolasyonu ve sonu\u00e7lar\u0131n yorumlanmas\u0131</li> </ul>"},{"location":"java/performance/#6-kod-ve-algoritma-optimizasyonu","title":"6. Kod ve Algoritma Optimizasyonu","text":"<ul> <li>Big-O analizi, veri yap\u0131s\u0131 se\u00e7imi</li> <li>Caching, lazy loading, short-circuiting</li> <li>Inline, loop unrolling, branch prediction</li> </ul>"},{"location":"java/performance/#7-production-monitoring-ve-otomasyon","title":"7. Production Monitoring ve Otomasyon","text":"<ul> <li>Metrics, distributed tracing, alerting</li> <li>Health checks, self-healing, autoscaling</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/security/","title":"Java G\u00fcvenlik","text":"<p>Bu b\u00f6l\u00fcm, Java uygulamalar\u0131nda g\u00fcvenlik sa\u011flamak i\u00e7in bilmeniz gereken temel ve ileri seviye konular\u0131 kapsar.</p>"},{"location":"java/security/#1-authentication-ve-authorization","title":"1. Authentication ve Authorization","text":"<ul> <li>Temel kimlik do\u011frulama y\u00f6ntemleri (Basic, Digest, Form-based)</li> <li>Role-based access control (RBAC), attribute-based access control (ABAC)</li> <li>Spring Security ile entegre kimlik y\u00f6netimi</li> </ul>"},{"location":"java/security/#2-cryptography-ve-veri-guvenligi","title":"2. Cryptography ve Veri G\u00fcvenli\u011fi","text":"<ul> <li>Java Cryptography Architecture (JCA), Java Cryptography Extension (JCE)</li> <li>Symmetric/asymmetric encryption, hashing, digital signatures</li> <li>KeyStore, KeyManager, TrustManager kullan\u0131m\u0131</li> </ul>"},{"location":"java/security/#3-secure-coding-practices","title":"3. Secure Coding Practices","text":"<ul> <li>Input validation, output encoding, SQL injection ve XSS \u00f6nleme</li> <li>Principle of least privilege, fail-safe defaults</li> <li>G\u00fcvenli exception handling ve logging</li> </ul>"},{"location":"java/security/#4-owasp-ve-guvenlik-standartlar","title":"4. OWASP ve G\u00fcvenlik Standartlar\u0131","text":"<ul> <li>OWASP Top 10 riskleri ve Java\u2019da \u00f6nlemler</li> <li>G\u00fcvenlik testleri ve vulnerability scanning</li> </ul>"},{"location":"java/security/#5-java-security-manager-ve-policy-files","title":"5. Java Security Manager ve Policy Files","text":"<ul> <li>SecurityManager ile sandboxing ve policy dosyalar\u0131</li> <li>Kodun izinlerini s\u0131n\u0131rland\u0131rma</li> </ul>"},{"location":"java/security/#6-tlsssl-ve-network-guvenligi","title":"6. TLS/SSL ve Network G\u00fcvenli\u011fi","text":"<ul> <li>HTTPS, TLS konfig\u00fcrasyonu, sertifika y\u00f6netimi</li> <li>Secure socket programming, mutual TLS</li> </ul>"},{"location":"java/security/#7-secret-management","title":"7. Secret Management","text":"<ul> <li>Environment variable, external vault, config server</li> <li>Credentials rotation, audit log, access control</li> </ul>"},{"location":"java/security/#8-guvenlikte-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. G\u00fcvenlikte S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Serialization sald\u0131r\u0131lar\u0131, insecure deserialization</li> <li>Session fixation, CSRF, clickjacking</li> <li>G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n tespiti ve patch management</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"java/1.6/examples/","title":"Java 1.6 (Java 6) - Kod \u00d6rnekleri","text":""},{"location":"java/1.6/examples/#1-scripting-api-kullanm","title":"1. Scripting API Kullan\u0131m\u0131","text":"<pre><code>import javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\n\npublic class ScriptExample {\n    public static void main(String[] args) throws Exception {\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n        engine.eval(\"print('Hello from Java 6 Scripting!');\");\n    }\n}\n</code></pre>"},{"location":"java/1.6/examples/#2-web-servisleri-jax-ws-ile-basit-servis","title":"2. Web Servisleri (JAX-WS) ile Basit Servis","text":"<pre><code>import javax.jws.WebService;\nimport javax.jws.WebMethod;\n\n@WebService\npublic class MerhabaServis {\n    @WebMethod\n    public String merhaba(String isim) {\n        return \"Merhaba, \" + isim + \"!\";\n    }\n}\n</code></pre>"},{"location":"java/1.6/examples/#3-compiler-api-ile-dinamik-derleme","title":"3. Compiler API ile Dinamik Derleme","text":"<pre><code>import javax.tools.JavaCompiler;\nimport javax.tools.ToolProvider;\n\npublic class CompileExample {\n    public static void main(String[] args) {\n        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n        int result = compiler.run(null, null, null, \"Test.java\");\n        System.out.println(\"Derleme sonucu: \" + result);\n    }\n}\n</code></pre> <p>Daha fazla \u00f6rnek ve a\u00e7\u0131klama i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/1.6/features/","title":"Java 1.6 (Java 6) - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/1.6/features/#1-scripting-api-jsr-223","title":"1. Scripting API (JSR 223)","text":""},{"location":"java/1.6/features/#11-java-ds-dillerin-entegrasyonu","title":"1.1 Java D\u0131\u015f\u0131 Dillerin Entegrasyonu","text":"<ul> <li>Java uygulamalar\u0131nda JavaScript gibi dilleri do\u011frudan \u00e7al\u0131\u015ft\u0131rabilme.</li> <li>Script motorlar\u0131 ile dinamik kod y\u00fcr\u00fctme.</li> <li>\u00d6zellikle konfig\u00fcrasyon, test ve h\u0131zl\u0131 prototipleme i\u00e7in kullan\u0131\u015fl\u0131.</li> </ul>"},{"location":"java/1.6/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Uygulama i\u00e7inde kullan\u0131c\u0131dan al\u0131nan kodun g\u00fcvenli \u015fekilde \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131.</li> <li>Java ile birlikte Groovy, JRuby gibi dillerin entegrasyonu.</li> </ul>"},{"location":"java/1.6/features/#2-web-servisleri-jax-ws-jaxb","title":"2. Web Servisleri (JAX-WS, JAXB)","text":""},{"location":"java/1.6/features/#21-jax-ws-ile-soap-web-servisleri","title":"2.1 JAX-WS ile SOAP Web Servisleri","text":"<ul> <li>Java s\u0131n\u0131flar\u0131n\u0131 kolayca web servise d\u00f6n\u00fc\u015ft\u00fcrme.</li> <li>Otomatik WSDL \u00fcretimi ve istemci olu\u015fturma.</li> </ul>"},{"location":"java/1.6/features/#22-jaxb-ile-xml-isleme","title":"2.2 JAXB ile XML \u0130\u015fleme","text":"<ul> <li>Java nesnelerini XML\u2019e ve XML\u2019i Java nesnesine d\u00f6n\u00fc\u015ft\u00fcrme (marshalling/unmarshalling).</li> <li>Konfig\u00fcrasyon ve veri al\u0131\u015fveri\u015finde kolayl\u0131k.</li> </ul>"},{"location":"java/1.6/features/#3-compiler-api-jsr-199","title":"3. Compiler API (JSR 199)","text":""},{"location":"java/1.6/features/#31-dinamik-derleme","title":"3.1 Dinamik Derleme","text":"<ul> <li>\u00c7al\u0131\u015fma zaman\u0131nda Java kodunu derleyebilme.</li> <li>IDE, kod edit\u00f6r\u00fc ve ara\u00e7 geli\u015ftiriciler i\u00e7in temel altyap\u0131.</li> </ul>"},{"location":"java/1.6/features/#32-kullanm-senaryosu","title":"3.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Kod \u00fcretimi ve derleme i\u015flemlerinin otomasyonu.</li> <li>E\u011fitim ve \u00f6\u011fretim ama\u00e7l\u0131 dinamik kod \u00e7al\u0131\u015ft\u0131rma.</li> </ul>"},{"location":"java/1.6/features/#4-donanm-hzlandrmal-grafikler","title":"4. Donan\u0131m H\u0131zland\u0131rmal\u0131 Grafikler","text":""},{"location":"java/1.6/features/#41-java-2d-ve-direct3d-destegi","title":"4.1 Java 2D ve Direct3D Deste\u011fi","text":"<ul> <li>Grafik i\u015flemlerinde donan\u0131m h\u0131zland\u0131rma ile daha y\u00fcksek performans.</li> <li>\u00d6zellikle masa\u00fcst\u00fc uygulamalar\u0131nda ak\u0131c\u0131 aray\u00fczler.</li> </ul>"},{"location":"java/1.6/features/#5-yonetilebilirlik-ve-izleme","title":"5. Y\u00f6netilebilirlik ve \u0130zleme","text":""},{"location":"java/1.6/features/#51-gelismis-monitoring","title":"5.1 Geli\u015fmi\u015f Monitoring","text":"<ul> <li>Yeni MBeans ve JMX ile uygulama izleme ve y\u00f6netim kolayl\u0131\u011f\u0131.</li> <li>Performans analizi ve hata tespiti i\u00e7in ara\u00e7 deste\u011fi.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/1.6/migration/","title":"Java 1.6 (Java 6) - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/1.6/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 1.5 (5) ile b\u00fcy\u00fck oranda geriye d\u00f6n\u00fck uyumluluk sa\u011flanm\u0131\u015ft\u0131r.</li> <li>Baz\u0131 eski API\u2019ler deprecated (kullan\u0131mdan kald\u0131r\u0131lm\u0131\u015f) olabilir, g\u00fcncel dok\u00fcmantasyon kontrol edilmeli.</li> <li>JVM ve JDK g\u00fcncellemeleriyle birlikte performans ve g\u00fcvenlik iyile\u015ftirmeleri gelir, bu nedenle eski JVM s\u00fcr\u00fcmleriyle test yap\u0131lmal\u0131.</li> </ul>"},{"location":"java/1.6/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>1.6 ile gelen yeni API\u2019ler ve \u00f6zellikler, eski projelerde kullan\u0131lmak istenirse minimum derleyici ve \u00e7al\u0131\u015fma zaman\u0131 s\u00fcr\u00fcm\u00fc g\u00fcncellenmeli.</li> <li>\u00d6zellikle scripting ve web servisleri gibi yeni mod\u00fcller i\u00e7in ek ba\u011f\u0131ml\u0131l\u0131klar gerekebilir.</li> </ul>"},{"location":"java/1.6/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Kodunuzu derlemeden \u00f6nce eski ve yeni s\u00fcr\u00fcmde test edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Ant, Maven) g\u00fcncel tutun.</li> <li>JVM parametrelerini ve garbage collector ayarlar\u0131n\u0131 g\u00f6zden ge\u00e7irin.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/1.6/summary/","title":"Java 1.6 (Java 6) - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 1.6 (Java 6), 2006 y\u0131l\u0131nda yay\u0131nland\u0131 ve performans iyile\u015ftirmeleri, yeni API\u2019ler ve geli\u015ftirilmi\u015f ara\u00e7larla birlikte geldi. Bu s\u00fcr\u00fcmdeki yenilikler, Java platformunun kurumsal uygulamalarda daha verimli kullan\u0131lmas\u0131n\u0131 sa\u011flad\u0131.</p>"},{"location":"java/1.6/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Scripting API (JSR 223) ile Java d\u0131\u015f\u0131 dillerin entegrasyonu</li> <li>Web Service deste\u011fi (JAX-WS, JAXB)</li> <li>Donan\u0131m h\u0131zland\u0131rmal\u0131 grafikler (Java 2D, Direct3D)</li> <li>Compiler API (JSR 199)</li> <li>Performans ve y\u00f6netilebilirlik iyile\u015ftirmeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/11/examples/","title":"Java 11 - Kod \u00d6rnekleri","text":""},{"location":"java/11/examples/#1-http-client-api-kullanm","title":"1. HTTP Client API Kullan\u0131m\u0131","text":"<p>Yeni HTTP Client API ile kolayca HTTP istekleri g\u00f6nderilebilir.</p>"},{"location":"java/11/examples/#2-string-snf-yeni-metotlar","title":"2. String S\u0131n\u0131f\u0131 Yeni Metotlar","text":"<ul> <li><code>isBlank()</code>: Bo\u015f veya sadece bo\u015fluklardan olu\u015fan string kontrol\u00fc.</li> <li><code>lines()</code>: Sat\u0131rlara ay\u0131rma.</li> <li><code>strip()</code>: Ba\u015f ve sondaki bo\u015fluklar\u0131 temizleme.</li> <li><code>repeat(n)</code>: String\u2019i n kez tekrar etme.</li> </ul>"},{"location":"java/11/examples/#3-optional-snf-yeni-metotlar","title":"3. Optional S\u0131n\u0131f\u0131 Yeni Metotlar","text":"<ul> <li><code>isEmpty()</code>: De\u011fer yoksa true d\u00f6ner.</li> <li><code>ifPresentOrElse()</code>: De\u011fer varsa bir i\u015flem, yoksa ba\u015fka bir i\u015flem yap\u0131labilir.</li> </ul>"},{"location":"java/11/examples/#4-lambda-parametrelerinde-var-kullanm","title":"4. Lambda Parametrelerinde var Kullan\u0131m\u0131","text":"<p>Lambda ifadelerinde parametre tipi olarak <code>var</code> kullan\u0131labilir.</p>"},{"location":"java/11/examples/#5-zgc-kullanm","title":"5. ZGC Kullan\u0131m\u0131","text":"<p>D\u00fc\u015f\u00fck gecikmeli \u00e7\u00f6p toplama i\u00e7in ZGC etkinle\u015ftirilebilir.</p> <p>Daha fazla detay ve \u00f6rnek i\u00e7in resmi d\u00f6k\u00fcmana ve di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/11/features/","title":"Java 11 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/11/features/#1-http-client-api","title":"1. HTTP Client API","text":""},{"location":"java/11/features/#11-modern-http2-ve-websocket-destegi","title":"1.1 Modern HTTP/2 ve WebSocket Deste\u011fi","text":"<ul> <li>Yerle\u015fik, asenkron ve senkron HTTP istekleri.</li> <li>WebSocket ile ger\u00e7ek zamanl\u0131 ileti\u015fim.</li> <li>RESTful servislerle kolay entegrasyon.</li> </ul>"},{"location":"java/11/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>API istemcileri, mikroservisler, veri \u00e7ekme ve entegrasyon projeleri.</li> </ul>"},{"location":"java/11/features/#2-string-collection-ve-optional-gelistirmeleri","title":"2. String, Collection ve Optional Geli\u015ftirmeleri","text":""},{"location":"java/11/features/#21-string-snf","title":"2.1 String S\u0131n\u0131f\u0131","text":"<ul> <li><code>isBlank()</code>, <code>lines()</code>, <code>strip()</code>, <code>repeat()</code> gibi yeni metotlar.</li> <li>Metin i\u015fleme ve veri temizleme i\u015flemlerinde kolayl\u0131k.</li> </ul>"},{"location":"java/11/features/#22-collection-api","title":"2.2 Collection API","text":"<ul> <li><code>copyOf()</code>, <code>toArray(IntFunction&lt;T[]&gt;)</code> ile immutable koleksiyonlar ve kolay d\u00f6n\u00fc\u015f\u00fcmler.</li> </ul>"},{"location":"java/11/features/#23-optional-snf","title":"2.3 Optional S\u0131n\u0131f\u0131","text":"<ul> <li><code>isEmpty()</code>, <code>ifPresentOrElse()</code> ile null g\u00fcvenli\u011fi ve fonksiyonel kullan\u0131m.</li> </ul>"},{"location":"java/11/features/#3-lambda-parametrelerinde-var-anahtar-kelimesi","title":"3. Lambda Parametrelerinde var Anahtar Kelimesi","text":"<ul> <li>Lambda ifadelerinde parametre tipi olarak <code>var</code> kullan\u0131labilir.</li> <li>Tip \u00e7\u0131kar\u0131m\u0131 ve anotasyon deste\u011fi.</li> </ul>"},{"location":"java/11/features/#4-z-garbage-collector-zgc","title":"4. Z Garbage Collector (ZGC)","text":""},{"location":"java/11/features/#41-dusuk-gecikmeli-cop-toplayc","title":"4.1 D\u00fc\u015f\u00fck Gecikmeli \u00c7\u00f6p Toplay\u0131c\u0131","text":"<ul> <li>B\u00fcy\u00fck heap\u2019lerde d\u00fc\u015f\u00fck gecikme ile bellek y\u00f6netimi.</li> <li>\u00d6zellikle y\u00fcksek performans gerektiren sunucu uygulamalar\u0131nda avantaj.</li> </ul>"},{"location":"java/11/features/#5-javafxin-jdkdan-ayrlmas","title":"5. JavaFX\u2019in JDK\u2019dan Ayr\u0131lmas\u0131","text":"<ul> <li>JavaFX art\u0131k ayr\u0131 bir mod\u00fcl olarak sunuluyor.</li> <li>Masa\u00fcst\u00fc uygulamalar\u0131nda mod\u00fclerlik ve ba\u011f\u0131ms\u0131z g\u00fcncelleme imkan\u0131.</li> </ul>"},{"location":"java/11/features/#6-diger-jep-ve-api-gelistirmeleri","title":"6. Di\u011fer JEP ve API Geli\u015ftirmeleri","text":""},{"location":"java/11/features/#61-dosya-okumayazma-kolaylklar","title":"6.1 Dosya Okuma/Yazma Kolayl\u0131klar\u0131","text":"<ul> <li>Yeni dosya API\u2019leri ile h\u0131zl\u0131 ve g\u00fcvenli dosya i\u015flemleri.</li> </ul>"},{"location":"java/11/features/#62-flight-recorder-ve-mission-control","title":"6.2 Flight Recorder ve Mission Control","text":"<ul> <li>Uygulama izleme, performans analizi ve hata tespiti i\u00e7in geli\u015fmi\u015f ara\u00e7lar.</li> </ul>"},{"location":"java/11/features/#63-guvenlik-ve-performans","title":"6.3 G\u00fcvenlik ve Performans","text":"<ul> <li>TLS/SSL g\u00fcncellemeleri, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n kapat\u0131lmas\u0131.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/11/migration/","title":"Java 11 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/11/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 8\u2019den Java 11\u2019e ge\u00e7erken baz\u0131 eski API\u2019ler ve mod\u00fcller kald\u0131r\u0131lm\u0131\u015ft\u0131r (\u00f6r. Java EE, CORBA).</li> <li>JavaFX art\u0131k JDK i\u00e7inde gelmez, ayr\u0131 olarak eklenmelidir.</li> <li>Baz\u0131 komut sat\u0131r\u0131 ara\u00e7lar\u0131 (javaws, jvisualvm vb.) kald\u0131r\u0131lm\u0131\u015ft\u0131r.</li> <li>Minimum \u00e7al\u0131\u015fma zaman\u0131 ve derleyici s\u00fcr\u00fcm\u00fc Java 11 olmal\u0131d\u0131r.</li> </ul>"},{"location":"java/11/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Kodunuzu Java 11 ile derleyip test edin, \u00f6zellikle kald\u0131r\u0131lan API\u2019leri kullanan b\u00f6l\u00fcmleri kontrol edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> <li>Yeni \u00f6zellikleri (HTTP Client, String/Optional metotlar\u0131, ZGC) kademeli olarak entegre edin.</li> </ul>"},{"location":"java/11/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri kullanmaya \u00f6zen g\u00f6sterin.</li> <li>Java 11 LTS oldu\u011fu i\u00e7in uzun s\u00fcreli projelerde tercih edilebilir.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/11/summary/","title":"Java 11 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 11, 2018 y\u0131l\u0131nda LTS (Long Term Support) s\u00fcr\u00fcm\u00fc olarak yay\u0131nland\u0131. Java 8\u2019den sonra gelen en \u00f6nemli LTS s\u00fcr\u00fcm\u00fcd\u00fcr ve bir\u00e7ok yeni \u00f6zellik, API geli\u015ftirmesi ve eski \u00f6zelliklerin kald\u0131r\u0131lmas\u0131 ile dikkat \u00e7eker.</p>"},{"location":"java/11/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Yerle\u015fik HTTP Client API</li> <li>String, Collection ve Optional s\u0131n\u0131flar\u0131nda yeni metotlar</li> <li>Lambda parametrelerinde var anahtar kelimesi</li> <li>ZGC (Z Garbage Collector) ve performans iyile\u015ftirmeleri</li> <li>JavaFX\u2019in mod\u00fclerle\u015ftirilip JDK\u2019dan \u00e7\u0131kar\u0131lmas\u0131</li> <li>JEP\u2019lerle gelen \u00e7e\u015fitli dil ve API geli\u015ftirmeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/17/examples/","title":"Java 17 - Kod \u00d6rnekleri","text":""},{"location":"java/17/examples/#1-pattern-matching-for-switch","title":"1. Pattern Matching for switch","text":"<pre><code>Object obj = \"Merhaba\";\nswitch (obj) {\n    case String s -&gt; System.out.println(\"String: \" + s);\n    case Integer i -&gt; System.out.println(\"Integer: \" + i);\n    default -&gt; System.out.println(\"Bilinmeyen tip\");\n}\n</code></pre>"},{"location":"java/17/examples/#2-sealed-classes","title":"2. Sealed Classes","text":"<pre><code>public sealed class Hayvan permits Kedi, Kopek {}\nfinal class Kedi extends Hayvan {}\nfinal class Kopek extends Hayvan {}\n</code></pre>"},{"location":"java/17/examples/#3-streamtolist","title":"3. Stream.toList()","text":"<pre><code>List&lt;String&gt; list = Stream.of(\"a\", \"b\", \"c\").toList();\n</code></pre>"},{"location":"java/17/examples/#4-foreign-function-memory-api-preview","title":"4. Foreign Function &amp; Memory API (Preview)","text":"<p>Java d\u0131\u015f\u0131 k\u00fct\u00fcphanelerle g\u00fcvenli etkile\u015fim i\u00e7in yeni API.</p>"},{"location":"java/17/examples/#5-randomgenerator-api","title":"5. RandomGenerator API","text":"<pre><code>RandomGenerator rnd = RandomGenerator.getDefault();\nint sayi = rnd.nextInt();\n</code></pre> <p>Daha fazla detay ve \u00f6rnek i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/17/features/","title":"Java 17 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/17/features/#1-pattern-matching-for-switch","title":"1. Pattern Matching for switch","text":""},{"location":"java/17/features/#11-desen-esleme-ile-switch","title":"1.1 Desen E\u015fleme ile Switch","text":"<ul> <li>Switch ifadelerinde tip kontrol\u00fc ve desen e\u015fleme deste\u011fi.</li> <li>Kodun daha okunabilir ve g\u00fcvenli olmas\u0131.</li> <li>\u00d6zellikle sealed class ve record ile birlikte g\u00fc\u00e7l\u00fc kullan\u0131m.</li> </ul>"},{"location":"java/17/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Farkl\u0131 veri tiplerinin ayr\u0131\u015ft\u0131r\u0131lmas\u0131, polimorfik i\u015flemler.</li> </ul>"},{"location":"java/17/features/#2-sealed-classes","title":"2. Sealed Classes","text":""},{"location":"java/17/features/#21-snf-hiyerarsisinin-snrlandrlmas","title":"2.1 S\u0131n\u0131f Hiyerar\u015fisinin S\u0131n\u0131rland\u0131r\u0131lmas\u0131","text":"<ul> <li>Sadece izin verilen alt s\u0131n\u0131flar\u0131n t\u00fcretilebilmesi.</li> <li>G\u00fcvenli ve \u00f6ng\u00f6r\u00fclebilir miras yap\u0131s\u0131.</li> </ul>"},{"location":"java/17/features/#22-kullanm-senaryosu","title":"2.2 Kullan\u0131m Senaryosu","text":"<ul> <li>API tasar\u0131m\u0131, domain modelleme, polimorfizm.</li> </ul>"},{"location":"java/17/features/#3-yeni-garbage-collector-secenekleri","title":"3. Yeni Garbage Collector Se\u00e7enekleri","text":""},{"location":"java/17/features/#31-g1-zgc-shenandoah","title":"3.1 G1, ZGC, Shenandoah","text":"<ul> <li>Modern, d\u00fc\u015f\u00fck gecikmeli ve y\u00fcksek performansl\u0131 \u00e7\u00f6p toplay\u0131c\u0131lar.</li> <li>B\u00fcy\u00fck \u00f6l\u00e7ekli uygulamalarda bellek y\u00f6netimi avantaj\u0131.</li> </ul>"},{"location":"java/17/features/#4-strongly-encapsulated-jdk-internals","title":"4. Strongly Encapsulated JDK Internals","text":""},{"location":"java/17/features/#41-kapsulleme-ve-modulerlik","title":"4.1 Kaps\u00fclleme ve Mod\u00fclerlik","text":"<ul> <li>JDK i\u00e7 yap\u0131lar\u0131n\u0131n d\u0131\u015far\u0131ya kapat\u0131lmas\u0131.</li> <li>G\u00fcvenlik ve bak\u0131m kolayl\u0131\u011f\u0131.</li> </ul>"},{"location":"java/17/features/#5-foreign-function-memory-api-preview","title":"5. Foreign Function &amp; Memory API (Preview)","text":""},{"location":"java/17/features/#51-native-kod-ile-etkilesim","title":"5.1 Native Kod ile Etkile\u015fim","text":"<ul> <li>JNI\u2019ye g\u00f6re daha g\u00fcvenli ve kolay native k\u00fct\u00fcphane \u00e7a\u011fr\u0131lar\u0131.</li> <li>Java d\u0131\u015f\u0131 kodlarla h\u0131zl\u0131 ve g\u00fcvenli entegrasyon.</li> </ul>"},{"location":"java/17/features/#52-bellek-yonetimi","title":"5.2 Bellek Y\u00f6netimi","text":"<ul> <li>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma.</li> </ul>"},{"location":"java/17/features/#6-deprecation-ve-kaldrlan-ozellikler","title":"6. Deprecation ve Kald\u0131r\u0131lan \u00d6zellikler","text":""},{"location":"java/17/features/#61-applet-api-security-manager","title":"6.1 Applet API, Security Manager","text":"<ul> <li>Eski teknolojilerin kald\u0131r\u0131lmas\u0131 veya kullan\u0131mdan kald\u0131r\u0131lmas\u0131.</li> <li>Modern g\u00fcvenlik ve uygulama mimarilerine ge\u00e7i\u015f.</li> </ul>"},{"location":"java/17/features/#7-kucuk-dil-ve-api-gelistirmeleri","title":"7. K\u00fc\u00e7\u00fck Dil ve API Geli\u015ftirmeleri","text":""},{"location":"java/17/features/#71-streamtolist-randomgenerator-api","title":"7.1 Stream.toList(), RandomGenerator API","text":"<ul> <li>Koleksiyon i\u015flemlerinde kolayl\u0131k.</li> <li>Yeni rastgele say\u0131 \u00fcreticileri.</li> </ul>"},{"location":"java/17/features/#72-yeni-string-ve-collection-metotlar","title":"7.2 Yeni String ve Collection Metotlar\u0131","text":"<ul> <li>Kodun okunabilirli\u011fini ve g\u00fcvenli\u011fini art\u0131ran k\u00fc\u00e7\u00fck iyile\u015ftirmeler.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/17/migration/","title":"Java 17 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/17/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 11\u2019den Java 17\u2019ye ge\u00e7erken baz\u0131 eski API\u2019ler ve mod\u00fcller kald\u0131r\u0131lm\u0131\u015ft\u0131r (\u00f6r. Applet API, Security Manager).</li> <li>Sealed classes ve pattern matching gibi yeni dil \u00f6zellikleri, eski kodlarla uyumlu \u00e7al\u0131\u015f\u0131r ancak derleyici ve IDE g\u00fcncel olmal\u0131d\u0131r.</li> <li>Baz\u0131 JVM parametreleri ve garbage collector se\u00e7enekleri de\u011fi\u015fmi\u015f veya kald\u0131r\u0131lm\u0131\u015f olabilir.</li> </ul>"},{"location":"java/17/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Kodunuzu Java 17 ile derleyip test edin, \u00f6zellikle kald\u0131r\u0131lan API\u2019leri kullanan b\u00f6l\u00fcmleri kontrol edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> <li>Yeni \u00f6zellikleri (pattern matching, sealed classes, yeni GC) kademeli olarak entegre edin.</li> </ul>"},{"location":"java/17/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri ve dil \u00f6zelliklerini kullanmaya \u00f6zen g\u00f6sterin.</li> <li>Java 17 LTS oldu\u011fu i\u00e7in uzun s\u00fcreli projelerde tercih edilebilir.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/17/summary/","title":"Java 17 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 17, 2021 y\u0131l\u0131nda LTS (Long Term Support) s\u00fcr\u00fcm\u00fc olarak yay\u0131nland\u0131. Java 11\u2019den sonra gelen en \u00f6nemli LTS s\u00fcr\u00fcm\u00fcd\u00fcr ve dildeki modernle\u015fme, performans ve g\u00fcvenlik iyile\u015ftirmeleriyle \u00f6ne \u00e7\u0131kar.</p>"},{"location":"java/17/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Pattern Matching (Desen E\u015fleme) ve sealed classes gibi dil geli\u015ftirmeleri</li> <li>Yeni Garbage Collector se\u00e7enekleri ve performans iyile\u015ftirmeleri</li> <li>JEP\u2019lerle gelen API ve platform geli\u015ftirmeleri</li> <li>Deprecation ve kald\u0131r\u0131lan eski \u00f6zellikler</li> <li>G\u00fcvenlik ve platform g\u00fcncellemeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/21/examples/","title":"Java 21 - Kod \u00d6rnekleri","text":""},{"location":"java/21/examples/#1-record-patterns-ve-pattern-matching-for-switch","title":"1. Record Patterns ve Pattern Matching for switch","text":"<pre><code>record Kisi(String ad, int yas) {}\nObject obj = new Kisi(\"Ali\", 30);\nswitch (obj) {\n    case Kisi(String ad, int yas) -&gt; System.out.println(ad + \" - \" + yas);\n    default -&gt; System.out.println(\"Bilinmeyen tip\");\n}\n</code></pre>"},{"location":"java/21/examples/#2-virtual-threads-project-loom","title":"2. Virtual Threads (Project Loom)","text":"<pre><code>Thread.startVirtualThread(() -&gt; System.out.println(\"Sanal thread \u00e7al\u0131\u015ft\u0131!\"));\n</code></pre>"},{"location":"java/21/examples/#3-string-templates","title":"3. String Templates","text":"<pre><code>// Java 21 ile string template \u00f6rne\u011fi (preview)\nString ad = \"Ali\";\nint yas = 30;\nString bilgi = STR.\"Ad: \\{ad}, Ya\u015f: \\{yas}\";\n</code></pre>"},{"location":"java/21/examples/#4-foreign-function-memory-api","title":"4. Foreign Function &amp; Memory API","text":"<p>Java d\u0131\u015f\u0131 k\u00fct\u00fcphanelerle ve bellekle g\u00fcvenli etkile\u015fim i\u00e7in yeni API.</p> <p>Daha fazla detay ve \u00f6rnek i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/21/features/","title":"Java 21 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/21/features/#1-record-patterns-ve-pattern-matching-for-switch","title":"1. Record Patterns ve Pattern Matching for switch","text":""},{"location":"java/21/features/#11-record-patterns","title":"1.1 Record Patterns","text":"<ul> <li>Record veri tiplerinde desen e\u015fleme ile alanlara do\u011frudan eri\u015fim.</li> <li>Kodun okunabilirli\u011fini ve g\u00fcvenli\u011fini art\u0131r\u0131r.</li> </ul>"},{"location":"java/21/features/#12-pattern-matching-for-switch","title":"1.2 Pattern Matching for switch","text":"<ul> <li>Switch ifadelerinde geli\u015fmi\u015f desen e\u015fleme.</li> <li>Farkl\u0131 veri tiplerinin ayr\u0131\u015ft\u0131r\u0131lmas\u0131 ve i\u015flenmesi kolayla\u015f\u0131r.</li> </ul>"},{"location":"java/21/features/#2-virtual-threads-project-loom","title":"2. Virtual Threads (Project Loom)","text":""},{"location":"java/21/features/#21-hafif-ve-yuksek-olceklenebilir-threadler","title":"2.1 Hafif ve Y\u00fcksek \u00d6l\u00e7eklenebilir Thread\u2019ler","text":"<ul> <li>Binlerce thread\u2019i d\u00fc\u015f\u00fck maliyetle ba\u015flatma.</li> <li>Geleneksel thread\u2019lere g\u00f6re daha az kaynak t\u00fcketimi.</li> <li>Paralel ve e\u015fzamanl\u0131 programlamada devrim.</li> </ul>"},{"location":"java/21/features/#22-kullanm-senaryosu","title":"2.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Y\u00fcksek trafikli sunucular, mikroservisler, reaktif olmayan IO i\u015flemleri.</li> </ul>"},{"location":"java/21/features/#3-string-templates","title":"3. String Templates","text":""},{"location":"java/21/features/#31-guvenli-ve-okunabilir-string-birlestirme","title":"3.1 G\u00fcvenli ve Okunabilir String Birle\u015ftirme","text":"<ul> <li>G\u00f6m\u00fcl\u00fc ifadelerle dinamik string olu\u015fturma.</li> <li>SQL, JSON gibi d\u0131\u015f formatlara g\u00fcvenli veri g\u00f6mme.</li> <li>Compile-time kontrol ve otomatik escaping.</li> </ul>"},{"location":"java/21/features/#4-foreign-function-memory-api-ffm","title":"4. Foreign Function &amp; Memory API (FFM)","text":""},{"location":"java/21/features/#41-native-kod-ile-etkilesim","title":"4.1 Native Kod ile Etkile\u015fim","text":"<ul> <li>JNI\u2019ye g\u00f6re daha g\u00fcvenli ve kolay native k\u00fct\u00fcphane \u00e7a\u011fr\u0131lar\u0131.</li> <li>C/C++ fonksiyonlar\u0131na do\u011frudan eri\u015fim.</li> </ul>"},{"location":"java/21/features/#42-bellek-yonetimi","title":"4.2 Bellek Y\u00f6netimi","text":"<ul> <li>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma.</li> <li>Zero-copy veri payla\u015f\u0131m\u0131 ve y\u00fcksek performans.</li> </ul>"},{"location":"java/21/features/#5-platform-guvenligi-ve-performans","title":"5. Platform G\u00fcvenli\u011fi ve Performans","text":""},{"location":"java/21/features/#51-gc-ve-memory-leak-tespiti","title":"5.1 GC ve Memory Leak Tespiti","text":"<ul> <li>Yeni GC se\u00e7enekleri ve memory leak tespiti.</li> <li>TLS/SSL g\u00fcncellemeleri, g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n kapat\u0131lmas\u0131.</li> </ul>"},{"location":"java/21/features/#6-preview-ve-incubator-ozellikler","title":"6. Preview ve Incubator \u00d6zellikler","text":""},{"location":"java/21/features/#61-yeni-dil-ve-api-denemeleri","title":"6.1 Yeni Dil ve API Denemeleri","text":"<ul> <li>unnamed variables, unnamed patterns gibi gelece\u011fe y\u00f6nelik dil denemeleri.</li> <li>Gelecekteki Java s\u00fcr\u00fcmlerine haz\u0131rl\u0131k.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/21/migration/","title":"Java 21 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/21/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Java 17\u2019den Java 21\u2019e ge\u00e7erken baz\u0131 eski API\u2019ler ve mod\u00fcller kald\u0131r\u0131lm\u0131\u015f veya g\u00fcncellenmi\u015ftir.</li> <li>Record patterns, virtual threads gibi yeni dil \u00f6zellikleri i\u00e7in derleyici ve IDE g\u00fcncel olmal\u0131d\u0131r.</li> <li>Foreign Function &amp; Memory API art\u0131k kararl\u0131, eski JNI kodlar\u0131yla entegrasyon g\u00f6zden ge\u00e7irilmeli.</li> </ul>"},{"location":"java/21/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Kodunuzu Java 21 ile derleyip test edin, \u00f6zellikle kald\u0131r\u0131lan veya de\u011fi\u015fen API\u2019leri kullanan b\u00f6l\u00fcmleri kontrol edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> <li>Yeni \u00f6zellikleri (record patterns, virtual threads, string templates) kademeli olarak entegre edin.</li> </ul>"},{"location":"java/21/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri ve dil \u00f6zelliklerini kullanmaya \u00f6zen g\u00f6sterin.</li> <li>Java 21 LTS oldu\u011fu i\u00e7in uzun s\u00fcreli projelerde tercih edilebilir.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/21/summary/","title":"Java 21 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 21, 2023 y\u0131l\u0131nda yay\u0131nlanan LTS (Long Term Support) s\u00fcr\u00fcm\u00fcd\u00fcr. Modern dil \u00f6zellikleri, performans ve g\u00fcvenlik iyile\u015ftirmeleriyle Java ekosisteminin g\u00fcncel ihtiya\u00e7lar\u0131na cevap verir.</p>"},{"location":"java/21/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Record Patterns ve Pattern Matching for switch\u2019in tamamlanmas\u0131</li> <li>Virtual Threads (Project Loom) ile y\u00fcksek \u00f6l\u00e7eklenebilirlik</li> <li>String Templates ve yeni dil geli\u015ftirmeleri</li> <li>Foreign Function &amp; Memory API\u2019nin kararl\u0131 hale gelmesi</li> <li>Platform g\u00fcvenli\u011fi ve performans g\u00fcncellemeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/24/examples/","title":"Java 24 - Kod \u00d6rnekleri ve Kullan\u0131m Senaryolar\u0131","text":""},{"location":"java/24/examples/#1-scoped-values-ve-structured-concurrency","title":"1. Scoped Values ve Structured Concurrency","text":""},{"location":"java/24/examples/#11-scoped-values-kullanm","title":"1.1 Scoped Values Kullan\u0131m\u0131","text":"<pre><code>import java.lang.ScopedValue;\n\npublic class ScopedValueExample {\n    static final ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();\n\n    public static void main(String[] args) {\n        ScopedValue.where(USER, \"admin\").run(() -&gt; {\n            System.out.println(\"Kullan\u0131c\u0131: \" + USER.get());\n        });\n    }\n}\n</code></pre> <p>ScopedValue ile thread-local de\u011fi\u015fkenlerin g\u00fcvenli y\u00f6netimi.</p>"},{"location":"java/24/examples/#12-structured-concurrency-ile-paralel-gorevler","title":"1.2 Structured Concurrency ile Paralel G\u00f6revler","text":"<pre><code>import java.util.concurrent.StructuredTaskScope;\n\ntry (var scope = new StructuredTaskScope.ShutdownOnFailure()) {\n    scope.fork(() -&gt; fetchData());\n    scope.fork(() -&gt; processData());\n    scope.join();\n}\n</code></pre> <p>Alt g\u00f6revlerin birlikte ba\u015flat\u0131l\u0131p, birlikte y\u00f6netilmesi.</p>"},{"location":"java/24/examples/#2-string-templates","title":"2. String Templates","text":"<pre><code>String ad = \"Ali\";\nint yas = 30;\nString bilgi = STR.\"Ad: \\{ad}, Ya\u015f: \\{yas}\";\nSystem.out.println(bilgi);\n</code></pre> <p>G\u00fcvenli ve okunabilir string birle\u015ftirme.</p>"},{"location":"java/24/examples/#3-class-file-api-ile-bytecode-analizi","title":"3. Class-File API ile Bytecode Analizi","text":"<pre><code>import java.lang.classfile.ClassFile;\nimport java.nio.file.Path;\n\nClassFile cf = ClassFile.read(Path.of(\"MyClass.class\"));\ncf.methods().forEach(m -&gt; System.out.println(m.name()));\n</code></pre> <p>Bytecode \u00fczerinde programatik analiz ve i\u015flem.</p>"},{"location":"java/24/examples/#4-foreign-function-memory-api-ffm","title":"4. Foreign Function &amp; Memory API (FFM)","text":""},{"location":"java/24/examples/#41-native-fonksiyon-cagrs","title":"4.1 Native Fonksiyon \u00c7a\u011fr\u0131s\u0131","text":"<pre><code>import java.foreign.*;\nimport java.foreign.memory.*;\n\ntry (MemorySegment segment = MemorySegment.allocateNative(100)) {\n    // Native k\u00fct\u00fcphane ile \u00e7al\u0131\u015fma \u00f6rne\u011fi\n}\n</code></pre>"},{"location":"java/24/examples/#42-bellek-yonetimi","title":"4.2 Bellek Y\u00f6netimi","text":"<p>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma ve veri payla\u015f\u0131m\u0131.</p>"},{"location":"java/24/examples/#5-virtual-threads-ile-yuksek-olceklenebilirlik","title":"5. Virtual Threads ile Y\u00fcksek \u00d6l\u00e7eklenebilirlik","text":"<pre><code>Runnable task = () -&gt; System.out.println(\"Sanal thread!\");\nThread.startVirtualThread(task);\n</code></pre> <p>Binlerce thread\u2019i d\u00fc\u015f\u00fck maliyetle ba\u015flatma.</p>"},{"location":"java/24/examples/#6-preview-ve-incubator-ozellikler","title":"6. Preview ve Incubator \u00d6zellikler","text":"<pre><code>// Unnamed variables (preview)\n(int _, int y) -&gt; y * 2;\n</code></pre> <p>Yeni dil denemeleri ve gelece\u011fe haz\u0131rl\u0131k.</p> <p>Her \u00f6rne\u011fin detayl\u0131 a\u00e7\u0131klamalar\u0131 ve kullan\u0131m ipu\u00e7lar\u0131 i\u00e7in features.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/24/features/","title":"Java 24 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/24/features/#1-scoped-values-ve-structured-concurrency","title":"1. Scoped Values ve Structured Concurrency","text":""},{"location":"java/24/features/#11-scoped-values","title":"1.1 Scoped Values","text":"<ul> <li>Thread-local de\u011fi\u015fkenlerin daha g\u00fcvenli ve kontroll\u00fc y\u00f6netimi.</li> <li>\u00d6zellikle virtual threads ile birlikte veri izolasyonu sa\u011flar.</li> <li>Yan etkisiz, fonksiyonel programlama ile uyumlu.</li> </ul>"},{"location":"java/24/features/#12-structured-concurrency","title":"1.2 Structured Concurrency","text":"<ul> <li>Paralel i\u015flemlerin ya\u015fam d\u00f6ng\u00fcs\u00fcn\u00fc y\u00f6netmek i\u00e7in yeni bir model.</li> <li>Alt g\u00f6revlerin ana g\u00f6revle birlikte ba\u015flat\u0131l\u0131p, birlikte sonland\u0131r\u0131lmas\u0131.</li> <li>Hatalar\u0131n ve istisnalar\u0131n daha kolay y\u00f6netilmesi.</li> </ul>"},{"location":"java/24/features/#2-string-templates-kararl","title":"2. String Templates (Kararl\u0131)","text":"<ul> <li>String birle\u015ftirme ve g\u00f6m\u00fcl\u00fc ifadeler i\u00e7in yeni, g\u00fcvenli ve okunabilir bir s\u00f6zdizimi.</li> <li>SQL, JSON gibi d\u0131\u015f formatlara g\u00fcvenli veri g\u00f6mme.</li> <li>Compile-time kontrol ve otomatik escaping.</li> </ul>"},{"location":"java/24/features/#3-class-file-api","title":"3. Class-File API","text":"<ul> <li>Bytecode \u00fczerinde programatik de\u011fi\u015fiklik ve analiz imkan\u0131.</li> <li>Derleyici ve ara\u00e7 geli\u015ftiriciler i\u00e7in d\u00fc\u015f\u00fck seviyede kontrol.</li> <li>Reflection\u2019dan daha h\u0131zl\u0131 ve g\u00fcvenli.</li> </ul>"},{"location":"java/24/features/#4-foreign-function-memory-api-ffm","title":"4. Foreign Function &amp; Memory API (FFM)","text":""},{"location":"java/24/features/#41-native-kod-ile-etkilesim","title":"4.1 Native Kod ile Etkile\u015fim","text":"<ul> <li>JNI\u2019ye g\u00f6re daha g\u00fcvenli ve kolay native k\u00fct\u00fcphane \u00e7a\u011fr\u0131lar\u0131.</li> <li>C/C++ fonksiyonlar\u0131na do\u011frudan eri\u015fim.</li> </ul>"},{"location":"java/24/features/#42-bellek-yonetimi","title":"4.2 Bellek Y\u00f6netimi","text":"<ul> <li>Java heap d\u0131\u015f\u0131 bellekle g\u00fcvenli \u00e7al\u0131\u015fma.</li> <li>Zero-copy veri payla\u015f\u0131m\u0131 ve y\u00fcksek performans.</li> </ul>"},{"location":"java/24/features/#5-virtual-threads-ve-paralel-programlama","title":"5. Virtual Threads ve Paralel Programlama","text":"<ul> <li>Binlerce thread\u2019i d\u00fc\u015f\u00fck maliyetle ba\u015flatma imkan\u0131.</li> <li>Y\u00fcksek \u00f6l\u00e7eklenebilirlik ve reaktif programlamaya alternatif.</li> </ul>"},{"location":"java/24/features/#6-platform-guvenligi-ve-performans","title":"6. Platform G\u00fcvenli\u011fi ve Performans","text":"<ul> <li>Yeni GC iyile\u015ftirmeleri, memory leak tespiti.</li> <li>G\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131n kapat\u0131lmas\u0131, TLS/SSL g\u00fcncellemeleri.</li> </ul>"},{"location":"java/24/features/#7-preview-ve-incubator-ozellikler","title":"7. Preview ve Incubator \u00d6zellikler","text":"<ul> <li>Yeni dil ve API denemeleri (\u00f6rn. unnamed variables, unnamed patterns).</li> <li>Gelecekteki Java s\u00fcr\u00fcmlerine haz\u0131rl\u0131k.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m senaryolar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/24/migration/","title":"Java 24 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/24/migration/#1-surum-gecisinde-dikkat-edilmesi-gerekenler","title":"1. S\u00fcr\u00fcm Ge\u00e7i\u015finde Dikkat Edilmesi Gerekenler","text":"<ul> <li>Scoped Values, Structured Concurrency ve Virtual Threads gibi yeni paralel programlama modelleri eski kodlarla uyumlu \u00e7al\u0131\u015f\u0131r, ancak kodunuzu bu yeni modellere g\u00f6re refactor etmek faydal\u0131 olur.</li> <li>String Templates ve Class-File API gibi yeni dil ve platform \u00f6zellikleri, eski projelerde kullan\u0131lmak istenirse derleyici ve IDE g\u00fcncellenmelidir.</li> <li>Foreign Function &amp; Memory API\u2019deki de\u011fi\u015fiklikler, JNI veya eski native entegrasyon kullanan projelerde dikkatle incelenmeli.</li> </ul>"},{"location":"java/24/migration/#2-uyumluluk-ve-geriye-donuk-destek","title":"2. Uyumluluk ve Geriye D\u00f6n\u00fck Destek","text":"<ul> <li>Java 24, \u00f6nceki LTS s\u00fcr\u00fcmlerinden (17, 21) gelen kodlar\u0131 b\u00fcy\u00fck oranda destekler.</li> <li>Kald\u0131r\u0131lan veya deprecated edilen API\u2019ler i\u00e7in kodunuzu g\u00f6zden ge\u00e7irin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> </ul>"},{"location":"java/24/migration/#3-yeni-ozelliklerin-entegrasyonu","title":"3. Yeni \u00d6zelliklerin Entegrasyonu","text":"<ul> <li>Scoped Values ve Structured Concurrency ile thread y\u00f6netimini sadele\u015ftirin.</li> <li>String Templates ile veri g\u00f6mme i\u015flemlerini g\u00fcvenli hale getirin.</li> <li>Class-File API ile derleyici ve ara\u00e7 geli\u015ftirme s\u00fcre\u00e7lerinizi modernize edin.</li> <li>FFM API ile native entegrasyonlar\u0131 daha g\u00fcvenli ve h\u0131zl\u0131 y\u00f6netin.</li> </ul>"},{"location":"java/24/migration/#4-ipuclar-ve-en-iyi-pratikler","title":"4. \u0130pu\u00e7lar\u0131 ve En \u0130yi Pratikler","text":"<ul> <li>Kodunuzu Java 24 ile derleyip test edin, \u00f6zellikle yeni API\u2019leri ve dil \u00f6zelliklerini kullan\u0131rken.</li> <li>Eski kodlar\u0131 refactor ederken yeni \u00f6zellikleri kademeli olarak entegre edin.</li> <li>Oracle ve OpenJDK s\u00fcr\u00fcmleri aras\u0131nda lisans ve da\u011f\u0131t\u0131m farklar\u0131n\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun.</li> <li>Preview ve incubator \u00f6zellikleri kullan\u0131rken, ilerideki s\u00fcr\u00fcmlerde de\u011fi\u015fiklik olabilece\u011fini unutmay\u0131n.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine ve Java 24 d\u00f6k\u00fcmantasyonuna bakabilirsiniz.</p>"},{"location":"java/24/summary/","title":"Java 24 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 24, 2024 y\u0131l\u0131nda yay\u0131nlanan en g\u00fcncel s\u00fcr\u00fcmd\u00fcr. Modern yaz\u0131l\u0131m geli\u015ftirme ihtiya\u00e7lar\u0131na cevap veren, performans, g\u00fcvenlik ve dil \u00f6zelliklerinde \u00f6nemli yenilikler sunar. \u00d6zellikle platformlar aras\u0131 ta\u015f\u0131nabilirlik, bulut-native uygulamalar ve y\u00fcksek \u00f6l\u00e7eklenebilirlik odak noktas\u0131d\u0131r.</p>"},{"location":"java/24/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Scoped Values ve Structured Concurrency ile geli\u015fmi\u015f paralel programlama</li> <li>String Templates\u2019in kararl\u0131 hale gelmesi</li> <li>Class-File API ile dinamik bytecode i\u015flemleri</li> <li>Foreign Function &amp; Memory API\u2019de yeni geli\u015ftirmeler</li> <li>Platform g\u00fcvenli\u011fi ve performans g\u00fcncellemeleri</li> <li>Preview ve incubator \u00f6zelliklerle gelece\u011fe y\u00f6nelik dil denemeleri</li> </ul> <p>Detayl\u0131 teknik ba\u015fl\u0131klar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"java/8/examples/","title":"Java 8 - Kod \u00d6rnekleri","text":""},{"location":"java/8/examples/#1-lambda-ifadeleri-ile-liste-isleme","title":"1. Lambda \u0130fadeleri ile Liste \u0130\u015fleme","text":"<pre><code>List&lt;String&gt; isimler = Arrays.asList(\"Ali\", \"Veli\", \"Ay\u015fe\");\nisimler.forEach(isim -&gt; System.out.println(isim));\n</code></pre>"},{"location":"java/8/examples/#2-stream-api-ile-filtreleme-ve-toplama","title":"2. Stream API ile Filtreleme ve Toplama","text":"<pre><code>List&lt;Integer&gt; sayilar = Arrays.asList(1, 2, 3, 4, 5, 6);\nint toplam = sayilar.stream()\n    .filter(sayi -&gt; sayi % 2 == 0)\n    .mapToInt(Integer::intValue)\n    .sum();\nSystem.out.println(\"\u00c7ift say\u0131lar\u0131n toplam\u0131: \" + toplam);\n</code></pre>"},{"location":"java/8/examples/#3-yeni-tarihzaman-api-kullanm","title":"3. Yeni Tarih/Zaman API Kullan\u0131m\u0131","text":"<pre><code>import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nLocalDate bugun = LocalDate.now();\nSystem.out.println(bugun.format(DateTimeFormatter.ofPattern(\"dd.MM.yyyy\")));\n</code></pre>"},{"location":"java/8/examples/#4-optional-ile-null-kontrolu","title":"4. Optional ile Null Kontrol\u00fc","text":"<pre><code>Optional&lt;String&gt; ad = Optional.ofNullable(null);\nSystem.out.println(ad.orElse(\"Bilinmiyor\"));\n</code></pre>"},{"location":"java/8/examples/#5-varsaylan-arayuz-metodu","title":"5. Varsay\u0131lan Aray\u00fcz Metodu","text":"<pre><code>interface Selam {\n    default void merhaba() { System.out.println(\"Merhaba!\"); }\n}\n</code></pre> <p>Daha fazla \u00f6rnek ve a\u00e7\u0131klama i\u00e7in di\u011fer dosyalara bak\u0131n\u0131z.</p>"},{"location":"java/8/features/","title":"Java 8 - Yeni \u00d6zellikler ve Derinlemesine A\u00e7\u0131klamalar","text":""},{"location":"java/8/features/#1-lambda-ifadeleri","title":"1. Lambda \u0130fadeleri","text":""},{"location":"java/8/features/#11-fonksiyonel-programlama-destegi","title":"1.1 Fonksiyonel Programlama Deste\u011fi","text":"<ul> <li>Fonksiyonlar\u0131 de\u011fi\u015fken olarak kullanabilme.</li> <li>Kodun daha k\u0131sa, okunabilir ve fonksiyonel olmas\u0131n\u0131 sa\u011flar.</li> <li>\u00d6zellikle koleksiyon i\u015flemlerinde b\u00fcy\u00fck kolayl\u0131k.</li> </ul>"},{"location":"java/8/features/#12-kullanm-senaryosu","title":"1.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Event handling, callback, koleksiyon i\u015flemleri.</li> </ul>"},{"location":"java/8/features/#2-stream-api","title":"2. Stream API","text":""},{"location":"java/8/features/#21-fonksiyonel-koleksiyon-islemleri","title":"2.1 Fonksiyonel Koleksiyon \u0130\u015flemleri","text":"<ul> <li>Map, filter, reduce gibi fonksiyonel i\u015flemler.</li> <li>Zincirleme veri i\u015fleme ve pipeline olu\u015fturma.</li> </ul>"},{"location":"java/8/features/#22-paralel-stream","title":"2.2 Paralel Stream","text":"<ul> <li>B\u00fcy\u00fck veri setlerinde paralel i\u015fleme ile performans art\u0131\u015f\u0131.</li> <li>Thread y\u00f6netimi otomatik olarak yap\u0131l\u0131r.</li> </ul>"},{"location":"java/8/features/#3-yeni-tarihzaman-apisi-javatime","title":"3. Yeni Tarih/Zaman API\u2019si (java.time)","text":""},{"location":"java/8/features/#31-modern-ve-guvenli-tarihzaman-islemleri","title":"3.1 Modern ve G\u00fcvenli Tarih/Zaman \u0130\u015flemleri","text":"<ul> <li>Immutable ve thread-safe tarih/zaman nesneleri.</li> <li>LocalDate, LocalTime, ZonedDateTime gibi yeni s\u0131n\u0131flar.</li> </ul>"},{"location":"java/8/features/#32-kullanm-senaryosu","title":"3.2 Kullan\u0131m Senaryosu","text":"<ul> <li>Zaman dilimi y\u00f6netimi, tarih aritmeti\u011fi, formatlama/parsing.</li> </ul>"},{"location":"java/8/features/#4-varsaylan-ve-statik-arayuz-metotlar","title":"4. Varsay\u0131lan ve Statik Aray\u00fcz Metotlar\u0131","text":""},{"location":"java/8/features/#41-default-methods","title":"4.1 Default Methods","text":"<ul> <li>Aray\u00fczlerde g\u00f6vdeli metot tan\u0131mlama.</li> <li>Geriye d\u00f6n\u00fck uyumluluk ve API evrimi.</li> </ul>"},{"location":"java/8/features/#42-static-methods","title":"4.2 Static Methods","text":"<ul> <li>Aray\u00fczde yard\u0131mc\u0131 metotlar\u0131n do\u011frudan tan\u0131mlanabilmesi.</li> </ul>"},{"location":"java/8/features/#5-optional-snf","title":"5. Optional S\u0131n\u0131f\u0131","text":""},{"location":"java/8/features/#51-null-guvenligi","title":"5.1 Null G\u00fcvenli\u011fi","text":"<ul> <li>NullPointerException riskini azalt\u0131r.</li> <li>De\u011ferin olup olmad\u0131\u011f\u0131n\u0131 fonksiyonel olarak kontrol etme.</li> </ul>"},{"location":"java/8/features/#52-kullanm-senaryosu","title":"5.2 Kullan\u0131m Senaryosu","text":"<ul> <li>API d\u00f6n\u00fc\u015flerinde null yerine Optional kullan\u0131m\u0131.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler ve kullan\u0131m detaylar\u0131 i\u00e7in examples.md dosyas\u0131na bak\u0131n\u0131z.</p>"},{"location":"java/8/migration/","title":"Java 8 - Ge\u00e7i\u015f ve Uyumluluk Notlar\u0131","text":""},{"location":"java/8/migration/#geciste-dikkat-edilmesi-gerekenler","title":"Ge\u00e7i\u015fte Dikkat Edilmesi Gerekenler","text":"<ul> <li>Lambda ifadeleri ve Stream API, eski kodlarla uyumlu \u00e7al\u0131\u015f\u0131r ancak baz\u0131 API\u2019lerde davran\u0131\u015f de\u011fi\u015fiklikleri olabilir.</li> <li>Eski tarih/zaman API\u2019si (java.util.Date, Calendar) yerine yeni java.time API\u2019si \u00f6nerilir.</li> <li>Varsay\u0131lan ve statik aray\u00fcz metotlar\u0131, aray\u00fczlerin geriye d\u00f6n\u00fck uyumlulu\u011funu etkileyebilir.</li> <li>Optional kullan\u0131m\u0131 null kontrollerini daha g\u00fcvenli hale getirir, ancak eski kodlarda dikkatli entegrasyon gerekir.</li> </ul>"},{"location":"java/8/migration/#uyumluluk-notlar","title":"Uyumluluk Notlar\u0131","text":"<ul> <li>Derleyici ve \u00e7al\u0131\u015fma zaman\u0131 olarak minimum Java 8 gereklidir.</li> <li>Lambda ve method reference kullan\u0131m\u0131, eski IDE ve ara\u00e7larda desteklenmeyebilir.</li> <li>Paralel stream kullan\u0131m\u0131, thread-safe olmayan koleksiyonlarda beklenmeyen sonu\u00e7lara yol a\u00e7abilir.</li> </ul>"},{"location":"java/8/migration/#ipuclar","title":"\u0130pu\u00e7lar\u0131","text":"<ul> <li>Kodunuzu Java 8 ile derleyip test edin.</li> <li>Eski kodlar\u0131 refactor ederken yeni API\u2019leri kademeli olarak entegre edin.</li> <li>build ara\u00e7lar\u0131n\u0131z\u0131 (Maven, Gradle) ve ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131z\u0131 g\u00fcncel tutun.</li> </ul> <p>Daha fazla detay i\u00e7in Oracle\u2019\u0131n resmi migration rehberine bakabilirsiniz.</p>"},{"location":"java/8/summary/","title":"Java 8 - Genel Bak\u0131\u015f ve \u00d6nemli De\u011fi\u015fiklikler","text":"<p>Java 8, 2014 y\u0131l\u0131nda yay\u0131nland\u0131 ve Java dilinde devrim niteli\u011finde yenilikler getirdi. Lambda ifadeleri, Stream API, yeni tarih/zaman API\u2019si gibi modern programlama yakla\u015f\u0131mlar\u0131n\u0131 destekleyen \u00f6zelliklerle Java\u2019n\u0131n esnekli\u011fi ve g\u00fcc\u00fc artt\u0131.</p>"},{"location":"java/8/summary/#one-ckan-baslklar","title":"\u00d6ne \u00c7\u0131kan Ba\u015fl\u0131klar","text":"<ul> <li>Lambda ifadeleri ve fonksiyonel programlama deste\u011fi</li> <li>Stream API ile koleksiyonlar \u00fczerinde fonksiyonel i\u015flemler</li> <li>java.time ile yeni tarih/zaman API\u2019si</li> <li>Varsay\u0131lan ve statik aray\u00fcz metotlar\u0131</li> <li>Optional s\u0131n\u0131f\u0131 ile null g\u00fcvenli\u011fi</li> <li>Paralel stream ve performans geli\u015ftirmeleri</li> </ul> <p>Detaylar ve \u00f6rnekler i\u00e7in di\u011fer dosyalara g\u00f6z atabilirsiniz.</p>"},{"location":"middleware/api-gateway/","title":"API Gateway &amp; Service Mesh","text":"<p>Bu b\u00f6l\u00fcm, API gateway ve service mesh teknolojilerinin modern da\u011f\u0131t\u0131k sistemlerdeki rol\u00fcn\u00fc, mimari desenleri ve best practices\u2019i kapsar.</p>"},{"location":"middleware/api-gateway/#1-api-gateway-nedir","title":"1. API Gateway Nedir?","text":"<ul> <li>Reverse proxy, centralized entry point, request routing</li> <li>Authentication, authorization, SSL termination</li> </ul>"},{"location":"middleware/api-gateway/#2-routing-ve-load-balancing","title":"2. Routing ve Load Balancing","text":"<ul> <li>Path-based, host-based, header-based routing</li> <li>Weighted routing, canary release, blue/green deployment</li> </ul>"},{"location":"middleware/api-gateway/#3-rate-limiting-ve-throttling","title":"3. Rate Limiting ve Throttling","text":"<ul> <li>API anahtar\u0131, JWT, IP bazl\u0131 rate limiting</li> <li>Burst control, quota management</li> </ul>"},{"location":"middleware/api-gateway/#4-authentication-ve-security","title":"4. Authentication ve Security","text":"<ul> <li>OAuth2, JWT, API key, mutual TLS</li> <li>CORS y\u00f6netimi, request validation, input sanitization</li> </ul>"},{"location":"middleware/api-gateway/#5-service-mesh-entegrasyonu","title":"5. Service Mesh Entegrasyonu","text":"<ul> <li>Istio, Linkerd, Consul Connect ile service-to-service security</li> <li>Traffic shaping, circuit breaking, distributed tracing</li> </ul>"},{"location":"middleware/api-gateway/#6-monitoring-ve-observability","title":"6. Monitoring ve Observability","text":"<ul> <li>Access log, metrics, distributed tracing</li> <li>Health checks, alerting, incident response</li> </ul>"},{"location":"middleware/api-gateway/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Gateway as single point of failure, scaling strategies</li> <li>Configuration drift, versioning, backward compatibility</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"middleware/basics/","title":"Middleware Temel Kavramlar","text":"<p>Bu b\u00f6l\u00fcm, modern kurumsal uygulamalarda kullan\u0131lan middleware teknolojilerinin temel yap\u0131 ta\u015flar\u0131n\u0131 ve entegrasyon desenlerini a\u00e7\u0131klar.</p>"},{"location":"middleware/basics/#1-middleware-nedir","title":"1. Middleware Nedir?","text":"<ul> <li>Uygulamalar aras\u0131 ileti\u015fimi ve entegrasyonu sa\u011flayan yaz\u0131l\u0131m katman\u0131</li> <li>Message broker, API gateway, service mesh, event bus gibi bile\u015fenler</li> </ul>"},{"location":"middleware/basics/#2-mesajlasma-ve-kuyruk-sistemleri","title":"2. Mesajla\u015fma ve Kuyruk Sistemleri","text":"<ul> <li>Message queue, topic, pub/sub, point-to-point</li> <li>S\u0131k kullan\u0131lan teknolojiler: RabbitMQ, Kafka, ActiveMQ, IBM MQ</li> </ul>"},{"location":"middleware/basics/#3-api-gateway-ve-service-mesh","title":"3. API Gateway ve Service Mesh","text":"<ul> <li>API y\u00f6netimi, rate limiting, authentication, routing</li> <li>Service mesh ile servisler aras\u0131 g\u00fcvenli ve g\u00f6zlemlenebilir ileti\u015fim (\u00f6rn. Istio, Linkerd)</li> </ul>"},{"location":"middleware/basics/#4-event-driven-architecture-eda","title":"4. Event-Driven Architecture (EDA)","text":"<ul> <li>Event sourcing, CQRS, event bus</li> <li>Asenkron ve reaktif sistemler i\u00e7in temel yap\u0131</li> </ul>"},{"location":"middleware/basics/#5-entegrasyon-desenleri","title":"5. Entegrasyon Desenleri","text":"<ul> <li>Enterprise Integration Patterns (EIP)</li> <li>Adapter, transformer, aggregator, splitter, filter gibi desenler</li> </ul>"},{"location":"middleware/basics/#6-middleware-guvenligi-ve-izlenebilirlik","title":"6. Middleware G\u00fcvenli\u011fi ve \u0130zlenebilirlik","text":"<ul> <li>Mesaj \u015fifreleme, kimlik do\u011frulama, audit log</li> <li>Distributed tracing, monitoring, alerting</li> </ul>"},{"location":"middleware/basics/#7-performans-ve-olceklenebilirlik","title":"7. Performans ve \u00d6l\u00e7eklenebilirlik","text":"<ul> <li>Y\u00fck dengeleme, partitioning, backpressure</li> <li>Y\u00fcksek eri\u015filebilirlik ve felaket kurtarma</li> </ul>"},{"location":"middleware/basics/#8-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Mesaj kayb\u0131, duplicate delivery, ordering problemleri</li> <li>Ba\u011flant\u0131 ve network sorunlar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"middleware/best-practices/","title":"Middleware Best Practices","text":"<p>Bu b\u00f6l\u00fcm, middleware mimarilerinde kod kalitesi, g\u00fcvenlik, performans ve s\u00fcrd\u00fcr\u00fclebilirlik i\u00e7in en iyi uygulamalar\u0131 kapsar.</p>"},{"location":"middleware/best-practices/#1-kod-kalitesi-ve-modulerlik","title":"1. Kod Kalitesi ve Mod\u00fclerlik","text":"<ul> <li>Ba\u011f\u0131ms\u0131z, loosely coupled bile\u015fenler</li> <li>Anlaml\u0131 mesaj \u015femalar\u0131, versioning ve backward compatibility</li> <li>Centralized configuration ve environment management</li> </ul>"},{"location":"middleware/best-practices/#2-guvenlik","title":"2. G\u00fcvenlik","text":"<ul> <li>Message encryption, authentication, authorization</li> <li>Secure channel (TLS), audit log, access control</li> <li>Input validation ve output encoding</li> </ul>"},{"location":"middleware/best-practices/#3-performans-ve-olceklenebilirlik","title":"3. Performans ve \u00d6l\u00e7eklenebilirlik","text":"<ul> <li>Partitioning, replication, horizontal scaling</li> <li>Backpressure y\u00f6netimi, async processing</li> <li>Resource limits, autoscaling</li> </ul>"},{"location":"middleware/best-practices/#4-monitoring-ve-observability","title":"4. Monitoring ve Observability","text":"<ul> <li>Distributed tracing, metrics, centralized logging</li> <li>Health checks, alerting, incident response</li> </ul>"},{"location":"middleware/best-practices/#5-deployment-ve-surdurulebilirlik","title":"5. Deployment ve S\u00fcrd\u00fcr\u00fclebilirlik","text":"<ul> <li>Immutable infrastructure, blue/green deployment</li> <li>Canary release, rollback stratejileri</li> <li>Versioning ve backward compatibility</li> </ul>"},{"location":"middleware/best-practices/#6-sk-karslaslan-sorunlara-yaklasm","title":"6. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlara Yakla\u015f\u0131m","text":"<ul> <li>Message loss, duplicate delivery, ordering problemleri</li> <li>Network partition, slow consumer detection</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"middleware/event-driven/","title":"Event-Driven Architecture","text":"<p>Bu b\u00f6l\u00fcm, event-driven mimarinin temel kavramlar\u0131n\u0131, avantajlar\u0131n\u0131, uygulama desenlerini ve best practices\u2019i kapsar.</p>"},{"location":"middleware/event-driven/#1-event-driven-architecture-nedir","title":"1. Event-Driven Architecture Nedir?","text":"<ul> <li>Olay tabanl\u0131 ileti\u015fim, loosely coupled sistemler</li> <li>Producer, consumer, event bus, event store kavramlar\u0131</li> </ul>"},{"location":"middleware/event-driven/#2-event-sourcing-ve-cqrs","title":"2. Event Sourcing ve CQRS","text":"<ul> <li>Event sourcing ile veri de\u011fi\u015fikliklerinin event olarak saklanmas\u0131</li> <li>Command Query Responsibility Segregation (CQRS) ile okuma/yazma ayr\u0131m\u0131</li> </ul>"},{"location":"middleware/event-driven/#3-event-bus-ve-messaging","title":"3. Event Bus ve Messaging","text":"<ul> <li>Event bus, message broker, pub/sub, topic, queue</li> <li>Kafka, RabbitMQ, ActiveMQ ile event-driven uygulama geli\u015ftirme</li> </ul>"},{"location":"middleware/event-driven/#4-async-processing-ve-scalability","title":"4. Async Processing ve Scalability","text":"<ul> <li>Asenkron event i\u015fleme, worker pool, backpressure y\u00f6netimi</li> <li>Event replay, idempotency, ordering</li> </ul>"},{"location":"middleware/event-driven/#5-integration-patterns","title":"5. Integration Patterns","text":"<ul> <li>Saga pattern, process manager, compensating transaction</li> <li>Event choreography vs orchestration</li> </ul>"},{"location":"middleware/event-driven/#6-monitoring-ve-observability","title":"6. Monitoring ve Observability","text":"<ul> <li>Event tracing, distributed logging, metrics</li> <li>Dead letter queue, alerting, event replay</li> </ul>"},{"location":"middleware/event-driven/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Event schema versioning, backward compatibility</li> <li>Event loss, duplicate event, eventual consistency</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"middleware/message-brokers/","title":"Message Brokers","text":"<p>Bu b\u00f6l\u00fcm, modern kurumsal uygulamalarda kullan\u0131lan mesajla\u015fma altyap\u0131lar\u0131 ve message broker teknolojilerini kapsar.</p>"},{"location":"middleware/message-brokers/#1-message-broker-nedir","title":"1. Message Broker Nedir?","text":"<ul> <li>Uygulamalar aras\u0131 asenkron ileti\u015fim ve entegrasyon</li> <li>Queue, topic, pub/sub, point-to-point kavramlar\u0131</li> </ul>"},{"location":"middleware/message-brokers/#2-rabbitmq","title":"2. RabbitMQ","text":"<ul> <li>AMQP protokol\u00fc, exchange, queue, binding</li> <li>Routing, dead letter queue, priority queue</li> <li>Management UI, monitoring, clustering</li> </ul>"},{"location":"middleware/message-brokers/#3-apache-kafka","title":"3. Apache Kafka","text":"<ul> <li>Distributed commit log, topic, partition, consumer group</li> <li>High throughput, scalability, event streaming</li> <li>Exactly-once delivery, retention, compaction</li> </ul>"},{"location":"middleware/message-brokers/#4-activemq-ve-ibm-mq","title":"4. ActiveMQ ve IBM MQ","text":"<ul> <li>JMS deste\u011fi, persistent/non-persistent delivery</li> <li>Transaction management, message selector</li> <li>Enterprise integration ve legacy sistemlerle uyum</li> </ul>"},{"location":"middleware/message-brokers/#5-delivery-guarantees-ve-mesaj-guvenligi","title":"5. Delivery Guarantees ve Mesaj G\u00fcvenli\u011fi","text":"<ul> <li>At least once, at most once, exactly once delivery</li> <li>Message ordering, idempotency, duplicate detection</li> </ul>"},{"location":"middleware/message-brokers/#6-olceklenebilirlik-ve-yuksek-erisilebilirlik","title":"6. \u00d6l\u00e7eklenebilirlik ve Y\u00fcksek Eri\u015filebilirlik","text":"<ul> <li>Partitioning, replication, failover, clustering</li> <li>Load balancing, horizontal scaling</li> </ul>"},{"location":"middleware/message-brokers/#7-monitoring-ve-troubleshooting","title":"7. Monitoring ve Troubleshooting","text":"<ul> <li>Metrics, alerting, dead letter queue analizi</li> <li>Message tracing, slow consumer detection</li> </ul>"},{"location":"middleware/message-brokers/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Backpressure y\u00f6netimi, message size limiti</li> <li>Network partition, message loss, recovery stratejileri</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, mimari diyagramlar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"middleware/troubleshooting/","title":"Middleware Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, middleware mimarilerinde s\u0131k kar\u015f\u0131la\u015f\u0131lan sorunlar\u0131n tespiti, analizi ve \u00e7\u00f6z\u00fcm y\u00f6ntemlerini kapsar.</p>"},{"location":"middleware/troubleshooting/#1-message-broker-sorunlar","title":"1. Message Broker Sorunlar\u0131","text":"<ul> <li>Message loss, duplicate delivery, ordering problemleri</li> <li>Dead letter queue, slow consumer detection, backpressure</li> </ul>"},{"location":"middleware/troubleshooting/#2-api-gateway-ve-routing-problemleri","title":"2. API Gateway ve Routing Problemleri","text":"<ul> <li>Routing hatalar\u0131, path/host-based routing sorunlar\u0131</li> <li>Rate limiting, authentication, CORS hatalar\u0131</li> </ul>"},{"location":"middleware/troubleshooting/#3-event-driven-architecture-sorunlar","title":"3. Event-Driven Architecture Sorunlar\u0131","text":"<ul> <li>Event loss, duplicate event, eventual consistency</li> <li>Event replay, schema versioning, backward compatibility</li> </ul>"},{"location":"middleware/troubleshooting/#4-integration-ve-adapter-problemleri","title":"4. Integration ve Adapter Problemleri","text":"<ul> <li>Adapter/transformer hatalar\u0131, message conversion sorunlar\u0131</li> <li>Integration flow, error channel, retry mekanizmas\u0131</li> </ul>"},{"location":"middleware/troubleshooting/#5-scaling-ve-high-availability-sorunlar","title":"5. Scaling ve High Availability Sorunlar\u0131","text":"<ul> <li>Partitioning, replication, failover hatalar\u0131</li> <li>Load balancing, network partition, split-brain</li> </ul>"},{"location":"middleware/troubleshooting/#6-monitoring-ve-observability-sorunlar","title":"6. Monitoring ve Observability Sorunlar\u0131","text":"<ul> <li>Eksik metrics, distributed tracing hatalar\u0131</li> <li>Alerting, incident response, root cause analysis</li> </ul>"},{"location":"middleware/troubleshooting/#7-deployment-ve-configuration-problemleri","title":"7. Deployment ve Configuration Problemleri","text":"<ul> <li>Configuration drift, environment variable eksikli\u011fi</li> <li>Canary release, blue/green deployment, rollback sorunlar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"reactjs/router/overview/","title":"Overview","text":"<ul> <li> <p>Reactta tek html dosyas\u0131 \u00fczerinden \u00e7ok sayfa g\u00f6sterimi yap\u0131l\u0131r (Multiple Pages in SPAs) </p> </li> <li> <p>/blog /about /user/1 vs gibi pathler parse edilerek sayfa tekrar render edilir. Bu sayfalar\u0131n hi\u00e7biri ger\u00e7ek bir html sayfas\u0131 de\u011fildir.</p> </li> </ul> <pre><code>npm install --save react-router-dom\n</code></pre> <ul> <li> <p>Route componenti \u00e7oklanarak hangi pathte ne yap\u0131laca\u011f\u0131 yaz\u0131l\u0131r. </p> </li> <li> <p>exact parametresi render methodunun sadece bu pathte \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar, e\u011fer bu path ile ba\u015flayan t\u00fcm pathlerde \u00e7al\u0131\u015fmas\u0131 gerekiyorsa bu parametre kullan\u0131lmaz.</p> </li> <li> <p>A\u015fa\u011f\u0131daki \u00f6rnekte / pathinde Home ve Home 2 g\u00f6r\u00fcn\u00fcrken /xyz pathinde sadece Home 2 g\u00f6r\u00fcn\u00fcr.</p> </li> </ul> <pre><code>import {Route} from 'react-router-dom';\n\n//...\n\n&lt;Route path=\"/\" exact render={() =&gt; &lt;h1&gt;Home&lt;/h1&gt;}/&gt;\n&lt;Route path=\"/\" render={() =&gt; &lt;h1&gt;Home 2&lt;/h1&gt;}/&gt;\n\n&lt;Route path=\"/\" exact component={ABCComponent}/&gt;\n</code></pre> <ul> <li>E\u011fer pathler <code>&lt;a&gt;</code> tagi ile tanmlan\u0131rsa browser davran\u0131\u015f\u0131 sebebiyle sayfe her seferinde komple yenilenir. bu durumun \u00fcstesinden gelmek, sadece sayfan\u0131n ilgili b\u00f6l\u00fcm\u00fcn\u00fcn yeniden y\u00fcklenmesini sa\u011flamak i\u00e7in router \u0131n <code>&lt;Link&gt;</code> componenti kullan\u0131l\u0131r. </li> </ul> <pre><code>import {Route, Link} from 'react-router-dom';\n\n//...\n\n&lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n</code></pre> <ul> <li>Routing propertileri (history, location, match) alt komponentlere de ta\u015f\u0131nmak isteniyorsa withRouter HOC(High Order Component) i eklenmesi gerekir.</li> </ul> <pre><code>import {withRouter} from 'react-router-dom';\n\n//...\n\nexport default withRouter(post);\n</code></pre> <p>Absolute Path vs Relative Path</p> <ul> <li>Absolute path <code>&lt;Link to=\"/new\" ...</code> \u015feklinde tan\u0131mlad\u0131\u011f\u0131m\u0131z her t\u0131klad\u0131\u011f\u0131nda context pathi replace eden klasik tan\u0131mlama \u015fekli <code>example.com/new</code> gibi.</li> <li>Relative path ise dinamik olu\u015fturulan ve sonuna eklenerek devam eden url anlam\u0131na geliyor. /new  pathini dinamik olarak sona eklemek istedi\u011fimiz durumlarda <code>&lt;Link to={props.match.url + '/new'}&gt;</code> \u015feklinde bir tan\u0131mlama yapabiliriz. Bu sayede <code>example.com/posts/new</code> ya da <code>example.com/all-posts/new</code> \u015feklinde pathleri de kampsam i\u00e7ine alm\u0131\u015f oluruz.</li> <li>Absolute ya da Relative daha iyidir gibi bir durum yoktur, iste\u011fe ve ihtiyaca ba\u011fl\u0131 olarak kullan\u0131l\u0131r.</li> </ul> <ul> <li>NavLink componenti Link gibi \u00e7al\u0131\u015f\u0131r fakat genellikle men\u00fc ama\u00e7l\u0131 kullan\u0131l\u0131r ve aktif olan menu linkine default olarak active class\u0131n\u0131 ekler. Bu sayede se\u00e7ili men\u00fc ile ilgili farkl\u0131 css yaz\u0131labilir. axact parametresi active class\u0131n\u0131n sadece se\u00e7ili oldu\u011fu zaman eklenmesi i\u00e7in kullan\u0131l\u0131r, kullan\u0131lmaz ise se\u00e7ili olmad\u0131\u011f\u0131nda da eklenir. activeClassName parametresi opsiyoneldir, yaz\u0131lmad\u0131\u011f\u0131nda default active class\u0131 kullan\u0131l\u0131r. activeStyle parametresiyle de inline style uygulanabilir.</li> </ul> <pre><code>&lt;NavLink \n        to=\"/\" \n        exact\n        activeClassName=\"active\"\n        activeStyle={{\n            color: '#fa923f',\n            textDecoration: 'underline'\n        }}&gt;\n    Home\n&lt;/NavLink&gt;\n</code></pre> <p>Dinamik Parametre Ge\u00e7i\u015fi</p> <p>Sayfalar aras\u0131 id* gibi dinamik parametre ge\u00e7i\u015fleri i\u00e7in,</p> <pre><code>&lt;Route path=\"/:id\" exact component={FullPost} /&gt;\n</code></pre> <p>\u015feklinde tan\u0131mlama yapmak gerekir. Bu sayfaya yap\u0131lan y\u00f6nlendirme linki</p> <pre><code>&lt;Link to={'/' + post.id}&gt;\n    &lt;Post\n        title={post.title}\n        author={post.author}\n        clicked={() =&gt; this.postSelectedHandler(post.id)} /&gt;\n&lt;/Link&gt;;\n</code></pre> <p>ya da kodlama ile y\u00f6nlendirmek yapmak i\u00e7in</p> <pre><code>this.props.history.push({pathname: '/' + id});\n//this.props.history.push('/' + id);\n</code></pre> <p>kullan\u0131labilir.</p> <p>Not: history objesi navigasyon i\u00e7in kullan\u0131l\u0131r. i\u00e7inde go, goBack, goForward, push gibi fonksiyonlar vard\u0131r.</p> <p>Parametrelere  ula\u015fmak i\u00e7in <code>match.params.paramter_name</code> kullan\u0131l\u0131r</p> <pre><code>componentDidMount () {\n    if ( this.props.match.params.id ) {\n        if ( !this.state.loadedPost \n            || (this.state.loadedPost \n                &amp;&amp; this.state.loadedPost.id !== this.props.id) ) {\n\n            axios.get( '/posts/' + this.props.match.params.id )\n                .then( response =&gt; {\n                    this.setState({ \n                        loadedPost: response.data \n                    });\n                });\n\n        }\n    }\n}\n</code></pre> <ul> <li><code>?something=somevalue</code> \u015feklinde olu\u015fan query parametrelerinin olu\u015fturulmas\u0131 ve parse edilmesi;</li> </ul> <p>parametrelerin yollanmas\u0131</p> <pre><code>&lt;Link to=\"/my-path?start=5\"&gt;Go to Start&lt;/Link&gt; \n</code></pre> <p>ya da</p> <pre><code>&lt;Link \n    to={\u200c{\n        pathname: '/my-path',\n        search: '?start=5'\n    }}&gt;\n    Go to Start\n&lt;/Link&gt;\n</code></pre> <p>parametrelerin al\u0131nmas\u0131</p> <pre><code>componentDidMount() {\n    const query = new URLSearchParams(this.props.location.search);\n    for (let param of query.entries()) {\n        console.log(param); // yields ['start', '5']\n    }\n}\n</code></pre> <ul> <li><code>#something</code> \u015feklinde olu\u015fturulan hash parametreleri de <code>props.location.hash</code> \u00fczerinden al\u0131n\u0131r;</li> </ul> <pre><code>&lt;Link to=\"/my-path#start-position\"&gt;Go to Start&lt;/Link&gt;\n</code></pre> <pre><code>&lt;Link \n    to={\u200c{\n        pathname: '/my-path',\n        hash: 'start-position'\n    }}\n    &gt;Go to Start&lt;/Link&gt;\n</code></pre> <ul> <li><code>&lt;Switch&gt;</code> componenti ayn\u0131 anda tek route un render edilmesini sa\u011flar. A\u015fa\u011f\u0131daki gibi durumlarda <code>path=\"/new-post\"</code> ve <code>path=\"/:id\"</code> \u00fcst\u00fcste binece\u011finden, bu durumun \u00f6n\u00fcne ge\u00e7mek i\u00e7in switch kullan\u0131labilir. Se\u00e7imi yukar\u0131dan a\u015fa\u011f\u0131ya do\u011fru yapar.</li> </ul> <pre><code>import {Route, NavLink, Switch} from 'react-router-dom';\n\n//...\n\n &lt;Switch&gt;\n    &lt;Route path=\"/\" exact component={Posts} /&gt;\n    &lt;Route path=\"/new-post\" component={NewPost} /&gt;\n    &lt;Route path=\"/:id\" exact component={FullPost} /&gt;\n&lt;/Switch&gt;\n</code></pre> <ul> <li><code>&lt;Redirect&gt;</code> componenti y\u00f6nlendirme i\u00e7in kullan\u0131l\u0131r. Url de\u011fi\u015fir.</li> </ul> <pre><code>import {Route, NavLink, Switch, Redirect} from 'react-router-dom';\n\n//...\n\n&lt;Redirect from=\"/\" to=\"/posts\" /&gt;\n</code></pre> <ul> <li>Redirect componenti bir i\u015flem sonucunda yap\u0131lacak \u015fekilde de kullan\u0131labilir. \u00d6rne\u011fin bi statte de\u011fi\u015fkeninin durumuna g\u00f6re sayfa y\u00f6nlendirilebilir.</li> </ul> <pre><code>//...\n\nlet redirect = null;\nif(this.state.submitted){\n    redirect = &lt;Redirect to=\"/posts\" /&gt;\n}\nreturn (\n    &lt;div className=\"NewPost\"&gt;\n        {redirect}\n        &lt;h1&gt;Add a Post&lt;/h1&gt;\n\n//...\n</code></pre> <p>Not: Redirect yerine daha pratik \u015fekilde state g\u00fcncelleme an\u0131nda props.history.replace fonksiyonu da kullan\u0131labilir. replace fonksiyonunun push fonksiyonundan fark\u0131 historyi korumamas\u0131d\u0131r. push yap\u0131ld\u0131\u011f\u0131nda browserda \u00f6nceki sayfaya d\u00f6n\u00fclebilir ama replacede d\u00f6n\u00fclemez.</p> <p>Not: Yetkiye sayfalar\u0131n gizlenmesi ya da a\u00e7\u0131lmas\u0131, state \u00fczerinde tutulacak bi de\u011fi\u015fkenle route lar\u0131n \u015fartl\u0131 yaz\u0131lmas\u0131 ile yap\u0131labilir ya da ilgili sayfan\u0131n componentDidMount methodunda yetki olup olmad\u0131\u011f\u0131 kontrol edilerek redirect yap\u0131labilir.</p> <p>Lazy Loading with Suspense</p> <p>Routing s\u0131ras\u0131nda her sayfada t\u00fcm jacascript tekrar y\u00fckleniyor, sadece se\u00e7ili componentin y\u00fcklenmesi isteniyorsa lazy loading y\u00f6ntemleri kullan\u0131l\u0131r.</p> <ol> <li>y\u00f6ntemde a\u015fa\u011f\u0131daki gibi olu\u015fturulan asyncComponent.js dosyas\u0131</li> </ol> <pre><code>import React, { Component } from \"react\"\n\nconst asyncComponent = (importComponent) =&gt; {\n    return class extends Component {\n        state = {\n            component: null\n        }\n\n        componentDidMount () {\n            importComponent()\n                .then(cmp =&gt; {\n                    this.setState({\n                        component: cmp.default\n                    });\n                });\n        }\n\n        render () {\n            const C = this.state.component;\n\n            return C ? &lt;C {...this.props} /&gt; : null;\n        }\n    }\n}\n\nexport default asyncComponent;\n</code></pre> <p>componentin kullan\u0131laca\u011f\u0131 routing dosyas\u0131 i\u00e7inde a\u015fa\u011f\u0131daki \u015fekilde import edilelerek kullan\u0131l\u0131r.</p> <pre><code>//...\n\nimport asyncComponent from '../../hoc/asyncComponent'\nconst AsyncNewPost = asyncComponent(() =&gt; {\n    return import('./NewPost/NewPost');\n});\n\n//...\n\n&lt;Route path=\"/new-post\" component={AsyncNewPost} /&gt;\n</code></pre> <ol> <li>y\u00f6ntemde ise react v16.6 ve sonras\u0131nda gelen yeni \u00f6zellikler ile birlikte a\u015fa\u011f\u0131daki gibi kullan\u0131labilir. Yine bu versiyonla gelen Suspense \u00f6zelli\u011fi ise component y\u00fcklenene kadar i\u015flem yap\u0131lmas\u0131n\u0131 sa\u011flar. </li> </ol> <pre><code>import React, { Component, Suspense } from 'react';\n\nconst Posts = React.lazy(() =&gt; import('./containers/Posts'));\n\n\n&lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n    &lt;Posts /&gt;\n&lt;/Suspense&gt;\n\n</code></pre> <ul> <li>E\u011fer uygulama example.com gibi de\u011fil de example.com/myapp \u015feklinde bi path alt\u0131nda \u00e7al\u0131\u015facaksa bunun reactte tan\u0131mlanmas\u0131 gerekir ve a\u015fa\u011f\u0131daki gibi yap\u0131l\u0131r.</li> </ul> <pre><code>&lt;BrowserRouter basename=\"/myapp\"&gt;\n...\n&lt;/BrowserRouter&gt;\n</code></pre> <ul> <li>Son olarak routing yukar\u0131dan a\u015fa\u011f\u0131ya s\u0131rayla \u00e7al\u0131\u015ft\u0131\u011f\u0131 i\u00e7in en sonda bir Not Found Page b\u00f6l\u00fcm\u00fc yapmak gerekir \u00e7\u00fcnk\u00fc browser her hal\u00fckarda index.html i a\u00e7acakt\u0131r.</li> </ul> <pre><code>&lt;Route render={() =&gt; &lt;h1&gt;Not Found&lt;/h1&gt;} /&gt;\n</code></pre> <ul> <li>D\u00f6k\u00fcman: https://reacttraining.com/react-router/web/guides/philosophy</li> </ul>"},{"location":"resources/books/","title":"Kitaplar &amp; Makaleler","text":"<p>Bu b\u00f6l\u00fcm, Java, Spring, yaz\u0131l\u0131m mimarisi, cloud-native, DevOps ve liderlik konular\u0131nda \u00f6nerilen kitaplar ve makaleleri i\u00e7erir.</p>"},{"location":"resources/books/#1-java-spring","title":"1. Java &amp; Spring","text":"<ul> <li>Effective Java \u2013 Joshua Bloch</li> <li>Java Concurrency in Practice \u2013 Brian Goetz</li> <li>Spring in Action \u2013 Craig Walls</li> <li>Spring Boot in Action \u2013 Craig Walls</li> <li>Pro Spring Boot \u2013 Felipe Gutierrez</li> </ul>"},{"location":"resources/books/#2-yazlm-mimarisi-tasarm","title":"2. Yaz\u0131l\u0131m Mimarisi &amp; Tasar\u0131m","text":"<ul> <li>Clean Architecture \u2013 Robert C. Martin</li> <li>Building Microservices \u2013 Sam Newman</li> <li>Domain-Driven Design \u2013 Eric Evans</li> <li>Patterns of Enterprise Application Architecture \u2013 Martin Fowler</li> <li>The Pragmatic Programmer \u2013 Andrew Hunt, David Thomas</li> </ul>"},{"location":"resources/books/#3-cloud-native-devops","title":"3. Cloud-Native &amp; DevOps","text":"<ul> <li>Cloud Native Java \u2013 Josh Long, Kenny Bastani</li> <li>Kubernetes Up &amp; Running \u2013 Kelsey Hightower, Brendan Burns, Joe Beda</li> <li>Site Reliability Engineering \u2013 Betsy Beyer, Chris Jones, Jennifer Petoff, Niall Richard Murphy</li> <li>The Phoenix Project \u2013 Gene Kim, Kevin Behr, George Spafford</li> <li>Accelerate \u2013 Nicole Forsgren, Jez Humble, Gene Kim</li> </ul>"},{"location":"resources/books/#4-guvenlik-best-practices","title":"4. G\u00fcvenlik &amp; Best Practices","text":"<ul> <li>Web Application Security \u2013 Andrew Hoffman</li> <li>The DevOps Handbook \u2013 Gene Kim, Jez Humble, Patrick Debois, John Willis</li> <li>Continuous Delivery \u2013 Jez Humble, David Farley</li> <li>Refactoring \u2013 Martin Fowler</li> </ul>"},{"location":"resources/books/#5-problem-cozme-liderlik","title":"5. Problem \u00c7\u00f6zme &amp; Liderlik","text":"<ul> <li>The Manager\u2019s Path \u2013 Camille Fournier</li> <li>Team Topologies \u2013 Matthew Skelton, Manuel Pais</li> <li>Debugging Teams \u2013 Ben Collins-Sussman, Brian Fitzpatrick</li> </ul>"},{"location":"resources/books/#6-makaleler-ve-whitepaperlar","title":"6. Makaleler ve Whitepaper\u2019lar","text":"<ul> <li>Reactive Manifesto</li> <li>Twelve-Factor App</li> <li>Google SRE Book</li> <li>Netflix Tech Blog</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda yeni kitaplar ve makaleler ekleyerek blogunuzu g\u00fcncel tutabilirsiniz.</p>"},{"location":"resources/faq/","title":"S\u0131k Sorulan Sorular (FAQ)","text":"<p>Bu b\u00f6l\u00fcm, Java, Spring, cloud-native, DevOps, mimari, troubleshooting ve kariyerle ilgili en s\u0131k sorulan sorular\u0131 ve k\u0131sa cevaplar\u0131n\u0131 i\u00e7erir.</p>"},{"location":"resources/faq/#1-java-spring","title":"1. Java &amp; Spring","text":"<ul> <li>Java ile Spring aras\u0131ndaki temel fark nedir?</li> <li>Java bir programlama dili, Spring ise Java i\u00e7in geli\u015ftirilmi\u015f bir framework\u2019t\u00fcr.</li> <li>Spring Boot ile Spring Framework fark\u0131 nedir?</li> <li>Spring Boot, Spring uygulamalar\u0131n\u0131 h\u0131zl\u0131 ve kolay ba\u015flatmak i\u00e7in otomatik konfig\u00fcrasyon ve starter ba\u011f\u0131ml\u0131l\u0131klar\u0131 sunar.</li> </ul>"},{"location":"resources/faq/#2-cloud-devops","title":"2. Cloud &amp; DevOps","text":"<ul> <li>Cloud-native uygulama nedir?</li> <li>Bulut ortam\u0131nda do\u011frudan \u00e7al\u0131\u015facak \u015fekilde tasarlanm\u0131\u015f, \u00f6l\u00e7eklenebilir ve otomatik y\u00f6netilebilen uygulamalard\u0131r.</li> <li>CI/CD nedir?</li> <li>S\u00fcrekli entegrasyon (CI) ve s\u00fcrekli teslimat/deployment (CD) s\u00fcre\u00e7lerini otomatikle\u015ftiren yaz\u0131l\u0131m geli\u015ftirme yakla\u015f\u0131m\u0131d\u0131r.</li> </ul>"},{"location":"resources/faq/#3-yazlm-mimarisi","title":"3. Yaz\u0131l\u0131m Mimarisi","text":"<ul> <li>Monolith ve microservices fark\u0131 nedir?</li> <li>Monolith tek par\u00e7a uygulamad\u0131r, microservices ise ba\u011f\u0131ms\u0131z deploy edilebilen k\u00fc\u00e7\u00fck servislerden olu\u015fur.</li> <li>CAP teoremi nedir?</li> <li>Da\u011f\u0131t\u0131k sistemlerde ayn\u0131 anda consistency, availability ve partition tolerance\u2019\u0131n \u00fc\u00e7\u00fcn\u00fc birden tam olarak sa\u011flamak m\u00fcmk\u00fcn de\u011fildir.</li> </ul>"},{"location":"resources/faq/#4-troubleshooting-best-practices","title":"4. Troubleshooting &amp; Best Practices","text":"<ul> <li>Memory leak nedir, nas\u0131l tespit edilir?</li> <li>Kullan\u0131lmayan nesnelerin bellekten temizlenmemesiyle olu\u015fur; heap dump ve profiler ara\u00e7lar\u0131yla tespit edilir.</li> <li>N+1 select problemi nedir?</li> <li>ORM ile ili\u015fkili veriler \u00e7ekilirken her kay\u0131t i\u00e7in ayr\u0131 sorgu at\u0131lmas\u0131d\u0131r; fetch join veya entity graph ile \u00e7\u00f6z\u00fcl\u00fcr.</li> </ul>"},{"location":"resources/faq/#5-guvenlik","title":"5. G\u00fcvenlik","text":"<ul> <li>JWT nedir, neden kullan\u0131l\u0131r?</li> <li>JSON Web Token, stateless authentication i\u00e7in kullan\u0131lan bir standartt\u0131r.</li> <li>Secret management nas\u0131l yap\u0131l\u0131r?</li> <li>Secrets environment variable, external vault veya config server\u2019da saklanmal\u0131, kodda tutulmamal\u0131d\u0131r.</li> </ul>"},{"location":"resources/faq/#6-kariyer-gelisim","title":"6. Kariyer &amp; Geli\u015fim","text":"<ul> <li>Staff engineer, solution architect, cloud architect rolleri aras\u0131ndaki farklar nelerdir?</li> <li>Staff engineer teknik liderlik ve derin uzmanl\u0131k, solution architect \u00e7\u00f6z\u00fcm tasar\u0131m\u0131, cloud architect ise bulut altyap\u0131s\u0131 ve mimarisi odakl\u0131d\u0131r.</li> <li>M\u00fclakatlarda en \u00e7ok hangi konular sorulur?</li> <li>OOP, concurrency, microservices, cloud, DevOps, security, best practices ve problem \u00e7\u00f6zme.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda yeni sorular ekleyerek blogunuzu g\u00fcncel tutabilirsiniz.</p>"},{"location":"resources/links/","title":"Faydal\u0131 Linkler","text":"<p>Bu b\u00f6l\u00fcm, Java, Spring, middleware, cloud-native, mimari ve modern yaz\u0131l\u0131m geli\u015ftirme i\u00e7in en faydal\u0131 kaynaklar\u0131 ve topluluklar\u0131 i\u00e7erir.</p>"},{"location":"resources/links/#1-resmi-dokumantasyonlar","title":"1. Resmi Dok\u00fcmantasyonlar","text":"<ul> <li>Java Documentation</li> <li>Spring Docs</li> <li>Spring Boot Docs</li> <li>Kubernetes Docs</li> <li>Apache Kafka Docs</li> <li>RabbitMQ Docs</li> </ul>"},{"location":"resources/links/#2-bloglar-ve-makaleler","title":"2. Bloglar ve Makaleler","text":"<ul> <li>Baeldung</li> <li>InfoQ</li> <li>Martin Fowler Blog</li> <li>ThoughtWorks Insights</li> </ul>"},{"location":"resources/links/#3-topluluklar-ve-forumlar","title":"3. Topluluklar ve Forumlar","text":"<ul> <li>Stack Overflow</li> <li>Reddit r/java</li> <li>Reddit r/spring</li> <li>Dev.to</li> </ul>"},{"location":"resources/links/#4-araclar-ve-ornek-projeler","title":"4. Ara\u00e7lar ve \u00d6rnek Projeler","text":"<ul> <li>Spring Initializr</li> <li>JHipster</li> <li>Testcontainers</li> <li>Jaeger Tracing</li> <li>Prometheus</li> </ul>"},{"location":"resources/links/#5-video-egitimler-ve-konferanslar","title":"5. Video E\u011fitimler ve Konferanslar","text":"<ul> <li>Devoxx</li> <li>SpringOne</li> <li>YouTube - Java Brains</li> <li>YouTube - TechWorld with Nana</li> </ul>"},{"location":"resources/links/#6-best-practices-ve-referanslar","title":"6. Best Practices ve Referanslar","text":"<ul> <li>OWASP Top 10</li> <li>12 Factor App</li> <li>Google Java Style Guide</li> <li>Effective Java - Joshua Bloch</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda yeni kaynaklar ekleyerek blogunuzu g\u00fcncel tutabilirsiniz.</p>"},{"location":"resources/notes/","title":"Ki\u015fisel Notlar","text":"<p>Bu b\u00f6l\u00fcm, yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinde edinilen ki\u015fisel notlar, \u00f6nemli ipu\u00e7lar\u0131, s\u0131k kullan\u0131lan komutlar ve pratik \u00f6nerileri i\u00e7erir.</p>"},{"location":"resources/notes/#1-sk-kullanlan-komutlar","title":"1. S\u0131k Kullan\u0131lan Komutlar","text":"<ul> <li>Maven build: <code>mvn clean install</code></li> <li>Gradle build: <code>./gradlew build</code></li> <li>Docker image build: <code>docker build -t myapp .</code></li> <li>Kubernetes deploy: <code>kubectl apply -f deployment.yaml</code></li> <li>Git stash: <code>git stash &amp;&amp; git stash pop</code></li> </ul>"},{"location":"resources/notes/#2-kod-snippetleri","title":"2. Kod Snippet\u2019leri","text":"<ul> <li>Java stream ile filtreleme:   <code>java   list.stream().filter(x -&gt; x.isActive()).collect(Collectors.toList());</code></li> <li>Spring Boot health endpoint:   <code>yaml   management:     endpoints:       web:         exposure:           include: health,info</code></li> </ul>"},{"location":"resources/notes/#3-troubleshooting-ipuclar","title":"3. Troubleshooting \u0130pu\u00e7lar\u0131","text":"<ul> <li>Heap dump almak i\u00e7in: <code>jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</code></li> <li>Thread dump almak i\u00e7in: <code>jstack &lt;pid&gt;</code></li> <li>Docker container loglar\u0131: <code>docker logs &lt;container_id&gt;</code></li> </ul>"},{"location":"resources/notes/#4-ogrenilen-dersler-pratik-oneriler","title":"4. \u00d6\u011frenilen Dersler &amp; Pratik \u00d6neriler","text":"<ul> <li>Her zaman test yaz, kodunu k\u00fc\u00e7\u00fck par\u00e7alara b\u00f6l.</li> <li>Konfig\u00fcrasyonlar\u0131 koddan ay\u0131r, environment variable kullan.</li> <li>Monitoring ve alerting\u2019i production\u2019a ge\u00e7meden kur.</li> <li>Kodun okunabilirli\u011fine ve dok\u00fcmantasyonuna \u00f6nem ver.</li> <li>\u201cWorks on my machine\u201d demek yerine CI/CD pipeline\u2019da test et.</li> </ul>"},{"location":"resources/notes/#5-faydal-ksa-notlar","title":"5. Faydal\u0131 K\u0131sa Notlar","text":"<ul> <li>JVM tuning i\u00e7in Xms/Xmx de\u011ferlerini uygulaman\u0131n ihtiyac\u0131na g\u00f6re ayarla.</li> <li>Spring Boot\u2019ta profile bazl\u0131 konfig\u00fcrasyon i\u00e7in <code>@Profile</code> annotation kullan.</li> <li>Kubernetes\u2019te resource limitlerini belirle, aksi halde node\u2019lar dolabilir.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda kendi deneyimlerinizi ve yeni notlar\u0131n\u0131z\u0131 ekleyerek blogunuzu ki\u015fiselle\u015ftirebilirsiniz.</p>"},{"location":"spring/best-practices/","title":"Spring Best Practices","text":"<p>Bu b\u00f6l\u00fcm, Spring ve Spring Boot uygulamalar\u0131nda kod kalitesi, g\u00fcvenlik, performans ve s\u00fcrd\u00fcr\u00fclebilirlik i\u00e7in en iyi uygulamalar\u0131 kapsar.</p>"},{"location":"spring/best-practices/#1-kod-kalitesi-ve-modulerlik","title":"1. Kod Kalitesi ve Mod\u00fclerlik","text":"<ul> <li>Katmanl\u0131 mimari, separation of concerns</li> <li>Anlaml\u0131 bean isimlendirme, component scanning y\u00f6netimi</li> <li>Configuration properties ile merkezi konfig\u00fcrasyon</li> </ul>"},{"location":"spring/best-practices/#2-guvenlik","title":"2. G\u00fcvenlik","text":"<ul> <li>Spring Security ile defense in depth</li> <li>Secret management, environment variable kullan\u0131m\u0131</li> <li>G\u00fcvenli logging ve exception handling</li> </ul>"},{"location":"spring/best-practices/#3-performans-ve-olceklenebilirlik","title":"3. Performans ve \u00d6l\u00e7eklenebilirlik","text":"<ul> <li>Caching, async i\u015flemler, thread pool tuning</li> <li>Profiling, memory leak tespiti, actuator kullan\u0131m\u0131</li> </ul>"},{"location":"spring/best-practices/#4-test-ve-cicd","title":"4. Test ve CI/CD","text":"<ul> <li>Unit, integration, end-to-end test coverage</li> <li>Test otomasyonu, pipeline\u2019larda otomatik test ve deployment</li> <li>Mocking, test data management</li> </ul>"},{"location":"spring/best-practices/#5-configuration-management","title":"5. Configuration Management","text":"<ul> <li>Profile, environment, centralized config server kullan\u0131m\u0131</li> <li>Dynamic property refresh, feature toggle</li> </ul>"},{"location":"spring/best-practices/#6-monitoring-ve-observability","title":"6. Monitoring ve Observability","text":"<ul> <li>Distributed tracing, metrics, centralized logging</li> <li>Health checks, alerting, incident response</li> </ul>"},{"location":"spring/best-practices/#7-deployment-ve-surdurulebilirlik","title":"7. Deployment ve S\u00fcrd\u00fcr\u00fclebilirlik","text":"<ul> <li>Immutable infrastructure, blue/green deployment</li> <li>Canary release, rollback stratejileri</li> <li>Versiyonlama ve backward compatibility</li> </ul>"},{"location":"spring/best-practices/#8-sk-karslaslan-sorunlara-yaklasm","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlara Yakla\u015f\u0131m","text":"<ul> <li>Circular dependency, bean initialization hatalar\u0131</li> <li>Ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi ve versiyon uyumsuzluklar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/boot/","title":"Spring Boot - Modern Java Uygulama Geli\u015ftirme","text":"<p>Spring Boot, kurumsal Java uygulamalar\u0131n\u0131 h\u0131zl\u0131, g\u00fcvenli ve kolayca geli\u015ftirmek i\u00e7in kullan\u0131lan en pop\u00fcler frameworklerden biridir. Bu b\u00f6l\u00fcmde, Spring Boot\u2019un mimarideki rol\u00fc, best practices ve ger\u00e7ek d\u00fcnya senaryolar\u0131 detayl\u0131 \u015fekilde ele al\u0131n\u0131r.</p>"},{"location":"spring/boot/#1-spring-bootun-temelleri","title":"1. Spring Boot\u2019un Temelleri","text":"<ul> <li>Spring Boot ile gelen otomatik konfig\u00fcrasyon</li> <li>Starter ba\u011f\u0131ml\u0131l\u0131klar\u0131 ve mod\u00fcler yap\u0131</li> <li>Spring Initializr ile h\u0131zl\u0131 proje ba\u015flang\u0131c\u0131</li> </ul>"},{"location":"spring/boot/#2-uygulama-mimarisi-ve-katmanlar","title":"2. Uygulama Mimarisi ve Katmanlar","text":"<ul> <li>Controller, Service, Repository katmanlar\u0131</li> <li>Dependency Injection ve Bean y\u00f6netimi</li> <li>Configuration, Profile ve Environment kullan\u0131m\u0131</li> </ul>"},{"location":"spring/boot/#3-rest-api-gelistirme","title":"3. REST API Geli\u015ftirme","text":"<ul> <li>@RestController, @RequestMapping, @ResponseBody</li> <li>Validation, Exception Handling, DTO kullan\u0131m\u0131</li> <li>Swagger/OpenAPI ile dok\u00fcmantasyon</li> </ul>"},{"location":"spring/boot/#4-veri-erisimi-ve-persistence","title":"4. Veri Eri\u015fimi ve Persistence","text":"<ul> <li>Spring Data JPA, Hibernate, Transaction y\u00f6netimi</li> <li>Repository pattern, Query Methods, Pagination</li> <li>Database migration (Flyway, Liquibase)</li> </ul>"},{"location":"spring/boot/#5-guvenlik-ve-kimlik-dogrulama","title":"5. G\u00fcvenlik ve Kimlik Do\u011frulama","text":"<ul> <li>Spring Security ile authentication/authorization</li> <li>JWT, OAuth2, LDAP entegrasyonu</li> <li>Method-level security</li> </ul>"},{"location":"spring/boot/#6-test-ve-mocking","title":"6. Test ve Mocking","text":"<ul> <li>Unit test, integration test, @SpringBootTest</li> <li>MockMvc, Testcontainers, veri taban\u0131 testleri</li> </ul>"},{"location":"spring/boot/#7-production-ready-ozellikler","title":"7. Production-Ready \u00d6zellikler","text":"<ul> <li>Health checks, metrics, actuator endpoints</li> <li>Configuration management (Config Server, Vault)</li> <li>Logging, tracing, distributed tracing (Sleuth, Zipkin)</li> </ul>"},{"location":"spring/boot/#8-performans-ve-optimizasyon","title":"8. Performans ve Optimizasyon","text":"<ul> <li>Caching, async i\u015flemler, thread pool tuning</li> <li>Profiling ve memory leak tespiti</li> </ul>"},{"location":"spring/boot/#9-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"9. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Ba\u011f\u0131ml\u0131l\u0131k \u00e7at\u0131\u015fmalar\u0131, port \u00e7ak\u0131\u015fmalar\u0131</li> <li>Lazy initialization, circular dependency</li> <li>Migration ve versiyon g\u00fcncellemeleri</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/cloud/","title":"Spring Cloud","text":"<p>Bu b\u00f6l\u00fcm, Spring Cloud ekosistemindeki temel bile\u015fenleri, bulut-native uygulama geli\u015ftirme yakla\u015f\u0131mlar\u0131n\u0131 ve best practices\u2019i kapsar.</p>"},{"location":"spring/cloud/#1-spring-cloud-nedir","title":"1. Spring Cloud Nedir?","text":"<ul> <li>Microservices i\u00e7in bulut-native altyap\u0131 ve entegrasyon \u00e7\u00f6z\u00fcmleri</li> <li>Konfig\u00fcrasyon, servis ke\u015ffi, load balancing, resilience</li> </ul>"},{"location":"spring/cloud/#2-config-server-ve-centralized-configuration","title":"2. Config Server ve Centralized Configuration","text":"<ul> <li>Spring Cloud Config Server ile merkezi konfig\u00fcrasyon y\u00f6netimi</li> <li>Git, Vault, Consul entegrasyonu</li> <li>Dynamic refresh ve property management</li> </ul>"},{"location":"spring/cloud/#3-service-discovery-ve-load-balancing","title":"3. Service Discovery ve Load Balancing","text":"<ul> <li>Eureka, Consul, Zookeeper ile servis ke\u015ffi</li> <li>Ribbon, Spring Cloud LoadBalancer ile client-side load balancing</li> </ul>"},{"location":"spring/cloud/#4-api-gateway-ve-routing","title":"4. API Gateway ve Routing","text":"<ul> <li>Spring Cloud Gateway, Zuul</li> <li>Routing, rate limiting, authentication, CORS y\u00f6netimi</li> </ul>"},{"location":"spring/cloud/#5-circuit-breaker-ve-resilience","title":"5. Circuit Breaker ve Resilience","text":"<ul> <li>Resilience4j, Hystrix ile circuit breaker pattern</li> <li>Retry, bulkhead, fallback, timeout y\u00f6netimi</li> </ul>"},{"location":"spring/cloud/#6-distributed-tracing-ve-observability","title":"6. Distributed Tracing ve Observability","text":"<ul> <li>Sleuth, Zipkin, OpenTelemetry ile distributed tracing</li> <li>Centralized logging, metrics, alerting</li> </ul>"},{"location":"spring/cloud/#7-cloud-native-best-practices","title":"7. Cloud-Native Best Practices","text":"<ul> <li>Immutable infrastructure, blue/green deployment</li> <li>Feature toggle, canary release, autoscaling</li> </ul>"},{"location":"spring/cloud/#8-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Config drift, service registration sorunlar\u0131</li> <li>Circuit breaker tuning, distributed tracing hatalar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/data/","title":"Spring Data &amp; JPA","text":"<p>Bu b\u00f6l\u00fcm, Spring Data ve JPA kullanarak veri eri\u015fimi, repository pattern, transaction y\u00f6netimi ve NoSQL entegrasyonu konular\u0131n\u0131 kapsar.</p>"},{"location":"spring/data/#1-spring-data-nedir","title":"1. Spring Data Nedir?","text":"<ul> <li>Repository abstraction, CRUD ve custom repository</li> <li>Spring Data JPA, MongoDB, Redis, Elasticsearch deste\u011fi</li> </ul>"},{"location":"spring/data/#2-jpa-temelleri","title":"2. JPA Temelleri","text":"<ul> <li>Entity, @Id, @GeneratedValue, @Table, @Column</li> <li>EntityManager, persistence context, lifecycle</li> </ul>"},{"location":"spring/data/#3-repository-pattern-ve-query-methods","title":"3. Repository Pattern ve Query Methods","text":"<ul> <li>JpaRepository, CrudRepository, PagingAndSortingRepository</li> <li>Derived query methods, @Query annotation, native queries</li> </ul>"},{"location":"spring/data/#4-transaction-management","title":"4. Transaction Management","text":"<ul> <li>@Transactional annotation, propagation, isolation</li> <li>Rollback, commit, nested transactions</li> </ul>"},{"location":"spring/data/#5-nosql-entegrasyonu","title":"5. NoSQL Entegrasyonu","text":"<ul> <li>Spring Data MongoDB, Redis, Cassandra, Elasticsearch</li> <li>Document, key-value, graph ve columnar veri modelleri</li> </ul>"},{"location":"spring/data/#6-performans-ve-optimizasyon","title":"6. Performans ve Optimizasyon","text":"<ul> <li>Lazy vs eager loading, fetch join, entity graph</li> <li>Caching, query optimization, batch processing</li> </ul>"},{"location":"spring/data/#7-migration-ve-versiyonlama","title":"7. Migration ve Versiyonlama","text":"<ul> <li>Database migration ara\u00e7lar\u0131: Flyway, Liquibase</li> <li>Schema versioning, rollback stratejileri</li> </ul>"},{"location":"spring/data/#8-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>N+1 select problemi, transaction y\u00f6netimi hatalar\u0131</li> <li>Mapping ve conversion sorunlar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/integration/","title":"Spring Integration &amp; Messaging","text":"<p>Bu b\u00f6l\u00fcm, Spring Integration ile kurumsal entegrasyon desenleri, messaging altyap\u0131s\u0131 ve event-driven uygulama geli\u015ftirme konular\u0131n\u0131 kapsar.</p>"},{"location":"spring/integration/#1-spring-integration-nedir","title":"1. Spring Integration Nedir?","text":"<ul> <li>Enterprise Integration Patterns (EIP) deste\u011fi</li> <li>Messaging, channel, endpoint, adapter kavramlar\u0131</li> </ul>"},{"location":"spring/integration/#2-messaging-altyaps","title":"2. Messaging Altyap\u0131s\u0131","text":"<ul> <li>Synchronous/asynchronous messaging</li> <li>Message channel, queue, topic, pub/sub</li> <li>RabbitMQ, Kafka, JMS entegrasyonu</li> </ul>"},{"location":"spring/integration/#3-eip-ve-entegrasyon-desenleri","title":"3. EIP ve Entegrasyon Desenleri","text":"<ul> <li>Adapter, transformer, filter, splitter, aggregator</li> <li>Routing, resequencer, service activator</li> </ul>"},{"location":"spring/integration/#4-event-driven-architecture","title":"4. Event-Driven Architecture","text":"<ul> <li>Event sourcing, event bus, event handler</li> <li>Asenkron ve reaktif uygulama geli\u015ftirme</li> </ul>"},{"location":"spring/integration/#5-integration-flow-ve-dsl","title":"5. Integration Flow ve DSL","text":"<ul> <li>Java DSL ile integration flow tan\u0131mlama</li> <li>XML vs Java config</li> </ul>"},{"location":"spring/integration/#6-transaction-management-ve-error-handling","title":"6. Transaction Management ve Error Handling","text":"<ul> <li>Transactional messaging, compensation</li> <li>Error channel, retry, dead letter queue</li> </ul>"},{"location":"spring/integration/#7-monitoring-ve-observability","title":"7. Monitoring ve Observability","text":"<ul> <li>Message tracing, metrics, centralized logging</li> <li>Health checks, alerting</li> </ul>"},{"location":"spring/integration/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Idempotency, message ordering, duplicate delivery</li> <li>Performans ve \u00f6l\u00e7eklenebilirlik i\u00e7in \u00f6neriler</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/security/","title":"Spring Security","text":"<p>Bu b\u00f6l\u00fcm, Spring Security ile Java uygulamalar\u0131nda g\u00fcvenlik sa\u011flamak i\u00e7in temel ve ileri seviye konular\u0131 kapsar.</p>"},{"location":"spring/security/#1-authentication-ve-authorization","title":"1. Authentication ve Authorization","text":"<ul> <li>Username/password, LDAP, OAuth2, SAML, JWT ile kimlik do\u011frulama</li> <li>Role-based ve attribute-based access control</li> <li>Custom authentication provider yaz\u0131m\u0131</li> </ul>"},{"location":"spring/security/#2-web-security-konfigurasyonu","title":"2. Web Security Konfig\u00fcrasyonu","text":"<ul> <li>Security filter chain, HttpSecurity, WebSecurityConfigurerAdapter</li> <li>CSRF, CORS, session management, remember-me</li> </ul>"},{"location":"spring/security/#3-jwt-ve-token-tabanl-guvenlik","title":"3. JWT ve Token Tabanl\u0131 G\u00fcvenlik","text":"<ul> <li>JWT olu\u015fturma, do\u011frulama, refresh token</li> <li>Stateless authentication, token blacklist</li> </ul>"},{"location":"spring/security/#4-oauth2-ve-openid-connect","title":"4. OAuth2 ve OpenID Connect","text":"<ul> <li>OAuth2 flow\u2019lar\u0131, client credentials, authorization code</li> <li>Resource server, authorization server, scope management</li> </ul>"},{"location":"spring/security/#5-method-level-security","title":"5. Method-Level Security","text":"<ul> <li>@PreAuthorize, @PostAuthorize, @Secured, @RolesAllowed</li> <li>SpEL ile dinamik yetkilendirme</li> </ul>"},{"location":"spring/security/#6-guvenlikte-best-practices","title":"6. G\u00fcvenlikte Best Practices","text":"<ul> <li>Password hashing (BCrypt, Argon2)</li> <li>Secret management, environment variable kullan\u0131m\u0131</li> <li>G\u00fcvenli logging ve exception handling</li> </ul>"},{"location":"spring/security/#7-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"7. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>CORS hatalar\u0131, session fixation, CSRF token sorunlar\u0131</li> <li>Stateless uygulamalarda authentication problemleri</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/testing/","title":"Spring Test &amp; Mocking","text":"<p>Bu b\u00f6l\u00fcm, Spring uygulamalar\u0131nda test stratejileri, mocking teknikleri ve test otomasyonu konular\u0131n\u0131 kapsar.</p>"},{"location":"spring/testing/#1-unit-test-ve-integration-test","title":"1. Unit Test ve Integration Test","text":"<ul> <li>Unit test i\u00e7in @WebMvcTest, @DataJpaTest, @MockBean</li> <li>Integration test i\u00e7in @SpringBootTest, ger\u00e7ek veri taban\u0131 ile test</li> </ul>"},{"location":"spring/testing/#2-mocking-ve-test-double","title":"2. Mocking ve Test Double","text":"<ul> <li>Mockito, EasyMock, JMockit ile mocking</li> <li>Spy, stub, fake, dummy kavramlar\u0131</li> </ul>"},{"location":"spring/testing/#3-mockmvc-ile-rest-api-testi","title":"3. MockMvc ile REST API Testi","text":"<ul> <li>MockMvc ile controller ve endpoint testleri</li> <li>JSON path, request/response validation</li> </ul>"},{"location":"spring/testing/#4-testcontainers-ile-entegre-testler","title":"4. Testcontainers ile Entegre Testler","text":"<ul> <li>Docker tabanl\u0131 veri taban\u0131, message broker, cache test ortam\u0131</li> <li>Test lifecycle y\u00f6netimi</li> </ul>"},{"location":"spring/testing/#5-veri-taban-testleri","title":"5. Veri Taban\u0131 Testleri","text":"<ul> <li>H2, PostgreSQL, MySQL ile test ortam\u0131</li> <li>@Transactional, rollback, test isolation</li> </ul>"},{"location":"spring/testing/#6-test-coverage-ve-otomasyon","title":"6. Test Coverage ve Otomasyon","text":"<ul> <li>Coverage ara\u00e7lar\u0131: JaCoCo, Cobertura</li> <li>CI/CD pipeline\u2019da otomatik test \u00e7al\u0131\u015ft\u0131rma</li> </ul>"},{"location":"spring/testing/#7-test-best-practices","title":"7. Test Best Practices","text":"<ul> <li>Deterministic ve repeatable testler</li> <li>Test data management, fixture kullan\u0131m\u0131</li> <li>Flaky test \u00f6nleme, test maintenance</li> </ul>"},{"location":"spring/testing/#8-sk-karslaslan-sorunlar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>Mocking hatalar\u0131, context caching, test isolation sorunlar\u0131</li> <li>Test performans\u0131 ve paralel test \u00e7al\u0131\u015ft\u0131rma</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, kod par\u00e7alar\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"spring/troubleshooting/","title":"Spring Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, Spring ve Spring Boot projelerinde s\u0131k kar\u015f\u0131la\u015f\u0131lan sorunlar\u0131n tespiti, analizi ve \u00e7\u00f6z\u00fcm y\u00f6ntemlerini kapsar.</p>"},{"location":"spring/troubleshooting/#1-konfigurasyon-ve-property-sorunlar","title":"1. Konfig\u00fcrasyon ve Property Sorunlar\u0131","text":"<ul> <li>Property injection hatalar\u0131, profile y\u00f6netimi</li> <li>Config server ve centralized config sorunlar\u0131</li> </ul>"},{"location":"spring/troubleshooting/#2-dependency-ve-bean-initialization-hatalar","title":"2. Dependency ve Bean Initialization Hatalar\u0131","text":"<ul> <li>Circular dependency, unsatisfied dependency</li> <li>BeanNotOfRequiredTypeException, NoSuchBeanDefinitionException</li> </ul>"},{"location":"spring/troubleshooting/#3-bean-lifecycle-ve-scope-problemleri","title":"3. Bean Lifecycle ve Scope Problemleri","text":"<ul> <li>Singleton vs prototype scope, bean destruction</li> <li>@PostConstruct, @PreDestroy, lifecycle callback hatalar\u0131</li> </ul>"},{"location":"spring/troubleshooting/#4-security-ve-authentication-problemleri","title":"4. Security ve Authentication Problemleri","text":"<ul> <li>CSRF, CORS, session management hatalar\u0131</li> <li>JWT/OAuth2 authentication sorunlar\u0131</li> </ul>"},{"location":"spring/troubleshooting/#5-transaction-ve-persistence-sorunlar","title":"5. Transaction ve Persistence Sorunlar\u0131","text":"<ul> <li>Transaction propagation, rollback, nested transaction hatalar\u0131</li> <li>LazyInitializationException, N+1 select problemi</li> </ul>"},{"location":"spring/troubleshooting/#6-test-ve-mocking-sorunlar","title":"6. Test ve Mocking Sorunlar\u0131","text":"<ul> <li>MockMvc, Testcontainers, context caching hatalar\u0131</li> <li>Test isolation, flaky test, test data management</li> </ul>"},{"location":"spring/troubleshooting/#7-deployment-ve-environment-problemleri","title":"7. Deployment ve Environment Problemleri","text":"<ul> <li>Port \u00e7ak\u0131\u015fmalar\u0131, environment variable eksikli\u011fi</li> <li>Health check, actuator endpoint eri\u015fim sorunlar\u0131</li> </ul>"},{"location":"spring/troubleshooting/#8-performans-ve-memory-problemleri","title":"8. Performans ve Memory Problemleri","text":"<ul> <li>Memory leak, thread pool exhaustion, slow startup</li> <li>Profiling ve monitoring ile root cause analizi</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/best-practices/","title":"Genel Best Practices","text":"<p>Bu b\u00f6l\u00fcm, Java, Spring, middleware ve cloud-native uygulamalar i\u00e7in kod kalitesi, g\u00fcvenlik, performans ve s\u00fcrd\u00fcr\u00fclebilirlik a\u00e7\u0131s\u0131ndan en iyi uygulamalar\u0131 i\u00e7erir.</p>"},{"location":"troubleshooting/best-practices/#1-kod-kalitesi-ve-okunabilirlik","title":"1. Kod Kalitesi ve Okunabilirlik","text":"<ul> <li>Anlaml\u0131 isimlendirme, k\u0131sa fonksiyonlar, tek sorumluluk prensibi</li> <li>Yorum ve dok\u00fcmantasyonun do\u011fru kullan\u0131m\u0131</li> <li>Kodun mod\u00fcler ve yeniden kullan\u0131labilir olmas\u0131</li> </ul>"},{"location":"troubleshooting/best-practices/#2-guvenlik","title":"2. G\u00fcvenlik","text":"<ul> <li>Input validation ve output encoding</li> <li>G\u00fcvenli authentication ve authorization</li> <li>Secret management, credential rotation, audit log</li> </ul>"},{"location":"troubleshooting/best-practices/#3-performans-ve-olceklenebilirlik","title":"3. Performans ve \u00d6l\u00e7eklenebilirlik","text":"<ul> <li>Caching, connection pool, async i\u015flemler</li> <li>Resource limits, autoscaling, backpressure y\u00f6netimi</li> </ul>"},{"location":"troubleshooting/best-practices/#4-test-ve-cicd","title":"4. Test ve CI/CD","text":"<ul> <li>Unit, integration, end-to-end test coverage</li> <li>Test otomasyonu, pipeline\u2019larda otomatik test ve deployment</li> <li>Mocking, test data management</li> </ul>"},{"location":"troubleshooting/best-practices/#5-monitoring-ve-observability","title":"5. Monitoring ve Observability","text":"<ul> <li>Distributed tracing, metrics, centralized logging</li> <li>Health checks, alerting, incident response</li> </ul>"},{"location":"troubleshooting/best-practices/#6-deployment-ve-surdurulebilirlik","title":"6. Deployment ve S\u00fcrd\u00fcr\u00fclebilirlik","text":"<ul> <li>Immutable infrastructure, infrastructure as code</li> <li>Blue/green deployment, canary release, rollback stratejileri</li> <li>Versiyonlama ve backward compatibility</li> </ul>"},{"location":"troubleshooting/best-practices/#7-sk-karslaslan-sorunlara-yaklasm","title":"7. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlara Yakla\u015f\u0131m","text":"<ul> <li>Root cause analysis, postmortem k\u00fclt\u00fcr\u00fc</li> <li>Proaktif monitoring ve otomatik iyile\u015ftirme</li> <li>Bilgi payla\u015f\u0131m\u0131 ve dok\u00fcmantasyonun g\u00fcncel tutulmas\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7lar ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/cloud/","title":"Cloud Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, bulut-native uygulamalarda s\u0131k kar\u015f\u0131la\u015f\u0131lan ba\u011flant\u0131, IAM, network, scaling, deployment, monitoring ve maliyet sorunlar\u0131n\u0131n \u00e7\u00f6z\u00fcm\u00fc i\u00e7in pratik rehberler sunar.</p>"},{"location":"troubleshooting/cloud/#1-baglant-ve-network-sorunlar","title":"1. Ba\u011flant\u0131 ve Network Sorunlar\u0131","text":"<ul> <li>VPC, subnet, security group, firewall hatalar\u0131</li> <li>DNS, load balancer, peering, VPN ba\u011flant\u0131 sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/cloud/#2-iam-ve-permission-problemleri","title":"2. IAM ve Permission Problemleri","text":"<ul> <li>Over-permission, under-permission, policy hatalar\u0131</li> <li>Role assumption, federated identity, SSO sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/cloud/#3-scaling-ve-resource-management","title":"3. Scaling ve Resource Management","text":"<ul> <li>Autoscaling hatalar\u0131, resource limit exhaustion</li> <li>Pod/node scheduling, resource right-sizing</li> </ul>"},{"location":"troubleshooting/cloud/#4-deployment-ve-configuration-sorunlar","title":"4. Deployment ve Configuration Sorunlar\u0131","text":"<ul> <li>Config drift, environment variable eksikli\u011fi</li> <li>Blue/green deployment, canary release, rollback hatalar\u0131</li> </ul>"},{"location":"troubleshooting/cloud/#5-monitoring-ve-alerting-problemleri","title":"5. Monitoring ve Alerting Problemleri","text":"<ul> <li>Eksik metrics, alert fatigue, blind spot analizi</li> <li>Distributed tracing, log correlation sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/cloud/#6-cost-ve-billing-problemleri","title":"6. Cost ve Billing Problemleri","text":"<ul> <li>Cost overrun, idle resource, budget enforcement</li> <li>Cost monitoring, reserved/spot instance y\u00f6netimi</li> </ul>"},{"location":"troubleshooting/cloud/#7-compliance-ve-security-sorunlar","title":"7. Compliance ve Security Sorunlar\u0131","text":"<ul> <li>Misconfiguration, public exposure, secret leakage</li> <li>Compliance drift, audit log eksikli\u011fi</li> </ul>"},{"location":"troubleshooting/cloud/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Incident response, root cause analysis</li> <li>Documentation, knowledge sharing</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/database/","title":"Database Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, veritaban\u0131 ba\u011flant\u0131s\u0131, transaction y\u00f6netimi, performans, migration ve s\u0131k kar\u015f\u0131la\u015f\u0131lan sorunlar\u0131n \u00e7\u00f6z\u00fcm\u00fc i\u00e7in pratik rehberler sunar.</p>"},{"location":"troubleshooting/database/#1-baglant-ve-connection-pool-sorunlar","title":"1. Ba\u011flant\u0131 ve Connection Pool Sorunlar\u0131","text":"<ul> <li>Connection leak, pool exhaustion, timeout hatalar\u0131</li> <li>Pool sizing, connection retry, failover</li> </ul>"},{"location":"troubleshooting/database/#2-transaction-ve-locking-problemleri","title":"2. Transaction ve Locking Problemleri","text":"<ul> <li>Deadlock, lock escalation, isolation level sorunlar\u0131</li> <li>Transaction propagation, rollback, phantom read</li> </ul>"},{"location":"troubleshooting/database/#3-query-performance-ve-indexing","title":"3. Query Performance ve Indexing","text":"<ul> <li>Slow query analizi, execution plan, index tuning</li> <li>Missing index, redundant index, covering index</li> </ul>"},{"location":"troubleshooting/database/#4-replication-ve-high-availability","title":"4. Replication ve High Availability","text":"<ul> <li>Master-slave, master-master replication sorunlar\u0131</li> <li>Replication lag, failover, split-brain</li> </ul>"},{"location":"troubleshooting/database/#5-migration-ve-schema-management","title":"5. Migration ve Schema Management","text":"<ul> <li>Migration ara\u00e7lar\u0131 (Flyway, Liquibase) ile schema drift</li> <li>Data migration, rollback, versioning</li> </ul>"},{"location":"troubleshooting/database/#6-data-consistency-ve-integrity","title":"6. Data Consistency ve Integrity","text":"<ul> <li>Foreign key violation, orphan record, data corruption</li> <li>Consistency check, repair, audit log</li> </ul>"},{"location":"troubleshooting/database/#7-monitoring-ve-alerting","title":"7. Monitoring ve Alerting","text":"<ul> <li>Query metrics, slow query log, deadlock detection</li> <li>Alert threshold, incident response</li> </ul>"},{"location":"troubleshooting/database/#8-best-practices-ve-sk-karslaslan-sorunlar","title":"8. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Connection pool tuning, query optimization</li> <li>Backup/restore, disaster recovery, documentation</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/java/","title":"Java &amp; JVM Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, Java ve JVM tabanl\u0131 uygulamalarda s\u0131k kar\u015f\u0131la\u015f\u0131lan sorunlar\u0131n tespiti, analizi ve \u00e7\u00f6z\u00fcm y\u00f6ntemlerini i\u00e7erir.</p>"},{"location":"troubleshooting/java/#1-jvm-tuning-ve-performans-analizi","title":"1. JVM Tuning ve Performans Analizi","text":"<ul> <li>JVM parametreleri, heap ve stack ayarlar\u0131</li> <li>Profiling ara\u00e7lar\u0131: VisualVM, JMC, YourKit, Flight Recorder</li> <li>GC log analizi ve tuning (G1, ZGC, Parallel GC)</li> </ul>"},{"location":"troubleshooting/java/#2-memory-leak-ve-outofmemoryerror","title":"2. Memory Leak ve OutOfMemoryError","text":"<ul> <li>Heap dump alma ve analiz etme</li> <li>Leak tespiti i\u00e7in MAT, Eclipse Memory Analyzer kullan\u0131m\u0131</li> <li>Kodda s\u0131k yap\u0131lan memory leak hatalar\u0131</li> </ul>"},{"location":"troubleshooting/java/#3-thread-deadlock-ve-concurrency-sorunlar","title":"3. Thread Deadlock ve Concurrency Sorunlar\u0131","text":"<ul> <li>Thread dump alma ve analiz etme</li> <li>Deadlock, livelock, starvation tespiti</li> <li>Senkronizasyon ve lock y\u00f6netimi</li> </ul>"},{"location":"troubleshooting/java/#4-garbage-collection-sorunlar","title":"4. Garbage Collection Sorunlar\u0131","text":"<ul> <li>GC tuning, stop-the-world analizleri</li> <li>Promotion failure, fragmentation, excessive GC cycles</li> </ul>"},{"location":"troubleshooting/java/#5-classloader-ve-bagmllk-catsmalar","title":"5. ClassLoader ve Ba\u011f\u0131ml\u0131l\u0131k \u00c7at\u0131\u015fmalar\u0131","text":"<ul> <li>ClassNotFoundException, NoClassDefFoundError</li> <li>Farkl\u0131 classloader\u2019lar ve shadowing sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/java/#6-performans-ve-latency-problemleri","title":"6. Performans ve Latency Problemleri","text":"<ul> <li>CPU, IO, network bottleneck tespiti</li> <li>JIT compiler ve hotspot optimizasyonlar\u0131</li> </ul>"},{"location":"troubleshooting/java/#7-hata-ayklama-ve-log-analizi","title":"7. Hata Ay\u0131klama ve Log Analizi","text":"<ul> <li>Exception stack trace okuma ve root cause analizi</li> <li>Log seviyeleri, log correlation, distributed tracing</li> </ul>"},{"location":"troubleshooting/java/#8-sk-karslaslan-hatalar-ve-cozum-yontemleri","title":"8. S\u0131k Kar\u015f\u0131la\u015f\u0131lan Hatalar ve \u00c7\u00f6z\u00fcm Y\u00f6ntemleri","text":"<ul> <li>NullPointerException, ConcurrentModificationException, StackOverflowError</li> <li>Ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi ve versiyon uyumsuzluklar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/middleware/","title":"Middleware Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, middleware mimarilerinde s\u0131k kar\u015f\u0131la\u015f\u0131lan sorunlar\u0131n tespiti, analizi ve \u00e7\u00f6z\u00fcm y\u00f6ntemlerini kapsar.</p>"},{"location":"troubleshooting/middleware/#1-message-broker-sorunlar","title":"1. Message Broker Sorunlar\u0131","text":"<ul> <li>Message loss, duplicate delivery, ordering problemleri</li> <li>Dead letter queue, slow consumer detection, backpressure</li> </ul>"},{"location":"troubleshooting/middleware/#2-api-gateway-ve-routing-problemleri","title":"2. API Gateway ve Routing Problemleri","text":"<ul> <li>Routing hatalar\u0131, path/host-based routing sorunlar\u0131</li> <li>Rate limiting, authentication, CORS hatalar\u0131</li> </ul>"},{"location":"troubleshooting/middleware/#3-event-driven-architecture-sorunlar","title":"3. Event-Driven Architecture Sorunlar\u0131","text":"<ul> <li>Event loss, duplicate event, eventual consistency</li> <li>Event replay, schema versioning, backward compatibility</li> </ul>"},{"location":"troubleshooting/middleware/#4-integration-ve-adapter-problemleri","title":"4. Integration ve Adapter Problemleri","text":"<ul> <li>Adapter/transformer hatalar\u0131, message conversion sorunlar\u0131</li> <li>Integration flow, error channel, retry mekanizmas\u0131</li> </ul>"},{"location":"troubleshooting/middleware/#5-scaling-ve-high-availability-sorunlar","title":"5. Scaling ve High Availability Sorunlar\u0131","text":"<ul> <li>Partitioning, replication, failover hatalar\u0131</li> <li>Load balancing, network partition, split-brain</li> </ul>"},{"location":"troubleshooting/middleware/#6-monitoring-ve-observability-sorunlar","title":"6. Monitoring ve Observability Sorunlar\u0131","text":"<ul> <li>Eksik metrics, distributed tracing hatalar\u0131</li> <li>Alerting, incident response, root cause analysis</li> </ul>"},{"location":"troubleshooting/middleware/#7-deployment-ve-configuration-problemleri","title":"7. Deployment ve Configuration Problemleri","text":"<ul> <li>Configuration drift, environment variable eksikli\u011fi</li> <li>Canary release, blue/green deployment, rollback sorunlar\u0131</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/network/","title":"Network Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, da\u011f\u0131t\u0131k sistemlerde ve bulut-native uygulamalarda s\u0131k kar\u015f\u0131la\u015f\u0131lan network sorunlar\u0131n\u0131n tespiti, analizi ve \u00e7\u00f6z\u00fcm y\u00f6ntemlerini kapsar.</p>"},{"location":"troubleshooting/network/#1-dns-ve-name-resolution-sorunlar","title":"1. DNS ve Name Resolution Sorunlar\u0131","text":"<ul> <li>DNS lookup failure, DNS cache, propagation delay</li> <li>Hostname/IP resolution, split-horizon DNS</li> </ul>"},{"location":"troubleshooting/network/#2-firewall-ve-security-group-problemleri","title":"2. Firewall ve Security Group Problemleri","text":"<ul> <li>Port blocking, inbound/outbound rule hatalar\u0131</li> <li>Network ACL, security group, VPC firewall</li> </ul>"},{"location":"troubleshooting/network/#3-load-balancer-ve-routing-sorunlar","title":"3. Load Balancer ve Routing Sorunlar\u0131","text":"<ul> <li>Load balancer health check, misconfiguration</li> <li>Sticky session, session affinity, routing loop</li> </ul>"},{"location":"troubleshooting/network/#4-latency-packet-loss-ve-connection-reset","title":"4. Latency, Packet Loss ve Connection Reset","text":"<ul> <li>Network latency, jitter, packet loss analizi</li> <li>Connection timeout, connection reset by peer</li> </ul>"},{"location":"troubleshooting/network/#5-ssltls-ve-certificate-problemleri","title":"5. SSL/TLS ve Certificate Problemleri","text":"<ul> <li>Certificate mismatch, expired certificate, trust chain</li> <li>Mutual TLS, cipher suite, protocol version uyumsuzlu\u011fu</li> </ul>"},{"location":"troubleshooting/network/#6-monitoring-ve-diagnostic-araclar","title":"6. Monitoring ve Diagnostic Ara\u00e7lar\u0131","text":"<ul> <li>Ping, traceroute, mtr, netstat, tcpdump, wireshark</li> <li>Network metrics, distributed tracing, alerting</li> </ul>"},{"location":"troubleshooting/network/#7-best-practices-ve-sk-karslaslan-sorunlar","title":"7. Best Practices ve S\u0131k Kar\u015f\u0131la\u015f\u0131lan Sorunlar","text":"<ul> <li>Network segmentation, redundancy, failover</li> <li>Documentation, incident response, root cause analysis</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"},{"location":"troubleshooting/spring/","title":"Spring Troubleshooting","text":"<p>Bu b\u00f6l\u00fcm, Spring ve Spring Boot projelerinde s\u0131k kar\u015f\u0131la\u015f\u0131lan sorunlar\u0131n tespiti, analizi ve \u00e7\u00f6z\u00fcm y\u00f6ntemlerini kapsar.</p>"},{"location":"troubleshooting/spring/#1-konfigurasyon-ve-property-sorunlar","title":"1. Konfig\u00fcrasyon ve Property Sorunlar\u0131","text":"<ul> <li>Property injection hatalar\u0131, profile y\u00f6netimi</li> <li>Config server ve centralized config sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/spring/#2-dependency-ve-bean-initialization-hatalar","title":"2. Dependency ve Bean Initialization Hatalar\u0131","text":"<ul> <li>Circular dependency, unsatisfied dependency</li> <li>BeanNotOfRequiredTypeException, NoSuchBeanDefinitionException</li> </ul>"},{"location":"troubleshooting/spring/#3-bean-lifecycle-ve-scope-problemleri","title":"3. Bean Lifecycle ve Scope Problemleri","text":"<ul> <li>Singleton vs prototype scope, bean destruction</li> <li>@PostConstruct, @PreDestroy, lifecycle callback hatalar\u0131</li> </ul>"},{"location":"troubleshooting/spring/#4-security-ve-authentication-problemleri","title":"4. Security ve Authentication Problemleri","text":"<ul> <li>CSRF, CORS, session management hatalar\u0131</li> <li>JWT/OAuth2 authentication sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/spring/#5-transaction-ve-persistence-sorunlar","title":"5. Transaction ve Persistence Sorunlar\u0131","text":"<ul> <li>Transaction propagation, rollback, nested transaction hatalar\u0131</li> <li>LazyInitializationException, N+1 select problemi</li> </ul>"},{"location":"troubleshooting/spring/#6-test-ve-mocking-sorunlar","title":"6. Test ve Mocking Sorunlar\u0131","text":"<ul> <li>MockMvc, Testcontainers, context caching hatalar\u0131</li> <li>Test isolation, flaky test, test data management</li> </ul>"},{"location":"troubleshooting/spring/#7-deployment-ve-environment-problemleri","title":"7. Deployment ve Environment Problemleri","text":"<ul> <li>Port \u00e7ak\u0131\u015fmalar\u0131, environment variable eksikli\u011fi</li> <li>Health check, actuator endpoint eri\u015fim sorunlar\u0131</li> </ul>"},{"location":"troubleshooting/spring/#8-performans-ve-memory-problemleri","title":"8. Performans ve Memory Problemleri","text":"<ul> <li>Memory leak, thread pool exhaustion, slow startup</li> <li>Profiling ve monitoring ile root cause analizi</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda \u00f6rnekler, ara\u00e7 kullan\u0131m\u0131 ve ileri seviye detaylar i\u00e7in ilgili alt b\u00f6l\u00fcmlere g\u00f6z atabilirsiniz.</p>"}]}